(module "compiled/declarations.kl")
"Copyright (c) 2010-2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
(begin (register-function-arity (quote shen.initialise_arity_table) 1) (define (kl:shen.initialise_arity_table V393) (cond ((null? V393) (quote ())) ((and (pair? V393) (pair? (cdr V393))) (let ((DecArity (kl:put (car V393) (quote arity) (car (cdr V393)) (kl:value (quote *property-vector*))))) (kl:shen.initialise_arity_table (cdr (cdr V393))))) (#t (kl:shen.f_error (quote shen.initialise_arity_table))))) (export shen.initialise_arity_table) (quote shen.initialise_arity_table))
(begin (register-function-arity (quote arity) 1) (define (kl:arity V395) (guard (lambda (E) -1) (kl:get V395 (quote arity) (kl:value (quote *property-vector*))))) (export arity) (quote arity))
(begin (register-function-arity (quote systemf) 1) (define (kl:systemf V397) (let ((Shen (kl:intern "shen"))) (let ((External (kl:get Shen (quote shen.external-symbols) (kl:value (quote *property-vector*))))) (let ((Place (kl:put Shen (quote shen.external-symbols) (kl:adjoin V397 External) (kl:value (quote *property-vector*))))) V397)))) (export systemf) (quote systemf))
(begin (register-function-arity (quote adjoin) 2) (define (kl:adjoin V400 V401) (if (kl:element? V400 V401) V401 (cons V400 V401))) (export adjoin) (quote adjoin))
(begin (register-function-arity (quote shen.lambda-form-entry) 1) (define (kl:shen.lambda-form-entry V403) (cond ((eq? (quote package) V403) (quote ())) ((eq? (quote receive) V403) (quote ())) (#t (let ((ArityF (kl:arity V403))) (if (kl:= ArityF -1) (quote ()) (if (kl:= ArityF 0) (quote ()) (cons (cons V403 (kl:eval-kl (kl:shen.lambda-form V403 ArityF))) (quote ())))))))) (export shen.lambda-form-entry) (quote shen.lambda-form-entry))
(begin (register-function-arity (quote shen.lambda-form) 2) (define (kl:shen.lambda-form V406 V407) (cond ((kl:= 0 V407) V406) (#t (let ((X (kl:gensym (quote V)))) (cons (quote lambda) (cons X (cons (kl:shen.lambda-form (kl:shen.add-end V406 X) (- V407 1)) (quote ())))))))) (export shen.lambda-form) (quote shen.lambda-form))
(begin (register-function-arity (quote shen.add-end) 2) (define (kl:shen.add-end V410 V411) (cond ((pair? V410) (kl:append V410 (cons V411 (quote ())))) (#t (cons V410 (cons V411 (quote ())))))) (export shen.add-end) (quote shen.add-end))
(begin (register-function-arity (quote shen.set-lambda-form-entry) 1) (define (kl:shen.set-lambda-form-entry V413) (cond ((pair? V413) (kl:put (car V413) (quote shen.lambda-form) (cdr V413) (kl:value (quote *property-vector*)))) (#t (kl:shen.f_error (quote shen.set-lambda-form-entry))))) (export shen.set-lambda-form-entry) (quote shen.set-lambda-form-entry))
(begin (register-function-arity (quote specialise) 1) (define (kl:specialise V415) (begin (kl:set (quote shen.*special*) (cons V415 (kl:value (quote shen.*special*)))) V415)) (export specialise) (quote specialise))
(begin (register-function-arity (quote unspecialise) 1) (define (kl:unspecialise V417) (begin (kl:set (quote shen.*special*) (kl:remove V417 (kl:value (quote shen.*special*)))) V417)) (export unspecialise) (quote unspecialise))
