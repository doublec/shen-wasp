(module "compiled/extension-features.kl")
"Copyright (c) 2019 Bruno Deferrari.\nBSD 3-Clause License: http://opensource.org/licenses/BSD-3-Clause"
(begin (register-function-arity (quote shen.x.features.cond-expand-macro) 1) (define (kl:shen.x.features.cond-expand-macro V4827) (cond ((and (pair? V4827) (and (eq? (quote shen.x.features.cond-expand) (car V4827)) (null? (cdr V4827)))) (simple-error "Unfulfilled shen.x.features.cond-expand clause.")) ((and (pair? V4827) (and (eq? (quote shen.x.features.cond-expand) (car V4827)) (and (pair? (cdr V4827)) (and (kl:= #t (car (cdr V4827))) (and (pair? (cdr (cdr V4827))) (null? (cdr (cdr (cdr V4827))))))))) (car (cdr (cdr V4827)))) ((and (pair? V4827) (and (eq? (quote shen.x.features.cond-expand) (car V4827)) (and (pair? (cdr V4827)) (and (pair? (car (cdr V4827))) (and (eq? (quote and) (car (car (cdr V4827)))) (and (null? (cdr (car (cdr V4827)))) (pair? (cdr (cdr V4827))))))))) (car (cdr (cdr V4827)))) ((and (pair? V4827) (and (eq? (quote shen.x.features.cond-expand) (car V4827)) (and (pair? (cdr V4827)) (and (pair? (car (cdr V4827))) (and (eq? (quote and) (car (car (cdr V4827)))) (and (pair? (cdr (car (cdr V4827)))) (pair? (cdr (cdr V4827))))))))) (cons (quote shen.x.features.cond-expand) (cons (car (cdr (car (cdr V4827)))) (cons (cons (quote shen.x.features.cond-expand) (cons (cons (quote and) (cdr (cdr (car (cdr V4827))))) (cdr (cdr V4827)))) (cdr (cdr (cdr V4827))))))) ((and (pair? V4827) (and (eq? (quote shen.x.features.cond-expand) (car V4827)) (and (pair? (cdr V4827)) (and (pair? (car (cdr V4827))) (and (eq? (quote or) (car (car (cdr V4827)))) (and (null? (cdr (car (cdr V4827)))) (pair? (cdr (cdr V4827))))))))) (cons (quote shen.x.features.cond-expand) (cdr (cdr (cdr V4827))))) ((and (pair? V4827) (and (eq? (quote shen.x.features.cond-expand) (car V4827)) (and (pair? (cdr V4827)) (and (pair? (car (cdr V4827))) (and (eq? (quote or) (car (car (cdr V4827)))) (and (pair? (cdr (car (cdr V4827)))) (pair? (cdr (cdr V4827))))))))) (cons (quote shen.x.features.cond-expand) (cons (car (cdr (car (cdr V4827)))) (cons (car (cdr (cdr V4827))) (cons #t (cons (cons (quote shen.x.features.cond-expand) (cons (cons (quote or) (cdr (cdr (car (cdr V4827))))) (cdr (cdr V4827)))) (quote ()))))))) ((and (pair? V4827) (and (eq? (quote shen.x.features.cond-expand) (car V4827)) (and (pair? (cdr V4827)) (and (pair? (car (cdr V4827))) (and (eq? (quote not) (car (car (cdr V4827)))) (and (pair? (cdr (car (cdr V4827)))) (and (null? (cdr (cdr (car (cdr V4827))))) (pair? (cdr (cdr V4827)))))))))) (cons (quote shen.x.features.cond-expand) (cons (car (cdr (car (cdr V4827)))) (cons (cons (quote shen.x.features.cond-expand) (cdr (cdr (cdr V4827)))) (cons #t (cons (car (cdr (cdr V4827))) (quote ()))))))) ((and (pair? V4827) (and (eq? (quote shen.x.features.cond-expand) (car V4827)) (and (pair? (cdr V4827)) (and (pair? (cdr (cdr V4827))) (kl:element? (car (cdr V4827)) (kl:value (quote shen.x.features.*features*))))))) (car (cdr (cdr V4827)))) ((and (pair? V4827) (and (eq? (quote shen.x.features.cond-expand) (car V4827)) (and (pair? (cdr V4827)) (pair? (cdr (cdr V4827)))))) (cons (quote shen.x.features.cond-expand) (cdr (cdr (cdr V4827))))) (#t V4827))) (export shen.x.features.cond-expand-macro) (quote shen.x.features.cond-expand-macro))
(begin (register-function-arity (quote shen.x.features.current) 0) (define (kl:shen.x.features.current) (kl:value (quote shen.x.features.*features*))) (export shen.x.features.current) (quote shen.x.features.current))
(begin (register-function-arity (quote shen.x.features.initialise) 1) (define (kl:shen.x.features.initialise V4829) (let ((_ (guard (lambda (E) (begin (kl:set (quote shen.x.features.*features*) (quote ())) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.x.features.cond-expand-macro) (lambda (X) (kl:shen.x.features.cond-expand-macro X)))) (kl:shen.add-macro (quote shen.x.features.cond-expand-macro))))) (kl:value (quote shen.x.features.*features*))))) (let ((Old (kl:shen.x.features.current))) (let ((_ (kl:set (quote shen.x.features.*features*) V4829))) Old)))) (export shen.x.features.initialise) (quote shen.x.features.initialise))
(begin (register-function-arity (quote shen.x.features.add) 1) (define (kl:shen.x.features.add V4831) (let ((Old (kl:shen.x.features.current))) (let ((_ (kl:set (quote shen.x.features.*features*) (kl:adjoin V4831 Old)))) Old))) (export shen.x.features.add) (quote shen.x.features.add))
