(module "compiled/types.kl")
"Copyright (c) 2010-2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
(begin (register-function-arity (quote declare) 2) (define (kl:declare V3152 V3153) (let ((Record (kl:set (quote shen.*signedfuncs*) (cons (cons V3152 V3153) (kl:value (quote shen.*signedfuncs*)))))) (let ((Variancy (guard (lambda (E) (quote shen.skip)) (kl:shen.variancy-test V3152 V3153)))) (let ((Type (kl:shen.rcons_form (kl:shen.demodulate V3153)))) (let ((F* (kl:concat (quote shen.type-signature-of-) V3152))) (let ((Parameters (kl:shen.parameters 1))) (let ((Clause (cons (cons F* (cons (quote X) (quote ()))) (cons (quote :-) (cons (cons (cons (quote unify!) (cons (quote X) (cons Type (quote ())))) (quote ())) (quote ())))))) (let ((AUM_instruction (kl:shen.aum Clause Parameters))) (let ((Code (kl:shen.aum_to_shen AUM_instruction))) (let ((ShenDef (cons (quote define) (cons F* (kl:append Parameters (kl:append (cons (quote ProcessN) (cons (quote Continuation) (quote ()))) (cons (quote ->) (cons Code (quote ()))))))))) (let ((Eval (kl:shen.eval-without-macros ShenDef))) V3152))))))))))) (export declare) (quote declare))
(begin (register-function-arity (quote shen.demodulate) 1) (define (kl:shen.demodulate V3155) (let ((Demod (kl:shen.walk (kl:value (quote shen.*demodulation-function*)) V3155))) (if (kl:= Demod V3155) V3155 (kl:shen.demodulate Demod)))) (export shen.demodulate) (quote shen.demodulate))
(begin (register-function-arity (quote shen.variancy-test) 2) (define (kl:shen.variancy-test V3158 V3159) (let ((TypeF (kl:shen.typecheck V3158 (quote B)))) (let ((Check (if (eq? (quote symbol) TypeF) (quote shen.skip) (if (assert-boolean (kl:shen.variant? TypeF V3159)) (quote shen.skip) (kl:shen.prhush (string-append "warning: changing the type of " (kl:shen.app V3158 " may create errors\n" (quote shen.a))) (kl:stoutput)))))) (quote shen.skip)))) (export shen.variancy-test) (quote shen.variancy-test))
(begin (register-function-arity (quote shen.variant?) 2) (define (kl:shen.variant? V3172 V3173) (cond ((kl:= V3173 V3172) #t) ((and (pair? V3172) (and (pair? V3173) (kl:= (car V3173) (car V3172)))) (kl:shen.variant? (cdr V3172) (cdr V3173))) ((and (pair? V3172) (and (pair? V3173) (and (kl:shen.pvar? (car V3172)) (kl:variable? (car V3173))))) (kl:shen.variant? (kl:subst (quote shen.a) (car V3172) (cdr V3172)) (kl:subst (quote shen.a) (car V3173) (cdr V3173)))) ((and (pair? V3172) (and (pair? (car V3172)) (and (pair? V3173) (pair? (car V3173))))) (kl:shen.variant? (kl:append (car V3172) (cdr V3172)) (kl:append (car V3173) (cdr V3173)))) (#t #f))) (export shen.variant?) (quote shen.variant?))
(begin (register-function-arity (quote shen.type-signature-of-absvector?) 3) (define (kl:shen.type-signature-of-absvector? V3178 V3179 V3180) (let ((A (kl:shen.newpv V3179))) (begin (kl:shen.incinfs) (kl:unify! V3178 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V3179 V3180)))) (export shen.type-signature-of-absvector?) (quote shen.type-signature-of-absvector?))
(begin (register-function-arity (quote shen.type-signature-of-adjoin) 3) (define (kl:shen.type-signature-of-adjoin V3188 V3189 V3190) (let ((A (kl:shen.newpv V3189))) (begin (kl:shen.incinfs) (kl:unify! V3188 (cons A (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) (quote ())))) V3189 V3190)))) (export shen.type-signature-of-adjoin) (quote shen.type-signature-of-adjoin))
(begin (register-function-arity (quote shen.type-signature-of-and) 3) (define (kl:shen.type-signature-of-and V3198 V3199 V3200) (begin (kl:shen.incinfs) (kl:unify! V3198 (cons (quote boolean) (cons (quote -->) (cons (cons (quote boolean) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V3199 V3200))) (export shen.type-signature-of-and) (quote shen.type-signature-of-and))
(begin (register-function-arity (quote shen.type-signature-of-shen.app) 3) (define (kl:shen.type-signature-of-shen.app V3208 V3209 V3210) (let ((A (kl:shen.newpv V3209))) (begin (kl:shen.incinfs) (kl:unify! V3208 (cons A (cons (quote -->) (cons (cons (quote string) (cons (quote -->) (cons (cons (quote symbol) (cons (quote -->) (cons (quote string) (quote ())))) (quote ())))) (quote ())))) V3209 V3210)))) (export shen.type-signature-of-shen.app) (quote shen.type-signature-of-shen.app))
(begin (register-function-arity (quote shen.type-signature-of-append) 3) (define (kl:shen.type-signature-of-append V3218 V3219 V3220) (let ((A (kl:shen.newpv V3219))) (begin (kl:shen.incinfs) (kl:unify! V3218 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) (quote ())))) V3219 V3220)))) (export shen.type-signature-of-append) (quote shen.type-signature-of-append))
(begin (register-function-arity (quote shen.type-signature-of-arity) 3) (define (kl:shen.type-signature-of-arity V3228 V3229 V3230) (let ((A (kl:shen.newpv V3229))) (begin (kl:shen.incinfs) (kl:unify! V3228 (cons A (cons (quote -->) (cons (quote number) (quote ())))) V3229 V3230)))) (export shen.type-signature-of-arity) (quote shen.type-signature-of-arity))
(begin (register-function-arity (quote shen.type-signature-of-assoc) 3) (define (kl:shen.type-signature-of-assoc V3238 V3239 V3240) (let ((A (kl:shen.newpv V3239))) (begin (kl:shen.incinfs) (kl:unify! V3238 (cons A (cons (quote -->) (cons (cons (cons (quote list) (cons (cons (quote list) (cons A (quote ()))) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) (quote ())))) V3239 V3240)))) (export shen.type-signature-of-assoc) (quote shen.type-signature-of-assoc))
(begin (register-function-arity (quote shen.type-signature-of-boolean?) 3) (define (kl:shen.type-signature-of-boolean? V3248 V3249 V3250) (let ((A (kl:shen.newpv V3249))) (begin (kl:shen.incinfs) (kl:unify! V3248 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V3249 V3250)))) (export shen.type-signature-of-boolean?) (quote shen.type-signature-of-boolean?))
(begin (register-function-arity (quote shen.type-signature-of-bound?) 3) (define (kl:shen.type-signature-of-bound? V3258 V3259 V3260) (begin (kl:shen.incinfs) (kl:unify! V3258 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V3259 V3260))) (export shen.type-signature-of-bound?) (quote shen.type-signature-of-bound?))
(begin (register-function-arity (quote shen.type-signature-of-cd) 3) (define (kl:shen.type-signature-of-cd V3268 V3269 V3270) (begin (kl:shen.incinfs) (kl:unify! V3268 (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) V3269 V3270))) (export shen.type-signature-of-cd) (quote shen.type-signature-of-cd))
(begin (register-function-arity (quote shen.type-signature-of-close) 3) (define (kl:shen.type-signature-of-close V3278 V3279 V3280) (let ((A (kl:shen.newpv V3279))) (let ((B (kl:shen.newpv V3279))) (begin (kl:shen.incinfs) (kl:unify! V3278 (cons (cons (quote stream) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons B (quote ()))) (quote ())))) V3279 V3280))))) (export shen.type-signature-of-close) (quote shen.type-signature-of-close))
(begin (register-function-arity (quote shen.type-signature-of-cn) 3) (define (kl:shen.type-signature-of-cn V3288 V3289 V3290) (begin (kl:shen.incinfs) (kl:unify! V3288 (cons (quote string) (cons (quote -->) (cons (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) (quote ())))) V3289 V3290))) (export shen.type-signature-of-cn) (quote shen.type-signature-of-cn))
(begin (register-function-arity (quote shen.type-signature-of-compile) 3) (define (kl:shen.type-signature-of-compile V3298 V3299 V3300) (let ((A (kl:shen.newpv V3299))) (let ((B (kl:shen.newpv V3299))) (begin (kl:shen.incinfs) (kl:unify! V3298 (cons (cons A (cons (quote shen.==>) (cons B (quote ())))) (cons (quote -->) (cons (cons A (cons (quote -->) (cons (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote -->) (cons B (quote ())))) (quote ())))) (quote ())))) V3299 V3300))))) (export shen.type-signature-of-compile) (quote shen.type-signature-of-compile))
(begin (register-function-arity (quote shen.type-signature-of-cons?) 3) (define (kl:shen.type-signature-of-cons? V3308 V3309 V3310) (let ((A (kl:shen.newpv V3309))) (begin (kl:shen.incinfs) (kl:unify! V3308 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V3309 V3310)))) (export shen.type-signature-of-cons?) (quote shen.type-signature-of-cons?))
(begin (register-function-arity (quote shen.type-signature-of-destroy) 3) (define (kl:shen.type-signature-of-destroy V3318 V3319 V3320) (let ((A (kl:shen.newpv V3319))) (let ((B (kl:shen.newpv V3319))) (begin (kl:shen.incinfs) (kl:unify! V3318 (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote -->) (cons (quote symbol) (quote ())))) V3319 V3320))))) (export shen.type-signature-of-destroy) (quote shen.type-signature-of-destroy))
(begin (register-function-arity (quote shen.type-signature-of-difference) 3) (define (kl:shen.type-signature-of-difference V3328 V3329 V3330) (let ((A (kl:shen.newpv V3329))) (begin (kl:shen.incinfs) (kl:unify! V3328 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) (quote ())))) V3329 V3330)))) (export shen.type-signature-of-difference) (quote shen.type-signature-of-difference))
(begin (register-function-arity (quote shen.type-signature-of-do) 3) (define (kl:shen.type-signature-of-do V3338 V3339 V3340) (let ((A (kl:shen.newpv V3339))) (let ((B (kl:shen.newpv V3339))) (begin (kl:shen.incinfs) (kl:unify! V3338 (cons A (cons (quote -->) (cons (cons B (cons (quote -->) (cons B (quote ())))) (quote ())))) V3339 V3340))))) (export shen.type-signature-of-do) (quote shen.type-signature-of-do))
(begin (register-function-arity (quote shen.type-signature-of-<e>) 3) (define (kl:shen.type-signature-of-<e> V3348 V3349 V3350) (let ((A (kl:shen.newpv V3349))) (let ((B (kl:shen.newpv V3349))) (begin (kl:shen.incinfs) (kl:unify! V3348 (cons (cons (quote list) (cons A (quote ()))) (cons (quote shen.==>) (cons (cons (quote list) (cons B (quote ()))) (quote ())))) V3349 V3350))))) (export shen.type-signature-of-<e>) (quote shen.type-signature-of-<e>))
(begin (register-function-arity (quote shen.type-signature-of-<!>) 3) (define (kl:shen.type-signature-of-<!> V3358 V3359 V3360) (let ((A (kl:shen.newpv V3359))) (begin (kl:shen.incinfs) (kl:unify! V3358 (cons (cons (quote list) (cons A (quote ()))) (cons (quote shen.==>) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) V3359 V3360)))) (export shen.type-signature-of-<!>) (quote shen.type-signature-of-<!>))
(begin (register-function-arity (quote shen.type-signature-of-element?) 3) (define (kl:shen.type-signature-of-element? V3368 V3369 V3370) (let ((A (kl:shen.newpv V3369))) (begin (kl:shen.incinfs) (kl:unify! V3368 (cons A (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V3369 V3370)))) (export shen.type-signature-of-element?) (quote shen.type-signature-of-element?))
(begin (register-function-arity (quote shen.type-signature-of-empty?) 3) (define (kl:shen.type-signature-of-empty? V3378 V3379 V3380) (let ((A (kl:shen.newpv V3379))) (begin (kl:shen.incinfs) (kl:unify! V3378 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V3379 V3380)))) (export shen.type-signature-of-empty?) (quote shen.type-signature-of-empty?))
(begin (register-function-arity (quote shen.type-signature-of-enable-type-theory) 3) (define (kl:shen.type-signature-of-enable-type-theory V3388 V3389 V3390) (begin (kl:shen.incinfs) (kl:unify! V3388 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V3389 V3390))) (export shen.type-signature-of-enable-type-theory) (quote shen.type-signature-of-enable-type-theory))
(begin (register-function-arity (quote shen.type-signature-of-external) 3) (define (kl:shen.type-signature-of-external V3398 V3399 V3400) (begin (kl:shen.incinfs) (kl:unify! V3398 (cons (quote symbol) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ())))) V3399 V3400))) (export shen.type-signature-of-external) (quote shen.type-signature-of-external))
(begin (register-function-arity (quote shen.type-signature-of-error-to-string) 3) (define (kl:shen.type-signature-of-error-to-string V3408 V3409 V3410) (begin (kl:shen.incinfs) (kl:unify! V3408 (cons (quote exception) (cons (quote -->) (cons (quote string) (quote ())))) V3409 V3410))) (export shen.type-signature-of-error-to-string) (quote shen.type-signature-of-error-to-string))
(begin (register-function-arity (quote shen.type-signature-of-explode) 3) (define (kl:shen.type-signature-of-explode V3418 V3419 V3420) (let ((A (kl:shen.newpv V3419))) (begin (kl:shen.incinfs) (kl:unify! V3418 (cons A (cons (quote -->) (cons (cons (quote list) (cons (quote string) (quote ()))) (quote ())))) V3419 V3420)))) (export shen.type-signature-of-explode) (quote shen.type-signature-of-explode))
(begin (register-function-arity (quote shen.type-signature-of-fail) 3) (define (kl:shen.type-signature-of-fail V3428 V3429 V3430) (begin (kl:shen.incinfs) (kl:unify! V3428 (cons (quote -->) (cons (quote symbol) (quote ()))) V3429 V3430))) (export shen.type-signature-of-fail) (quote shen.type-signature-of-fail))
(begin (register-function-arity (quote shen.type-signature-of-fail-if) 3) (define (kl:shen.type-signature-of-fail-if V3438 V3439 V3440) (begin (kl:shen.incinfs) (kl:unify! V3438 (cons (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) (cons (quote -->) (cons (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) (quote ())))) V3439 V3440))) (export shen.type-signature-of-fail-if) (quote shen.type-signature-of-fail-if))
(begin (register-function-arity (quote shen.type-signature-of-fix) 3) (define (kl:shen.type-signature-of-fix V3448 V3449 V3450) (let ((A (kl:shen.newpv V3449))) (begin (kl:shen.incinfs) (kl:unify! V3448 (cons (cons A (cons (quote -->) (cons A (quote ())))) (cons (quote -->) (cons (cons A (cons (quote -->) (cons A (quote ())))) (quote ())))) V3449 V3450)))) (export shen.type-signature-of-fix) (quote shen.type-signature-of-fix))
(begin (register-function-arity (quote shen.type-signature-of-freeze) 3) (define (kl:shen.type-signature-of-freeze V3458 V3459 V3460) (let ((A (kl:shen.newpv V3459))) (begin (kl:shen.incinfs) (kl:unify! V3458 (cons A (cons (quote -->) (cons (cons (quote lazy) (cons A (quote ()))) (quote ())))) V3459 V3460)))) (export shen.type-signature-of-freeze) (quote shen.type-signature-of-freeze))
(begin (register-function-arity (quote shen.type-signature-of-fst) 3) (define (kl:shen.type-signature-of-fst V3468 V3469 V3470) (let ((B (kl:shen.newpv V3469))) (let ((A (kl:shen.newpv V3469))) (begin (kl:shen.incinfs) (kl:unify! V3468 (cons (cons A (cons (quote *) (cons B (quote ())))) (cons (quote -->) (cons A (quote ())))) V3469 V3470))))) (export shen.type-signature-of-fst) (quote shen.type-signature-of-fst))
(begin (register-function-arity (quote shen.type-signature-of-function) 3) (define (kl:shen.type-signature-of-function V3478 V3479 V3480) (let ((A (kl:shen.newpv V3479))) (let ((B (kl:shen.newpv V3479))) (begin (kl:shen.incinfs) (kl:unify! V3478 (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote -->) (cons (cons A (cons (quote -->) (cons B (quote ())))) (quote ())))) V3479 V3480))))) (export shen.type-signature-of-function) (quote shen.type-signature-of-function))
(begin (register-function-arity (quote shen.type-signature-of-gensym) 3) (define (kl:shen.type-signature-of-gensym V3488 V3489 V3490) (begin (kl:shen.incinfs) (kl:unify! V3488 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V3489 V3490))) (export shen.type-signature-of-gensym) (quote shen.type-signature-of-gensym))
(begin (register-function-arity (quote shen.type-signature-of-<-vector) 3) (define (kl:shen.type-signature-of-<-vector V3498 V3499 V3500) (let ((A (kl:shen.newpv V3499))) (begin (kl:shen.incinfs) (kl:unify! V3498 (cons (cons (quote vector) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons A (quote ())))) (quote ())))) V3499 V3500)))) (export shen.type-signature-of-<-vector) (quote shen.type-signature-of-<-vector))
(begin (register-function-arity (quote shen.type-signature-of-vector->) 3) (define (kl:shen.type-signature-of-vector-> V3508 V3509 V3510) (let ((A (kl:shen.newpv V3509))) (begin (kl:shen.incinfs) (kl:unify! V3508 (cons (cons (quote vector) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (cons A (cons (quote -->) (cons (cons (quote vector) (cons A (quote ()))) (quote ())))) (quote ())))) (quote ())))) V3509 V3510)))) (export shen.type-signature-of-vector->) (quote shen.type-signature-of-vector->))
(begin (register-function-arity (quote shen.type-signature-of-vector) 3) (define (kl:shen.type-signature-of-vector V3518 V3519 V3520) (let ((A (kl:shen.newpv V3519))) (begin (kl:shen.incinfs) (kl:unify! V3518 (cons (quote number) (cons (quote -->) (cons (cons (quote vector) (cons A (quote ()))) (quote ())))) V3519 V3520)))) (export shen.type-signature-of-vector) (quote shen.type-signature-of-vector))
(begin (register-function-arity (quote shen.type-signature-of-get-time) 3) (define (kl:shen.type-signature-of-get-time V3528 V3529 V3530) (begin (kl:shen.incinfs) (kl:unify! V3528 (cons (quote symbol) (cons (quote -->) (cons (quote number) (quote ())))) V3529 V3530))) (export shen.type-signature-of-get-time) (quote shen.type-signature-of-get-time))
(begin (register-function-arity (quote shen.type-signature-of-hash) 3) (define (kl:shen.type-signature-of-hash V3538 V3539 V3540) (let ((A (kl:shen.newpv V3539))) (begin (kl:shen.incinfs) (kl:unify! V3538 (cons A (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ())))) V3539 V3540)))) (export shen.type-signature-of-hash) (quote shen.type-signature-of-hash))
(begin (register-function-arity (quote shen.type-signature-of-head) 3) (define (kl:shen.type-signature-of-head V3548 V3549 V3550) (let ((A (kl:shen.newpv V3549))) (begin (kl:shen.incinfs) (kl:unify! V3548 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons A (quote ())))) V3549 V3550)))) (export shen.type-signature-of-head) (quote shen.type-signature-of-head))
(begin (register-function-arity (quote shen.type-signature-of-hdv) 3) (define (kl:shen.type-signature-of-hdv V3558 V3559 V3560) (let ((A (kl:shen.newpv V3559))) (begin (kl:shen.incinfs) (kl:unify! V3558 (cons (cons (quote vector) (cons A (quote ()))) (cons (quote -->) (cons A (quote ())))) V3559 V3560)))) (export shen.type-signature-of-hdv) (quote shen.type-signature-of-hdv))
(begin (register-function-arity (quote shen.type-signature-of-hdstr) 3) (define (kl:shen.type-signature-of-hdstr V3568 V3569 V3570) (begin (kl:shen.incinfs) (kl:unify! V3568 (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) V3569 V3570))) (export shen.type-signature-of-hdstr) (quote shen.type-signature-of-hdstr))
(begin (register-function-arity (quote shen.type-signature-of-if) 3) (define (kl:shen.type-signature-of-if V3578 V3579 V3580) (let ((A (kl:shen.newpv V3579))) (begin (kl:shen.incinfs) (kl:unify! V3578 (cons (quote boolean) (cons (quote -->) (cons (cons A (cons (quote -->) (cons (cons A (cons (quote -->) (cons A (quote ())))) (quote ())))) (quote ())))) V3579 V3580)))) (export shen.type-signature-of-if) (quote shen.type-signature-of-if))
(begin (register-function-arity (quote shen.type-signature-of-it) 3) (define (kl:shen.type-signature-of-it V3588 V3589 V3590) (begin (kl:shen.incinfs) (kl:unify! V3588 (cons (quote -->) (cons (quote string) (quote ()))) V3589 V3590))) (export shen.type-signature-of-it) (quote shen.type-signature-of-it))
(begin (register-function-arity (quote shen.type-signature-of-implementation) 3) (define (kl:shen.type-signature-of-implementation V3598 V3599 V3600) (begin (kl:shen.incinfs) (kl:unify! V3598 (cons (quote -->) (cons (quote string) (quote ()))) V3599 V3600))) (export shen.type-signature-of-implementation) (quote shen.type-signature-of-implementation))
(begin (register-function-arity (quote shen.type-signature-of-include) 3) (define (kl:shen.type-signature-of-include V3608 V3609 V3610) (begin (kl:shen.incinfs) (kl:unify! V3608 (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ())))) V3609 V3610))) (export shen.type-signature-of-include) (quote shen.type-signature-of-include))
(begin (register-function-arity (quote shen.type-signature-of-include-all-but) 3) (define (kl:shen.type-signature-of-include-all-but V3618 V3619 V3620) (begin (kl:shen.incinfs) (kl:unify! V3618 (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ())))) V3619 V3620))) (export shen.type-signature-of-include-all-but) (quote shen.type-signature-of-include-all-but))
(begin (register-function-arity (quote shen.type-signature-of-inferences) 3) (define (kl:shen.type-signature-of-inferences V3628 V3629 V3630) (begin (kl:shen.incinfs) (kl:unify! V3628 (cons (quote -->) (cons (quote number) (quote ()))) V3629 V3630))) (export shen.type-signature-of-inferences) (quote shen.type-signature-of-inferences))
(begin (register-function-arity (quote shen.type-signature-of-shen.insert) 3) (define (kl:shen.type-signature-of-shen.insert V3638 V3639 V3640) (let ((A (kl:shen.newpv V3639))) (begin (kl:shen.incinfs) (kl:unify! V3638 (cons A (cons (quote -->) (cons (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) (quote ())))) V3639 V3640)))) (export shen.type-signature-of-shen.insert) (quote shen.type-signature-of-shen.insert))
(begin (register-function-arity (quote shen.type-signature-of-integer?) 3) (define (kl:shen.type-signature-of-integer? V3648 V3649 V3650) (let ((A (kl:shen.newpv V3649))) (begin (kl:shen.incinfs) (kl:unify! V3648 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V3649 V3650)))) (export shen.type-signature-of-integer?) (quote shen.type-signature-of-integer?))
(begin (register-function-arity (quote shen.type-signature-of-internal) 3) (define (kl:shen.type-signature-of-internal V3658 V3659 V3660) (begin (kl:shen.incinfs) (kl:unify! V3658 (cons (quote symbol) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ())))) V3659 V3660))) (export shen.type-signature-of-internal) (quote shen.type-signature-of-internal))
(begin (register-function-arity (quote shen.type-signature-of-intersection) 3) (define (kl:shen.type-signature-of-intersection V3668 V3669 V3670) (let ((A (kl:shen.newpv V3669))) (begin (kl:shen.incinfs) (kl:unify! V3668 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) (quote ())))) V3669 V3670)))) (export shen.type-signature-of-intersection) (quote shen.type-signature-of-intersection))
(begin (register-function-arity (quote shen.type-signature-of-kill) 3) (define (kl:shen.type-signature-of-kill V3678 V3679 V3680) (let ((A (kl:shen.newpv V3679))) (begin (kl:shen.incinfs) (kl:unify! V3678 (cons (quote -->) (cons A (quote ()))) V3679 V3680)))) (export shen.type-signature-of-kill) (quote shen.type-signature-of-kill))
(begin (register-function-arity (quote shen.type-signature-of-language) 3) (define (kl:shen.type-signature-of-language V3688 V3689 V3690) (begin (kl:shen.incinfs) (kl:unify! V3688 (cons (quote -->) (cons (quote string) (quote ()))) V3689 V3690))) (export shen.type-signature-of-language) (quote shen.type-signature-of-language))
(begin (register-function-arity (quote shen.type-signature-of-length) 3) (define (kl:shen.type-signature-of-length V3698 V3699 V3700) (let ((A (kl:shen.newpv V3699))) (begin (kl:shen.incinfs) (kl:unify! V3698 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (quote number) (quote ())))) V3699 V3700)))) (export shen.type-signature-of-length) (quote shen.type-signature-of-length))
(begin (register-function-arity (quote shen.type-signature-of-limit) 3) (define (kl:shen.type-signature-of-limit V3708 V3709 V3710) (let ((A (kl:shen.newpv V3709))) (begin (kl:shen.incinfs) (kl:unify! V3708 (cons (cons (quote vector) (cons A (quote ()))) (cons (quote -->) (cons (quote number) (quote ())))) V3709 V3710)))) (export shen.type-signature-of-limit) (quote shen.type-signature-of-limit))
(begin (register-function-arity (quote shen.type-signature-of-load) 3) (define (kl:shen.type-signature-of-load V3718 V3719 V3720) (begin (kl:shen.incinfs) (kl:unify! V3718 (cons (quote string) (cons (quote -->) (cons (quote symbol) (quote ())))) V3719 V3720))) (export shen.type-signature-of-load) (quote shen.type-signature-of-load))
(begin (register-function-arity (quote shen.type-signature-of-map) 3) (define (kl:shen.type-signature-of-map V3728 V3729 V3730) (let ((A (kl:shen.newpv V3729))) (let ((B (kl:shen.newpv V3729))) (begin (kl:shen.incinfs) (kl:unify! V3728 (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons B (quote ()))) (quote ())))) (quote ())))) V3729 V3730))))) (export shen.type-signature-of-map) (quote shen.type-signature-of-map))
(begin (register-function-arity (quote shen.type-signature-of-mapcan) 3) (define (kl:shen.type-signature-of-mapcan V3738 V3739 V3740) (let ((A (kl:shen.newpv V3739))) (let ((B (kl:shen.newpv V3739))) (begin (kl:shen.incinfs) (kl:unify! V3738 (cons (cons A (cons (quote -->) (cons (cons (quote list) (cons B (quote ()))) (quote ())))) (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons B (quote ()))) (quote ())))) (quote ())))) V3739 V3740))))) (export shen.type-signature-of-mapcan) (quote shen.type-signature-of-mapcan))
(begin (register-function-arity (quote shen.type-signature-of-maxinferences) 3) (define (kl:shen.type-signature-of-maxinferences V3748 V3749 V3750) (begin (kl:shen.incinfs) (kl:unify! V3748 (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) V3749 V3750))) (export shen.type-signature-of-maxinferences) (quote shen.type-signature-of-maxinferences))
(begin (register-function-arity (quote shen.type-signature-of-n->string) 3) (define (kl:shen.type-signature-of-n->string V3758 V3759 V3760) (begin (kl:shen.incinfs) (kl:unify! V3758 (cons (quote number) (cons (quote -->) (cons (quote string) (quote ())))) V3759 V3760))) (export shen.type-signature-of-n->string) (quote shen.type-signature-of-n->string))
(begin (register-function-arity (quote shen.type-signature-of-nl) 3) (define (kl:shen.type-signature-of-nl V3768 V3769 V3770) (begin (kl:shen.incinfs) (kl:unify! V3768 (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) V3769 V3770))) (export shen.type-signature-of-nl) (quote shen.type-signature-of-nl))
(begin (register-function-arity (quote shen.type-signature-of-not) 3) (define (kl:shen.type-signature-of-not V3778 V3779 V3780) (begin (kl:shen.incinfs) (kl:unify! V3778 (cons (quote boolean) (cons (quote -->) (cons (quote boolean) (quote ())))) V3779 V3780))) (export shen.type-signature-of-not) (quote shen.type-signature-of-not))
(begin (register-function-arity (quote shen.type-signature-of-nth) 3) (define (kl:shen.type-signature-of-nth V3788 V3789 V3790) (let ((A (kl:shen.newpv V3789))) (begin (kl:shen.incinfs) (kl:unify! V3788 (cons (quote number) (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons A (quote ())))) (quote ())))) V3789 V3790)))) (export shen.type-signature-of-nth) (quote shen.type-signature-of-nth))
(begin (register-function-arity (quote shen.type-signature-of-number?) 3) (define (kl:shen.type-signature-of-number? V3798 V3799 V3800) (let ((A (kl:shen.newpv V3799))) (begin (kl:shen.incinfs) (kl:unify! V3798 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V3799 V3800)))) (export shen.type-signature-of-number?) (quote shen.type-signature-of-number?))
(begin (register-function-arity (quote shen.type-signature-of-occurrences) 3) (define (kl:shen.type-signature-of-occurrences V3808 V3809 V3810) (let ((A (kl:shen.newpv V3809))) (let ((B (kl:shen.newpv V3809))) (begin (kl:shen.incinfs) (kl:unify! V3808 (cons A (cons (quote -->) (cons (cons B (cons (quote -->) (cons (quote number) (quote ())))) (quote ())))) V3809 V3810))))) (export shen.type-signature-of-occurrences) (quote shen.type-signature-of-occurrences))
(begin (register-function-arity (quote shen.type-signature-of-occurs-check) 3) (define (kl:shen.type-signature-of-occurs-check V3818 V3819 V3820) (begin (kl:shen.incinfs) (kl:unify! V3818 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V3819 V3820))) (export shen.type-signature-of-occurs-check) (quote shen.type-signature-of-occurs-check))
(begin (register-function-arity (quote shen.type-signature-of-optimise) 3) (define (kl:shen.type-signature-of-optimise V3828 V3829 V3830) (begin (kl:shen.incinfs) (kl:unify! V3828 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V3829 V3830))) (export shen.type-signature-of-optimise) (quote shen.type-signature-of-optimise))
(begin (register-function-arity (quote shen.type-signature-of-or) 3) (define (kl:shen.type-signature-of-or V3838 V3839 V3840) (begin (kl:shen.incinfs) (kl:unify! V3838 (cons (quote boolean) (cons (quote -->) (cons (cons (quote boolean) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V3839 V3840))) (export shen.type-signature-of-or) (quote shen.type-signature-of-or))
(begin (register-function-arity (quote shen.type-signature-of-os) 3) (define (kl:shen.type-signature-of-os V3848 V3849 V3850) (begin (kl:shen.incinfs) (kl:unify! V3848 (cons (quote -->) (cons (quote string) (quote ()))) V3849 V3850))) (export shen.type-signature-of-os) (quote shen.type-signature-of-os))
(begin (register-function-arity (quote shen.type-signature-of-package?) 3) (define (kl:shen.type-signature-of-package? V3858 V3859 V3860) (begin (kl:shen.incinfs) (kl:unify! V3858 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V3859 V3860))) (export shen.type-signature-of-package?) (quote shen.type-signature-of-package?))
(begin (register-function-arity (quote shen.type-signature-of-port) 3) (define (kl:shen.type-signature-of-port V3868 V3869 V3870) (begin (kl:shen.incinfs) (kl:unify! V3868 (cons (quote -->) (cons (quote string) (quote ()))) V3869 V3870))) (export shen.type-signature-of-port) (quote shen.type-signature-of-port))
(begin (register-function-arity (quote shen.type-signature-of-porters) 3) (define (kl:shen.type-signature-of-porters V3878 V3879 V3880) (begin (kl:shen.incinfs) (kl:unify! V3878 (cons (quote -->) (cons (quote string) (quote ()))) V3879 V3880))) (export shen.type-signature-of-porters) (quote shen.type-signature-of-porters))
(begin (register-function-arity (quote shen.type-signature-of-pos) 3) (define (kl:shen.type-signature-of-pos V3888 V3889 V3890) (begin (kl:shen.incinfs) (kl:unify! V3888 (cons (quote string) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote string) (quote ())))) (quote ())))) V3889 V3890))) (export shen.type-signature-of-pos) (quote shen.type-signature-of-pos))
(begin (register-function-arity (quote shen.type-signature-of-pr) 3) (define (kl:shen.type-signature-of-pr V3898 V3899 V3900) (begin (kl:shen.incinfs) (kl:unify! V3898 (cons (quote string) (cons (quote -->) (cons (cons (cons (quote stream) (cons (quote out) (quote ()))) (cons (quote -->) (cons (quote string) (quote ())))) (quote ())))) V3899 V3900))) (export shen.type-signature-of-pr) (quote shen.type-signature-of-pr))
(begin (register-function-arity (quote shen.type-signature-of-print) 3) (define (kl:shen.type-signature-of-print V3908 V3909 V3910) (let ((A (kl:shen.newpv V3909))) (begin (kl:shen.incinfs) (kl:unify! V3908 (cons A (cons (quote -->) (cons A (quote ())))) V3909 V3910)))) (export shen.type-signature-of-print) (quote shen.type-signature-of-print))
(begin (register-function-arity (quote shen.type-signature-of-profile) 3) (define (kl:shen.type-signature-of-profile V3918 V3919 V3920) (let ((A (kl:shen.newpv V3919))) (let ((B (kl:shen.newpv V3919))) (begin (kl:shen.incinfs) (kl:unify! V3918 (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote -->) (cons (cons A (cons (quote -->) (cons B (quote ())))) (quote ())))) V3919 V3920))))) (export shen.type-signature-of-profile) (quote shen.type-signature-of-profile))
(begin (register-function-arity (quote shen.type-signature-of-preclude) 3) (define (kl:shen.type-signature-of-preclude V3928 V3929 V3930) (begin (kl:shen.incinfs) (kl:unify! V3928 (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ())))) V3929 V3930))) (export shen.type-signature-of-preclude) (quote shen.type-signature-of-preclude))
(begin (register-function-arity (quote shen.type-signature-of-shen.proc-nl) 3) (define (kl:shen.type-signature-of-shen.proc-nl V3938 V3939 V3940) (begin (kl:shen.incinfs) (kl:unify! V3938 (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) V3939 V3940))) (export shen.type-signature-of-shen.proc-nl) (quote shen.type-signature-of-shen.proc-nl))
(begin (register-function-arity (quote shen.type-signature-of-profile-results) 3) (define (kl:shen.type-signature-of-profile-results V3948 V3949 V3950) (let ((A (kl:shen.newpv V3949))) (let ((B (kl:shen.newpv V3949))) (begin (kl:shen.incinfs) (kl:unify! V3948 (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote -->) (cons (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote *) (cons (quote number) (quote ())))) (quote ())))) V3949 V3950))))) (export shen.type-signature-of-profile-results) (quote shen.type-signature-of-profile-results))
(begin (register-function-arity (quote shen.type-signature-of-protect) 3) (define (kl:shen.type-signature-of-protect V3958 V3959 V3960) (begin (kl:shen.incinfs) (kl:unify! V3958 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V3959 V3960))) (export shen.type-signature-of-protect) (quote shen.type-signature-of-protect))
(begin (register-function-arity (quote shen.type-signature-of-preclude-all-but) 3) (define (kl:shen.type-signature-of-preclude-all-but V3968 V3969 V3970) (begin (kl:shen.incinfs) (kl:unify! V3968 (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ())))) V3969 V3970))) (export shen.type-signature-of-preclude-all-but) (quote shen.type-signature-of-preclude-all-but))
(begin (register-function-arity (quote shen.type-signature-of-shen.prhush) 3) (define (kl:shen.type-signature-of-shen.prhush V3978 V3979 V3980) (begin (kl:shen.incinfs) (kl:unify! V3978 (cons (quote string) (cons (quote -->) (cons (cons (cons (quote stream) (cons (quote out) (quote ()))) (cons (quote -->) (cons (quote string) (quote ())))) (quote ())))) V3979 V3980))) (export shen.type-signature-of-shen.prhush) (quote shen.type-signature-of-shen.prhush))
(begin (register-function-arity (quote shen.type-signature-of-ps) 3) (define (kl:shen.type-signature-of-ps V3988 V3989 V3990) (begin (kl:shen.incinfs) (kl:unify! V3988 (cons (quote symbol) (cons (quote -->) (cons (cons (quote list) (cons (quote unit) (quote ()))) (quote ())))) V3989 V3990))) (export shen.type-signature-of-ps) (quote shen.type-signature-of-ps))
(begin (register-function-arity (quote shen.type-signature-of-read) 3) (define (kl:shen.type-signature-of-read V3998 V3999 V4000) (begin (kl:shen.incinfs) (kl:unify! V3998 (cons (cons (quote stream) (cons (quote in) (quote ()))) (cons (quote -->) (cons (quote unit) (quote ())))) V3999 V4000))) (export shen.type-signature-of-read) (quote shen.type-signature-of-read))
(begin (register-function-arity (quote shen.type-signature-of-read-byte) 3) (define (kl:shen.type-signature-of-read-byte V4008 V4009 V4010) (begin (kl:shen.incinfs) (kl:unify! V4008 (cons (cons (quote stream) (cons (quote in) (quote ()))) (cons (quote -->) (cons (quote number) (quote ())))) V4009 V4010))) (export shen.type-signature-of-read-byte) (quote shen.type-signature-of-read-byte))
(begin (register-function-arity (quote shen.type-signature-of-read-file-as-bytelist) 3) (define (kl:shen.type-signature-of-read-file-as-bytelist V4018 V4019 V4020) (begin (kl:shen.incinfs) (kl:unify! V4018 (cons (quote string) (cons (quote -->) (cons (cons (quote list) (cons (quote number) (quote ()))) (quote ())))) V4019 V4020))) (export shen.type-signature-of-read-file-as-bytelist) (quote shen.type-signature-of-read-file-as-bytelist))
(begin (register-function-arity (quote shen.type-signature-of-read-file-as-string) 3) (define (kl:shen.type-signature-of-read-file-as-string V4028 V4029 V4030) (begin (kl:shen.incinfs) (kl:unify! V4028 (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) V4029 V4030))) (export shen.type-signature-of-read-file-as-string) (quote shen.type-signature-of-read-file-as-string))
(begin (register-function-arity (quote shen.type-signature-of-read-file) 3) (define (kl:shen.type-signature-of-read-file V4038 V4039 V4040) (begin (kl:shen.incinfs) (kl:unify! V4038 (cons (quote string) (cons (quote -->) (cons (cons (quote list) (cons (quote unit) (quote ()))) (quote ())))) V4039 V4040))) (export shen.type-signature-of-read-file) (quote shen.type-signature-of-read-file))
(begin (register-function-arity (quote shen.type-signature-of-read-from-string) 3) (define (kl:shen.type-signature-of-read-from-string V4048 V4049 V4050) (begin (kl:shen.incinfs) (kl:unify! V4048 (cons (quote string) (cons (quote -->) (cons (cons (quote list) (cons (quote unit) (quote ()))) (quote ())))) V4049 V4050))) (export shen.type-signature-of-read-from-string) (quote shen.type-signature-of-read-from-string))
(begin (register-function-arity (quote shen.type-signature-of-release) 3) (define (kl:shen.type-signature-of-release V4058 V4059 V4060) (begin (kl:shen.incinfs) (kl:unify! V4058 (cons (quote -->) (cons (quote string) (quote ()))) V4059 V4060))) (export shen.type-signature-of-release) (quote shen.type-signature-of-release))
(begin (register-function-arity (quote shen.type-signature-of-remove) 3) (define (kl:shen.type-signature-of-remove V4068 V4069 V4070) (let ((A (kl:shen.newpv V4069))) (begin (kl:shen.incinfs) (kl:unify! V4068 (cons A (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) (quote ())))) V4069 V4070)))) (export shen.type-signature-of-remove) (quote shen.type-signature-of-remove))
(begin (register-function-arity (quote shen.type-signature-of-reverse) 3) (define (kl:shen.type-signature-of-reverse V4078 V4079 V4080) (let ((A (kl:shen.newpv V4079))) (begin (kl:shen.incinfs) (kl:unify! V4078 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) V4079 V4080)))) (export shen.type-signature-of-reverse) (quote shen.type-signature-of-reverse))
(begin (register-function-arity (quote shen.type-signature-of-simple-error) 3) (define (kl:shen.type-signature-of-simple-error V4088 V4089 V4090) (let ((A (kl:shen.newpv V4089))) (begin (kl:shen.incinfs) (kl:unify! V4088 (cons (quote string) (cons (quote -->) (cons A (quote ())))) V4089 V4090)))) (export shen.type-signature-of-simple-error) (quote shen.type-signature-of-simple-error))
(begin (register-function-arity (quote shen.type-signature-of-snd) 3) (define (kl:shen.type-signature-of-snd V4098 V4099 V4100) (let ((A (kl:shen.newpv V4099))) (let ((B (kl:shen.newpv V4099))) (begin (kl:shen.incinfs) (kl:unify! V4098 (cons (cons A (cons (quote *) (cons B (quote ())))) (cons (quote -->) (cons B (quote ())))) V4099 V4100))))) (export shen.type-signature-of-snd) (quote shen.type-signature-of-snd))
(begin (register-function-arity (quote shen.type-signature-of-specialise) 3) (define (kl:shen.type-signature-of-specialise V4108 V4109 V4110) (begin (kl:shen.incinfs) (kl:unify! V4108 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V4109 V4110))) (export shen.type-signature-of-specialise) (quote shen.type-signature-of-specialise))
(begin (register-function-arity (quote shen.type-signature-of-spy) 3) (define (kl:shen.type-signature-of-spy V4118 V4119 V4120) (begin (kl:shen.incinfs) (kl:unify! V4118 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V4119 V4120))) (export shen.type-signature-of-spy) (quote shen.type-signature-of-spy))
(begin (register-function-arity (quote shen.type-signature-of-step) 3) (define (kl:shen.type-signature-of-step V4128 V4129 V4130) (begin (kl:shen.incinfs) (kl:unify! V4128 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V4129 V4130))) (export shen.type-signature-of-step) (quote shen.type-signature-of-step))
(begin (register-function-arity (quote shen.type-signature-of-stinput) 3) (define (kl:shen.type-signature-of-stinput V4138 V4139 V4140) (begin (kl:shen.incinfs) (kl:unify! V4138 (cons (quote -->) (cons (cons (quote stream) (cons (quote in) (quote ()))) (quote ()))) V4139 V4140))) (export shen.type-signature-of-stinput) (quote shen.type-signature-of-stinput))
(begin (register-function-arity (quote shen.type-signature-of-sterror) 3) (define (kl:shen.type-signature-of-sterror V4148 V4149 V4150) (begin (kl:shen.incinfs) (kl:unify! V4148 (cons (quote -->) (cons (cons (quote stream) (cons (quote out) (quote ()))) (quote ()))) V4149 V4150))) (export shen.type-signature-of-sterror) (quote shen.type-signature-of-sterror))
(begin (register-function-arity (quote shen.type-signature-of-stoutput) 3) (define (kl:shen.type-signature-of-stoutput V4158 V4159 V4160) (begin (kl:shen.incinfs) (kl:unify! V4158 (cons (quote -->) (cons (cons (quote stream) (cons (quote out) (quote ()))) (quote ()))) V4159 V4160))) (export shen.type-signature-of-stoutput) (quote shen.type-signature-of-stoutput))
(begin (register-function-arity (quote shen.type-signature-of-string?) 3) (define (kl:shen.type-signature-of-string? V4168 V4169 V4170) (let ((A (kl:shen.newpv V4169))) (begin (kl:shen.incinfs) (kl:unify! V4168 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V4169 V4170)))) (export shen.type-signature-of-string?) (quote shen.type-signature-of-string?))
(begin (register-function-arity (quote shen.type-signature-of-str) 3) (define (kl:shen.type-signature-of-str V4178 V4179 V4180) (let ((A (kl:shen.newpv V4179))) (begin (kl:shen.incinfs) (kl:unify! V4178 (cons A (cons (quote -->) (cons (quote string) (quote ())))) V4179 V4180)))) (export shen.type-signature-of-str) (quote shen.type-signature-of-str))
(begin (register-function-arity (quote shen.type-signature-of-string->n) 3) (define (kl:shen.type-signature-of-string->n V4188 V4189 V4190) (begin (kl:shen.incinfs) (kl:unify! V4188 (cons (quote string) (cons (quote -->) (cons (quote number) (quote ())))) V4189 V4190))) (export shen.type-signature-of-string->n) (quote shen.type-signature-of-string->n))
(begin (register-function-arity (quote shen.type-signature-of-string->symbol) 3) (define (kl:shen.type-signature-of-string->symbol V4198 V4199 V4200) (begin (kl:shen.incinfs) (kl:unify! V4198 (cons (quote string) (cons (quote -->) (cons (quote symbol) (quote ())))) V4199 V4200))) (export shen.type-signature-of-string->symbol) (quote shen.type-signature-of-string->symbol))
(begin (register-function-arity (quote shen.type-signature-of-sum) 3) (define (kl:shen.type-signature-of-sum V4208 V4209 V4210) (begin (kl:shen.incinfs) (kl:unify! V4208 (cons (cons (quote list) (cons (quote number) (quote ()))) (cons (quote -->) (cons (quote number) (quote ())))) V4209 V4210))) (export shen.type-signature-of-sum) (quote shen.type-signature-of-sum))
(begin (register-function-arity (quote shen.type-signature-of-symbol?) 3) (define (kl:shen.type-signature-of-symbol? V4218 V4219 V4220) (let ((A (kl:shen.newpv V4219))) (begin (kl:shen.incinfs) (kl:unify! V4218 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V4219 V4220)))) (export shen.type-signature-of-symbol?) (quote shen.type-signature-of-symbol?))
(begin (register-function-arity (quote shen.type-signature-of-systemf) 3) (define (kl:shen.type-signature-of-systemf V4228 V4229 V4230) (begin (kl:shen.incinfs) (kl:unify! V4228 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V4229 V4230))) (export shen.type-signature-of-systemf) (quote shen.type-signature-of-systemf))
(begin (register-function-arity (quote shen.type-signature-of-tail) 3) (define (kl:shen.type-signature-of-tail V4238 V4239 V4240) (let ((A (kl:shen.newpv V4239))) (begin (kl:shen.incinfs) (kl:unify! V4238 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) V4239 V4240)))) (export shen.type-signature-of-tail) (quote shen.type-signature-of-tail))
(begin (register-function-arity (quote shen.type-signature-of-tlstr) 3) (define (kl:shen.type-signature-of-tlstr V4248 V4249 V4250) (begin (kl:shen.incinfs) (kl:unify! V4248 (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) V4249 V4250))) (export shen.type-signature-of-tlstr) (quote shen.type-signature-of-tlstr))
(begin (register-function-arity (quote shen.type-signature-of-tlv) 3) (define (kl:shen.type-signature-of-tlv V4258 V4259 V4260) (let ((A (kl:shen.newpv V4259))) (begin (kl:shen.incinfs) (kl:unify! V4258 (cons (cons (quote vector) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote vector) (cons A (quote ()))) (quote ())))) V4259 V4260)))) (export shen.type-signature-of-tlv) (quote shen.type-signature-of-tlv))
(begin (register-function-arity (quote shen.type-signature-of-tc) 3) (define (kl:shen.type-signature-of-tc V4268 V4269 V4270) (begin (kl:shen.incinfs) (kl:unify! V4268 (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) V4269 V4270))) (export shen.type-signature-of-tc) (quote shen.type-signature-of-tc))
(begin (register-function-arity (quote shen.type-signature-of-tc?) 3) (define (kl:shen.type-signature-of-tc? V4278 V4279 V4280) (begin (kl:shen.incinfs) (kl:unify! V4278 (cons (quote -->) (cons (quote boolean) (quote ()))) V4279 V4280))) (export shen.type-signature-of-tc?) (quote shen.type-signature-of-tc?))
(begin (register-function-arity (quote shen.type-signature-of-thaw) 3) (define (kl:shen.type-signature-of-thaw V4288 V4289 V4290) (let ((A (kl:shen.newpv V4289))) (begin (kl:shen.incinfs) (kl:unify! V4288 (cons (cons (quote lazy) (cons A (quote ()))) (cons (quote -->) (cons A (quote ())))) V4289 V4290)))) (export shen.type-signature-of-thaw) (quote shen.type-signature-of-thaw))
(begin (register-function-arity (quote shen.type-signature-of-track) 3) (define (kl:shen.type-signature-of-track V4298 V4299 V4300) (begin (kl:shen.incinfs) (kl:unify! V4298 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V4299 V4300))) (export shen.type-signature-of-track) (quote shen.type-signature-of-track))
(begin (register-function-arity (quote shen.type-signature-of-trap-error) 3) (define (kl:shen.type-signature-of-trap-error V4308 V4309 V4310) (let ((A (kl:shen.newpv V4309))) (begin (kl:shen.incinfs) (kl:unify! V4308 (cons A (cons (quote -->) (cons (cons (cons (quote exception) (cons (quote -->) (cons A (quote ())))) (cons (quote -->) (cons A (quote ())))) (quote ())))) V4309 V4310)))) (export shen.type-signature-of-trap-error) (quote shen.type-signature-of-trap-error))
(begin (register-function-arity (quote shen.type-signature-of-tuple?) 3) (define (kl:shen.type-signature-of-tuple? V4318 V4319 V4320) (let ((A (kl:shen.newpv V4319))) (begin (kl:shen.incinfs) (kl:unify! V4318 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V4319 V4320)))) (export shen.type-signature-of-tuple?) (quote shen.type-signature-of-tuple?))
(begin (register-function-arity (quote shen.type-signature-of-undefmacro) 3) (define (kl:shen.type-signature-of-undefmacro V4328 V4329 V4330) (begin (kl:shen.incinfs) (kl:unify! V4328 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V4329 V4330))) (export shen.type-signature-of-undefmacro) (quote shen.type-signature-of-undefmacro))
(begin (register-function-arity (quote shen.type-signature-of-union) 3) (define (kl:shen.type-signature-of-union V4338 V4339 V4340) (let ((A (kl:shen.newpv V4339))) (begin (kl:shen.incinfs) (kl:unify! V4338 (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons A (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons A (quote ()))) (quote ())))) (quote ())))) V4339 V4340)))) (export shen.type-signature-of-union) (quote shen.type-signature-of-union))
(begin (register-function-arity (quote shen.type-signature-of-unprofile) 3) (define (kl:shen.type-signature-of-unprofile V4348 V4349 V4350) (let ((A (kl:shen.newpv V4349))) (let ((B (kl:shen.newpv V4349))) (begin (kl:shen.incinfs) (kl:unify! V4348 (cons (cons A (cons (quote -->) (cons B (quote ())))) (cons (quote -->) (cons (cons A (cons (quote -->) (cons B (quote ())))) (quote ())))) V4349 V4350))))) (export shen.type-signature-of-unprofile) (quote shen.type-signature-of-unprofile))
(begin (register-function-arity (quote shen.type-signature-of-untrack) 3) (define (kl:shen.type-signature-of-untrack V4358 V4359 V4360) (begin (kl:shen.incinfs) (kl:unify! V4358 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V4359 V4360))) (export shen.type-signature-of-untrack) (quote shen.type-signature-of-untrack))
(begin (register-function-arity (quote shen.type-signature-of-unspecialise) 3) (define (kl:shen.type-signature-of-unspecialise V4368 V4369 V4370) (begin (kl:shen.incinfs) (kl:unify! V4368 (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) V4369 V4370))) (export shen.type-signature-of-unspecialise) (quote shen.type-signature-of-unspecialise))
(begin (register-function-arity (quote shen.type-signature-of-variable?) 3) (define (kl:shen.type-signature-of-variable? V4378 V4379 V4380) (let ((A (kl:shen.newpv V4379))) (begin (kl:shen.incinfs) (kl:unify! V4378 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V4379 V4380)))) (export shen.type-signature-of-variable?) (quote shen.type-signature-of-variable?))
(begin (register-function-arity (quote shen.type-signature-of-vector?) 3) (define (kl:shen.type-signature-of-vector? V4388 V4389 V4390) (let ((A (kl:shen.newpv V4389))) (begin (kl:shen.incinfs) (kl:unify! V4388 (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) V4389 V4390)))) (export shen.type-signature-of-vector?) (quote shen.type-signature-of-vector?))
(begin (register-function-arity (quote shen.type-signature-of-version) 3) (define (kl:shen.type-signature-of-version V4398 V4399 V4400) (begin (kl:shen.incinfs) (kl:unify! V4398 (cons (quote -->) (cons (quote string) (quote ()))) V4399 V4400))) (export shen.type-signature-of-version) (quote shen.type-signature-of-version))
(begin (register-function-arity (quote shen.type-signature-of-write-to-file) 3) (define (kl:shen.type-signature-of-write-to-file V4408 V4409 V4410) (let ((A (kl:shen.newpv V4409))) (begin (kl:shen.incinfs) (kl:unify! V4408 (cons (quote string) (cons (quote -->) (cons (cons A (cons (quote -->) (cons A (quote ())))) (quote ())))) V4409 V4410)))) (export shen.type-signature-of-write-to-file) (quote shen.type-signature-of-write-to-file))
(begin (register-function-arity (quote shen.type-signature-of-write-byte) 3) (define (kl:shen.type-signature-of-write-byte V4418 V4419 V4420) (begin (kl:shen.incinfs) (kl:unify! V4418 (cons (quote number) (cons (quote -->) (cons (cons (cons (quote stream) (cons (quote out) (quote ()))) (cons (quote -->) (cons (quote number) (quote ())))) (quote ())))) V4419 V4420))) (export shen.type-signature-of-write-byte) (quote shen.type-signature-of-write-byte))
(begin (register-function-arity (quote shen.type-signature-of-y-or-n?) 3) (define (kl:shen.type-signature-of-y-or-n? V4428 V4429 V4430) (begin (kl:shen.incinfs) (kl:unify! V4428 (cons (quote string) (cons (quote -->) (cons (quote boolean) (quote ())))) V4429 V4430))) (export shen.type-signature-of-y-or-n?) (quote shen.type-signature-of-y-or-n?))
(begin (register-function-arity (quote shen.type-signature-of->) 3) (define (kl:shen.type-signature-of-> V4438 V4439 V4440) (begin (kl:shen.incinfs) (kl:unify! V4438 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V4439 V4440))) (export shen.type-signature-of->) (quote shen.type-signature-of->))
(begin (register-function-arity (quote shen.type-signature-of-<) 3) (define (kl:shen.type-signature-of-< V4448 V4449 V4450) (begin (kl:shen.incinfs) (kl:unify! V4448 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V4449 V4450))) (export shen.type-signature-of-<) (quote shen.type-signature-of-<))
(begin (register-function-arity (quote shen.type-signature-of->=) 3) (define (kl:shen.type-signature-of->= V4458 V4459 V4460) (begin (kl:shen.incinfs) (kl:unify! V4458 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V4459 V4460))) (export shen.type-signature-of->=) (quote shen.type-signature-of->=))
(begin (register-function-arity (quote shen.type-signature-of-<=) 3) (define (kl:shen.type-signature-of-<= V4468 V4469 V4470) (begin (kl:shen.incinfs) (kl:unify! V4468 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V4469 V4470))) (export shen.type-signature-of-<=) (quote shen.type-signature-of-<=))
(begin (register-function-arity (quote shen.type-signature-of-=) 3) (define (kl:shen.type-signature-of-= V4478 V4479 V4480) (let ((A (kl:shen.newpv V4479))) (begin (kl:shen.incinfs) (kl:unify! V4478 (cons A (cons (quote -->) (cons (cons A (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V4479 V4480)))) (export shen.type-signature-of-=) (quote shen.type-signature-of-=))
(begin (register-function-arity (quote shen.type-signature-of-+) 3) (define (kl:shen.type-signature-of-+ V4488 V4489 V4490) (begin (kl:shen.incinfs) (kl:unify! V4488 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ())))) V4489 V4490))) (export shen.type-signature-of-+) (quote shen.type-signature-of-+))
(begin (register-function-arity (quote shen.type-signature-of-/) 3) (define (kl:shen.type-signature-of-/ V4498 V4499 V4500) (begin (kl:shen.incinfs) (kl:unify! V4498 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ())))) V4499 V4500))) (export shen.type-signature-of-/) (quote shen.type-signature-of-/))
(begin (register-function-arity (quote shen.type-signature-of--) 3) (define (kl:shen.type-signature-of-- V4508 V4509 V4510) (begin (kl:shen.incinfs) (kl:unify! V4508 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ())))) V4509 V4510))) (export shen.type-signature-of--) (quote shen.type-signature-of--))
(begin (register-function-arity (quote shen.type-signature-of-*) 3) (define (kl:shen.type-signature-of-* V4518 V4519 V4520) (begin (kl:shen.incinfs) (kl:unify! V4518 (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ())))) V4519 V4520))) (export shen.type-signature-of-*) (quote shen.type-signature-of-*))
(begin (register-function-arity (quote shen.type-signature-of-==) 3) (define (kl:shen.type-signature-of-== V4528 V4529 V4530) (let ((A (kl:shen.newpv V4529))) (let ((B (kl:shen.newpv V4529))) (begin (kl:shen.incinfs) (kl:unify! V4528 (cons A (cons (quote -->) (cons (cons B (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ())))) V4529 V4530))))) (export shen.type-signature-of-==) (quote shen.type-signature-of-==))
