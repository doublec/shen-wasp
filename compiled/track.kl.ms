(module "compiled/track.kl")
"Copyright (c) 2010-2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
(begin (register-function-arity (quote shen.f_error) 1) (define (kl:shen.f_error V3077) (begin (kl:shen.prhush (string-append "partial function " (kl:shen.app V3077 ";\n" (quote shen.a))) (kl:stoutput)) (begin (if (and (kl:not (kl:shen.tracked? V3077)) (assert-boolean (kl:y-or-n? (string-append "track " (kl:shen.app V3077 "? " (quote shen.a)))))) (kl:shen.track-function (kl:ps V3077)) (quote shen.ok)) (simple-error "aborted")))) (export shen.f_error) (quote shen.f_error))
(begin (register-function-arity (quote shen.tracked?) 1) (define (kl:shen.tracked? V3079) (kl:element? V3079 (kl:value (quote shen.*tracking*)))) (export shen.tracked?) (quote shen.tracked?))
(begin (register-function-arity (quote track) 1) (define (kl:track V3081) (let ((Source (kl:ps V3081))) (kl:shen.track-function Source))) (export track) (quote track))
(begin (register-function-arity (quote shen.track-function) 1) (define (kl:shen.track-function V3083) (cond ((and (pair? V3083) (and (eq? (quote defun) (car V3083)) (and (pair? (cdr V3083)) (and (pair? (cdr (cdr V3083))) (and (pair? (cdr (cdr (cdr V3083)))) (null? (cdr (cdr (cdr (cdr V3083)))))))))) (let ((KL (cons (quote defun) (cons (car (cdr V3083)) (cons (car (cdr (cdr V3083))) (cons (kl:shen.insert-tracking-code (car (cdr V3083)) (car (cdr (cdr V3083))) (car (cdr (cdr (cdr V3083))))) (quote ()))))))) (let ((Ob (kl:eval-kl KL))) (let ((Tr (kl:set (quote shen.*tracking*) (cons Ob (kl:value (quote shen.*tracking*)))))) Ob)))) (#t (kl:shen.f_error (quote shen.track-function))))) (export shen.track-function) (quote shen.track-function))
(begin (register-function-arity (quote shen.insert-tracking-code) 3) (define (kl:shen.insert-tracking-code V3087 V3088 V3089) (cons (quote do) (cons (cons (quote set) (cons (quote shen.*call*) (cons (cons (quote +) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons 1 (quote ())))) (quote ())))) (cons (cons (quote do) (cons (cons (quote shen.input-track) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons V3087 (cons (kl:shen.cons_form V3088) (quote ()))))) (cons (cons (quote do) (cons (cons (quote shen.terpri-or-read-char) (quote ())) (cons (cons (quote let) (cons (quote Result) (cons V3089 (cons (cons (quote do) (cons (cons (quote shen.output-track) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons V3087 (cons (quote Result) (quote ()))))) (cons (cons (quote do) (cons (cons (quote set) (cons (quote shen.*call*) (cons (cons (quote -) (cons (cons (quote value) (cons (quote shen.*call*) (quote ()))) (cons 1 (quote ())))) (quote ())))) (cons (cons (quote do) (cons (cons (quote shen.terpri-or-read-char) (quote ())) (cons (quote Result) (quote ())))) (quote ())))) (quote ())))) (quote ()))))) (quote ())))) (quote ())))) (quote ()))))) (export shen.insert-tracking-code) (quote shen.insert-tracking-code))
(begin (register-function-arity (quote step) 1) (define (kl:step V3095) (cond ((eq? (quote +) V3095) (kl:set (quote shen.*step*) #t)) ((eq? (quote -) V3095) (kl:set (quote shen.*step*) #f)) (#t (simple-error "step expects a + or a -.\n")))) (export step) (quote step))
(begin (register-function-arity (quote spy) 1) (define (kl:spy V3101) (cond ((eq? (quote +) V3101) (kl:set (quote shen.*spy*) #t)) ((eq? (quote -) V3101) (kl:set (quote shen.*spy*) #f)) (#t (simple-error "spy expects a + or a -.\n")))) (export spy) (quote spy))
(begin (register-function-arity (quote shen.terpri-or-read-char) 0) (define (kl:shen.terpri-or-read-char) (if (assert-boolean (kl:value (quote shen.*step*))) (kl:shen.check-byte (read-u8 (kl:value (quote *stinput*)))) (kl:nl 1))) (export shen.terpri-or-read-char) (quote shen.terpri-or-read-char))
(begin (register-function-arity (quote shen.check-byte) 1) (define (kl:shen.check-byte V3107) (cond ((kl:= V3107 (kl:shen.hat)) (simple-error "aborted")) (#t #t))) (export shen.check-byte) (quote shen.check-byte))
(begin (register-function-arity (quote shen.input-track) 3) (define (kl:shen.input-track V3111 V3112 V3113) (begin (kl:shen.prhush (string-append "\n" (kl:shen.app (kl:shen.spaces V3111) (string-append "<" (kl:shen.app V3111 (string-append "> Inputs to " (kl:shen.app V3112 (string-append " \n" (kl:shen.app (kl:shen.spaces V3111) "" (quote shen.a))) (quote shen.a))) (quote shen.a))) (quote shen.a))) (kl:stoutput)) (kl:shen.recursively-print V3113))) (export shen.input-track) (quote shen.input-track))
(begin (register-function-arity (quote shen.recursively-print) 1) (define (kl:shen.recursively-print V3115) (cond ((null? V3115) (kl:shen.prhush " ==>" (kl:stoutput))) ((pair? V3115) (begin (kl:print (car V3115)) (begin (kl:shen.prhush ", " (kl:stoutput)) (kl:shen.recursively-print (cdr V3115))))) (#t (kl:shen.f_error (quote shen.recursively-print))))) (export shen.recursively-print) (quote shen.recursively-print))
(begin (register-function-arity (quote shen.spaces) 1) (define (kl:shen.spaces V3117) (cond ((kl:= 0 V3117) "") (#t (string-append " " (kl:shen.spaces (- V3117 1)))))) (export shen.spaces) (quote shen.spaces))
(begin (register-function-arity (quote shen.output-track) 3) (define (kl:shen.output-track V3121 V3122 V3123) (kl:shen.prhush (string-append "\n" (kl:shen.app (kl:shen.spaces V3121) (string-append "<" (kl:shen.app V3121 (string-append "> Output from " (kl:shen.app V3122 (string-append " \n" (kl:shen.app (kl:shen.spaces V3121) (string-append "==> " (kl:shen.app V3123 "" (quote shen.s))) (quote shen.a))) (quote shen.a))) (quote shen.a))) (quote shen.a))) (kl:stoutput))) (export shen.output-track) (quote shen.output-track))
(begin (register-function-arity (quote untrack) 1) (define (kl:untrack V3125) (let ((Tracking (kl:value (quote shen.*tracking*)))) (let ((Tracking (kl:set (quote shen.*tracking*) (kl:remove V3125 Tracking)))) (kl:eval (kl:ps V3125))))) (export untrack) (quote untrack))
(begin (register-function-arity (quote profile) 1) (define (kl:profile V3127) (kl:shen.profile-help (kl:ps V3127))) (export profile) (quote profile))
(begin (register-function-arity (quote shen.profile-help) 1) (define (kl:shen.profile-help V3133) (cond ((and (pair? V3133) (and (eq? (quote defun) (car V3133)) (and (pair? (cdr V3133)) (and (pair? (cdr (cdr V3133))) (and (pair? (cdr (cdr (cdr V3133)))) (null? (cdr (cdr (cdr (cdr V3133)))))))))) (let ((G (kl:gensym (quote shen.f)))) (let ((Profile (cons (quote defun) (cons (car (cdr V3133)) (cons (car (cdr (cdr V3133))) (cons (kl:shen.profile-func (car (cdr V3133)) (car (cdr (cdr V3133))) (cons G (car (cdr (cdr V3133))))) (quote ()))))))) (let ((Def (cons (quote defun) (cons G (cons (car (cdr (cdr V3133))) (cons (kl:subst G (car (cdr V3133)) (car (cdr (cdr (cdr V3133))))) (quote ()))))))) (let ((CompileProfile (kl:shen.eval-without-macros Profile))) (let ((CompileG (kl:shen.eval-without-macros Def))) (car (cdr V3133)))))))) (#t (simple-error "Cannot profile.\n")))) (export shen.profile-help) (quote shen.profile-help))
(begin (register-function-arity (quote unprofile) 1) (define (kl:unprofile V3135) (kl:untrack V3135)) (export unprofile) (quote unprofile))
(begin (register-function-arity (quote shen.profile-func) 3) (define (kl:shen.profile-func V3139 V3140 V3141) (cons (quote let) (cons (quote Start) (cons (cons (quote get-time) (cons (quote run) (quote ()))) (cons (cons (quote let) (cons (quote Result) (cons V3141 (cons (cons (quote let) (cons (quote Finish) (cons (cons (quote -) (cons (cons (quote get-time) (cons (quote run) (quote ()))) (cons (quote Start) (quote ())))) (cons (cons (quote let) (cons (quote Record) (cons (cons (quote shen.put-profile) (cons V3139 (cons (cons (quote +) (cons (cons (quote shen.get-profile) (cons V3139 (quote ()))) (cons (quote Finish) (quote ())))) (quote ())))) (cons (quote Result) (quote ()))))) (quote ()))))) (quote ()))))) (quote ())))))) (export shen.profile-func) (quote shen.profile-func))
(begin (register-function-arity (quote profile-results) 1) (define (kl:profile-results V3143) (let ((Results (kl:shen.get-profile V3143))) (let ((Initialise (kl:shen.put-profile V3143 0))) (kl:_waspvm_at_p V3143 Results)))) (export profile-results) (quote profile-results))
(begin (register-function-arity (quote shen.get-profile) 1) (define (kl:shen.get-profile V3145) (guard (lambda (E) 0) (kl:get V3145 (quote profile) (kl:value (quote *property-vector*))))) (export shen.get-profile) (quote shen.get-profile))
(begin (register-function-arity (quote shen.put-profile) 2) (define (kl:shen.put-profile V3148 V3149) (kl:put V3148 (quote profile) V3149 (kl:value (quote *property-vector*)))) (export shen.put-profile) (quote shen.put-profile))
