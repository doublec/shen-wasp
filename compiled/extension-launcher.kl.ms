(module "compiled/extension-launcher.kl")
"Copyright (c) 2019 Bruno Deferrari.\nBSD 3-Clause License: http://opensource.org/licenses/BSD-3-Clause"
(begin (register-function-arity (quote shen.x.launcher.quiet-load) 1) (define (kl:shen.x.launcher.quiet-load V4833) (let ((Contents (kl:read-file V4833))) (kl:map (lambda (X) (kl:shen.eval-without-macros X)) Contents))) (export shen.x.launcher.quiet-load) (quote shen.x.launcher.quiet-load))
(begin (register-function-arity (quote shen.x.launcher.version-string) 0) (define (kl:shen.x.launcher.version-string) (kl:shen.app (kl:version) (string-append " " (kl:shen.app (cons (quote port) (cons (cons (kl:language) (cons (kl:port) (quote ()))) (cons (quote implementation) (cons (cons (kl:implementation) (cons (kl:release) (quote ()))) (quote ()))))) "\n" (quote shen.r))) (quote shen.a))) (export shen.x.launcher.version-string) (quote shen.x.launcher.version-string))
(begin (register-function-arity (quote shen.x.launcher.help-text) 1) (define (kl:shen.x.launcher.help-text V4835) (string-append "Usage: " (kl:shen.app V4835 " [--version] [--help] <COMMAND> [<ARGS>]\n\ncommands:\n    repl\n        Launches the interactive REPL.\n        Default action if no command is supplied.\n\n    script <FILE> [<ARGS>]\n        Runs the script in FILE. *argv* is set to [FILE | ARGS].\n\n    eval <ARGS>\n        Evaluates expressions and files. ARGS are evaluated from\n        left to right and can be a combination of:\n            -e, --eval <EXPR>\n                Evaluates EXPR and prints result.\n            -l, --load <FILE>\n                Reads and evaluates FILE.\n            -q, --quiet\n                Silences interactive output.\n            -s, --set <KEY> <VALUE>\n                Evaluates KEY, VALUE and sets as global.\n            -r, --repl\n                Launches the interactive REPL after evaluating\n                all the previous expresions." (quote shen.a)))) (export shen.x.launcher.help-text) (quote shen.x.launcher.help-text))
(begin (register-function-arity (quote shen.x.launcher.execute-all) 1) (define (kl:shen.x.launcher.execute-all V4837) (cond ((null? V4837) (cons (quote success) (quote ()))) ((pair? V4837) (begin (kl:thaw (car V4837)) (kl:shen.x.launcher.execute-all (cdr V4837)))) (#t (kl:shen.f_error (quote shen.x.launcher.execute-all))))) (export shen.x.launcher.execute-all) (quote shen.x.launcher.execute-all))
(begin (register-function-arity (quote shen.x.launcher.eval-string) 1) (define (kl:shen.x.launcher.eval-string V4839) (kl:eval (kl:head (kl:read-from-string V4839)))) (export shen.x.launcher.eval-string) (quote shen.x.launcher.eval-string))
(begin (register-function-arity (quote shen.x.launcher.eval-flag-map) 1) (define (kl:shen.x.launcher.eval-flag-map V4845) (cond ((equal? "-e" V4845) "--eval") ((equal? "-l" V4845) "--load") ((equal? "-q" V4845) "--quiet") ((equal? "-s" V4845) "--set") ((equal? "-r" V4845) "--repl") (#t #f))) (export shen.x.launcher.eval-flag-map) (quote shen.x.launcher.eval-flag-map))
(begin (register-function-arity (quote shen.x.launcher.eval-command-h) 2) (define (kl:shen.x.launcher.eval-command-h V4856 V4857) (cond ((null? V4856) (kl:shen.x.launcher.execute-all (kl:reverse V4857))) ((and (pair? V4856) (and (equal? "--eval" (car V4856)) (pair? (cdr V4856)))) (kl:shen.x.launcher.eval-command-h (cdr (cdr V4856)) (cons (lambda () (kl:shen.prhush (kl:shen.app (kl:shen.x.launcher.eval-string (car (cdr V4856))) "\n" (quote shen.a)) (kl:stoutput))) V4857))) ((and (pair? V4856) (and (equal? "--load" (car V4856)) (pair? (cdr V4856)))) (kl:shen.x.launcher.eval-command-h (cdr (cdr V4856)) (cons (lambda () (kl:load (car (cdr V4856)))) V4857))) ((and (pair? V4856) (equal? "--quiet" (car V4856))) (kl:shen.x.launcher.eval-command-h (cdr V4856) (cons (lambda () (kl:set (quote *hush*) #t)) V4857))) ((and (pair? V4856) (and (equal? "--set" (car V4856)) (and (pair? (cdr V4856)) (pair? (cdr (cdr V4856)))))) (kl:shen.x.launcher.eval-command-h (cdr (cdr (cdr V4856))) (cons (lambda () (kl:set (kl:shen.x.launcher.eval-string (car (cdr V4856))) (kl:shen.x.launcher.eval-string (car (cdr (cdr V4856)))))) V4857))) ((and (pair? V4856) (equal? "--repl" (car V4856))) (begin (kl:shen.x.launcher.eval-command-h (quote ()) V4857) (cons (quote launch-repl) (cdr V4856)))) (#t (let ((Freeze (lambda () (cond ((pair? V4856) (cons (quote error) (cons (string-append "Invalid eval argument: " (kl:shen.app (car V4856) "" (quote shen.a))) (quote ())))) (#t (kl:shen.f_error (quote shen.x.launcher.eval-command-h))))))) (if (pair? V4856) (let ((Result (let ((Long (kl:shen.x.launcher.eval-flag-map (car V4856)))) (if (kl:= #f Long) (kl:fail) (kl:shen.x.launcher.eval-command-h (cons Long (cdr V4856)) V4857))))) (if (kl:= Result (kl:fail)) (kl:thaw Freeze) Result)) (kl:thaw Freeze)))))) (export shen.x.launcher.eval-command-h) (quote shen.x.launcher.eval-command-h))
(begin (register-function-arity (quote shen.x.launcher.eval-command) 1) (define (kl:shen.x.launcher.eval-command V4859) (kl:shen.x.launcher.eval-command-h V4859 (quote ()))) (export shen.x.launcher.eval-command) (quote shen.x.launcher.eval-command))
(begin (register-function-arity (quote shen.x.launcher.script-command) 2) (define (kl:shen.x.launcher.script-command V4862 V4863) (begin (kl:set (quote *argv*) (cons V4862 V4863)) (begin (kl:shen.x.launcher.quiet-load V4862) (cons (quote success) (quote ()))))) (export shen.x.launcher.script-command) (quote shen.x.launcher.script-command))
(begin (register-function-arity (quote shen.x.launcher.launch-shen) 1) (define (kl:shen.x.launcher.launch-shen V4865) (cond ((and (pair? V4865) (null? (cdr V4865))) (cons (quote launch-repl) (quote ()))) ((and (pair? V4865) (and (pair? (cdr V4865)) (equal? "--help" (car (cdr V4865))))) (cons (quote show-help) (cons (kl:shen.x.launcher.help-text (car V4865)) (quote ())))) ((and (pair? V4865) (and (pair? (cdr V4865)) (equal? "--version" (car (cdr V4865))))) (cons (quote success) (cons (kl:shen.x.launcher.version-string) (quote ())))) ((and (pair? V4865) (and (pair? (cdr V4865)) (equal? "repl" (car (cdr V4865))))) (cons (quote launch-repl) (cdr (cdr V4865)))) ((and (pair? V4865) (and (pair? (cdr V4865)) (and (equal? "script" (car (cdr V4865))) (pair? (cdr (cdr V4865)))))) (kl:shen.x.launcher.script-command (car (cdr (cdr V4865))) (cdr (cdr (cdr V4865))))) ((and (pair? V4865) (and (pair? (cdr V4865)) (equal? "eval" (car (cdr V4865))))) (kl:shen.x.launcher.eval-command (cdr (cdr V4865)))) ((and (pair? V4865) (pair? (cdr V4865))) (cons (quote unknown-arguments) V4865)) (#t (kl:shen.f_error (quote shen.x.launcher.launch-shen))))) (export shen.x.launcher.launch-shen) (quote shen.x.launcher.launch-shen))
(begin (register-function-arity (quote shen.x.launcher.default-handle-result) 1) (define (kl:shen.x.launcher.default-handle-result V4869) (cond ((and (pair? V4869) (and (eq? (quote success) (car V4869)) (null? (cdr V4869)))) (quote shen.x.launcher.done)) ((and (pair? V4869) (and (eq? (quote success) (car V4869)) (and (pair? (cdr V4869)) (null? (cdr (cdr V4869)))))) (kl:shen.prhush (kl:shen.app (car (cdr V4869)) "\n" (quote shen.a)) (kl:stoutput))) ((and (pair? V4869) (and (eq? (quote error) (car V4869)) (and (pair? (cdr V4869)) (null? (cdr (cdr V4869)))))) (kl:shen.prhush (string-append "ERROR: " (kl:shen.app (car (cdr V4869)) "\n" (quote shen.a))) (kl:stoutput))) ((and (pair? V4869) (eq? (quote launch-repl) (car V4869))) (kl:shen.repl)) ((and (pair? V4869) (and (eq? (quote show-help) (car V4869)) (and (pair? (cdr V4869)) (null? (cdr (cdr V4869)))))) (kl:shen.prhush (kl:shen.app (car (cdr V4869)) "\n" (quote shen.a)) (kl:stoutput))) ((and (pair? V4869) (and (eq? (quote unknown-arguments) (car V4869)) (and (pair? (cdr V4869)) (pair? (cdr (cdr V4869)))))) (kl:shen.prhush (string-append "ERROR: Invalid argument: " (kl:shen.app (car (cdr (cdr V4869))) (string-append "\nTry `" (kl:shen.app (car (cdr V4869)) " --help' for more information.\n" (quote shen.a))) (quote shen.a))) (kl:stoutput))) (#t (kl:shen.f_error (quote shen.x.launcher.default-handle-result))))) (export shen.x.launcher.default-handle-result) (quote shen.x.launcher.default-handle-result))
(begin (register-function-arity (quote shen.x.launcher.main) 1) (define (kl:shen.x.launcher.main V4871) (kl:shen.x.launcher.default-handle-result (kl:shen.x.launcher.launch-shen V4871))) (export shen.x.launcher.main) (quote shen.x.launcher.main))
