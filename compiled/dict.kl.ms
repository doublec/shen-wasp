(module "compiled/dict.kl")
"Copyright (c) 2010-2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
(begin (register-function-arity (quote shen.dict) 1) (define (kl:shen.dict V2284) (cond ((< V2284 1) (simple-error (string-append "invalid initial dict size: " (kl:shen.app V2284 "" (quote shen.s))))) (#t (let ((D (make-vector (+ 3 V2284) (quote (quote shen.fail!))))) (let ((Tag (let ((_tmp D)) (vector-set! _tmp 0 (quote shen.dictionary)) _tmp))) (let ((Capacity (let ((_tmp D)) (vector-set! _tmp 1 V2284) _tmp))) (let ((Count (let ((_tmp D)) (vector-set! _tmp 2 0) _tmp))) (let ((Fill (kl:shen.fillvector D 3 (+ 2 V2284) (quote ())))) D)))))))) (export shen.dict) (quote shen.dict))
(begin (register-function-arity (quote shen.dict?) 1) (define (kl:shen.dict? V2286) (and (vector? V2286) (eq? (guard (lambda (E) (quote shen.not-dictionary)) (vector-ref V2286 0)) (quote shen.dictionary)))) (export shen.dict?) (quote shen.dict?))
(begin (register-function-arity (quote shen.dict-capacity) 1) (define (kl:shen.dict-capacity V2288) (vector-ref V2288 1)) (export shen.dict-capacity) (quote shen.dict-capacity))
(begin (register-function-arity (quote shen.dict-count) 1) (define (kl:shen.dict-count V2290) (vector-ref V2290 2)) (export shen.dict-count) (quote shen.dict-count))
(begin (register-function-arity (quote shen.dict-count->) 2) (define (kl:shen.dict-count-> V2293 V2294) (let ((_tmp V2293)) (vector-set! _tmp 2 V2294) _tmp)) (export shen.dict-count->) (quote shen.dict-count->))
(begin (register-function-arity (quote shen.<-dict-bucket) 2) (define (kl:shen.<-dict-bucket V2297 V2298) (vector-ref V2297 (+ 3 V2298))) (export shen.<-dict-bucket) (quote shen.<-dict-bucket))
(begin (register-function-arity (quote shen.dict-bucket->) 3) (define (kl:shen.dict-bucket-> V2302 V2303 V2304) (let ((_tmp V2302)) (vector-set! _tmp (+ 3 V2303) V2304) _tmp)) (export shen.dict-bucket->) (quote shen.dict-bucket->))
(begin (register-function-arity (quote shen.dict-update-count) 3) (define (kl:shen.dict-update-count V2308 V2309 V2310) (let ((Diff (- (kl:length V2310) (kl:length V2309)))) (kl:shen.dict-count-> V2308 (+ Diff (kl:shen.dict-count V2308))))) (export shen.dict-update-count) (quote shen.dict-update-count))
(begin (register-function-arity (quote shen.dict->) 3) (define (kl:shen.dict-> V2314 V2315 V2316) (let ((N (kl:hash V2315 (kl:shen.dict-capacity V2314)))) (let ((Bucket (kl:shen.<-dict-bucket V2314 N))) (let ((NewBucket (kl:shen.assoc-set V2315 V2316 Bucket))) (let ((Change (kl:shen.dict-bucket-> V2314 N NewBucket))) (let ((Count (kl:shen.dict-update-count V2314 Bucket NewBucket))) V2316)))))) (export shen.dict->) (quote shen.dict->))
(begin (register-function-arity (quote shen.<-dict) 2) (define (kl:shen.<-dict V2319 V2320) (let ((N (kl:hash V2320 (kl:shen.dict-capacity V2319)))) (let ((Bucket (kl:shen.<-dict-bucket V2319 N))) (let ((Result (kl:assoc V2320 Bucket))) (if (kl:empty? Result) (simple-error (string-append "value " (kl:shen.app V2320 " not found in dict\n" (quote shen.a)))) (cdr Result)))))) (export shen.<-dict) (quote shen.<-dict))
(begin (register-function-arity (quote shen.dict-rm) 2) (define (kl:shen.dict-rm V2323 V2324) (let ((N (kl:hash V2324 (kl:shen.dict-capacity V2323)))) (let ((Bucket (kl:shen.<-dict-bucket V2323 N))) (let ((NewBucket (kl:shen.assoc-rm V2324 Bucket))) (let ((Change (kl:shen.dict-bucket-> V2323 N NewBucket))) (let ((Count (kl:shen.dict-update-count V2323 Bucket NewBucket))) V2324)))))) (export shen.dict-rm) (quote shen.dict-rm))
(begin (register-function-arity (quote shen.dict-fold) 3) (define (kl:shen.dict-fold V2328 V2329 V2330) (let ((Limit (kl:shen.dict-capacity V2329))) (kl:shen.dict-fold-h V2328 V2329 V2330 0 Limit))) (export shen.dict-fold) (quote shen.dict-fold))
(begin (register-function-arity (quote shen.dict-fold-h) 5) (define (kl:shen.dict-fold-h V2337 V2338 V2339 V2340 V2341) (cond ((kl:= V2341 V2340) V2339) (#t (let ((B (kl:shen.<-dict-bucket V2338 V2340))) (let ((Acc (kl:shen.bucket-fold V2337 B V2339))) (kl:shen.dict-fold-h V2337 V2338 Acc (+ 1 V2340) V2341)))))) (export shen.dict-fold-h) (quote shen.dict-fold-h))
(begin (register-function-arity (quote shen.bucket-fold) 3) (define (kl:shen.bucket-fold V2345 V2346 V2347) (cond ((null? V2346) V2347) ((and (pair? V2346) (pair? (car V2346))) (((V2345 (car (car V2346))) (cdr (car V2346))) (kl:shen.bucket-fold V2345 (cdr V2346) V2347))) (#t (kl:shen.f_error (quote shen.bucket-fold))))) (export shen.bucket-fold) (quote shen.bucket-fold))
(begin (register-function-arity (quote shen.dict-keys) 1) (define (kl:shen.dict-keys V2349) (kl:shen.dict-fold (lambda (K) (lambda (_) (lambda (Acc) (cons K Acc)))) V2349 (quote ()))) (export shen.dict-keys) (quote shen.dict-keys))
(begin (register-function-arity (quote shen.dict-values) 1) (define (kl:shen.dict-values V2351) (kl:shen.dict-fold (lambda (_) (lambda (V) (lambda (Acc) (cons V Acc)))) V2351 (quote ()))) (export shen.dict-values) (quote shen.dict-values))
