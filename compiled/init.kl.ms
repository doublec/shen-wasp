(module "compiled/init.kl")
"Copyright (c) 2010-2015, Mark Tarver\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
(begin (register-function-arity (quote shen.initialise-environment) 0) (define (kl:shen.initialise-environment) (begin (kl:set (quote shen.*installing-kl*) #f) (begin (kl:set (quote shen.*history*) (quote ())) (begin (kl:set (quote shen.*tc*) #f) (begin (kl:set (quote *property-vector*) (kl:shen.dict 20000)) (begin (kl:set (quote shen.*process-counter*) 0) (begin (kl:set (quote shen.*varcounter*) (kl:vector 10000)) (begin (kl:set (quote shen.*prologvectors*) (kl:vector 10000)) (begin (kl:set (quote shen.*demodulation-function*) (lambda (X) X)) (begin (kl:set (quote shen.*custom-pattern-compiler*) (lambda (Arg) (lambda (OnFail) (kl:thaw OnFail)))) (begin (kl:set (quote shen.*custom-pattern-reducer*) (lambda (Arg) Arg)) (begin (kl:set (quote shen.*macroreg*) (cons (quote shen.timer-macro) (cons (quote shen.cases-macro) (cons (quote shen.abs-macro) (cons (quote shen.put/get-macro) (cons (quote shen.compile-macro) (cons (quote shen.datatype-macro) (cons (quote shen.let-macro) (cons (quote shen.assoc-macro) (cons (quote shen.make-string-macro) (cons (quote shen.output-macro) (cons (quote shen.input-macro) (cons (quote shen.error-macro) (cons (quote shen.prolog-macro) (cons (quote shen.synonyms-macro) (cons (quote shen.nl-macro) (cons (quote shen._waspvm_at_s-macro) (cons (quote shen.defprolog-macro) (cons (quote shen.function-macro) (quote ())))))))))))))))))))) (begin (kl:set (quote *macros*) (cons (lambda (X) (kl:shen.timer-macro X)) (cons (lambda (X) (kl:shen.cases-macro X)) (cons (lambda (X) (kl:shen.abs-macro X)) (cons (lambda (X) (kl:shen.put/get-macro X)) (cons (lambda (X) (kl:shen.compile-macro X)) (cons (lambda (X) (kl:shen.datatype-macro X)) (cons (lambda (X) (kl:shen.let-macro X)) (cons (lambda (X) (kl:shen.assoc-macro X)) (cons (lambda (X) (kl:shen.make-string-macro X)) (cons (lambda (X) (kl:shen.output-macro X)) (cons (lambda (X) (kl:shen.input-macro X)) (cons (lambda (X) (kl:shen.error-macro X)) (cons (lambda (X) (kl:shen.prolog-macro X)) (cons (lambda (X) (kl:shen.synonyms-macro X)) (cons (lambda (X) (kl:shen.nl-macro X)) (cons (lambda (X) (kl:shen._waspvm_at_s-macro X)) (cons (lambda (X) (kl:shen.defprolog-macro X)) (cons (lambda (X) (kl:shen.function-macro X)) (quote ())))))))))))))))))))) (begin (kl:set (quote shen.*gensym*) 0) (begin (kl:set (quote shen.*tracking*) (quote ())) (begin (kl:set (quote shen.*alphabet*) (cons (quote A) (cons (quote B) (cons (quote C) (cons (quote D) (cons (quote E) (cons (quote F) (cons (quote G) (cons (quote H) (cons (quote I) (cons (quote J) (cons (quote K) (cons (quote L) (cons (quote M) (cons (quote N) (cons (quote O) (cons (quote P) (cons (quote Q) (cons (quote R) (cons (quote S) (cons (quote T) (cons (quote U) (cons (quote V) (cons (quote W) (cons (quote X) (cons (quote Y) (cons (quote Z) (quote ())))))))))))))))))))))))))))) (begin (kl:set (quote shen.*special*) (cons (quote _waspvm_at_p) (cons (quote _waspvm_at_s) (cons (quote _waspvm_at_v) (cons (quote cons) (cons (quote lambda) (cons (quote let) (cons (quote where) (cons (quote set) (cons (quote open) (quote ()))))))))))) (begin (kl:set (quote shen.*extraspecial*) (cons (quote define) (cons (quote shen.process-datatype) (cons (quote input+) (cons (quote defcc) (cons (quote shen.read+) (cons (quote defmacro) (quote ())))))))) (begin (kl:set (quote shen.*spy*) #f) (begin (kl:set (quote shen.*datatypes*) (quote ())) (begin (kl:set (quote shen.*alldatatypes*) (quote ())) (begin (kl:set (quote shen.*shen-type-theory-enabled?*) #t) (begin (kl:set (quote shen.*synonyms*) (quote ())) (begin (kl:set (quote shen.*system*) (quote ())) (begin (kl:set (quote shen.*maxcomplexity*) 128) (begin (kl:set (quote shen.*occurs*) #t) (begin (kl:set (quote shen.*maxinferences*) 1000000) (begin (kl:set (quote *maximum-print-sequence-size*) 20) (begin (kl:set (quote shen.*catch*) 0) (begin (kl:set (quote shen.*call*) 0) (begin (kl:set (quote shen.*infs*) 0) (begin (kl:set (quote *hush*) #f) (begin (kl:set (quote shen.*optimise*) #f) (begin (kl:set (quote *version*) "Shen 22.4") (begin (if (kl:not (kl:bound? (quote *home-directory*))) (kl:set (quote *home-directory*) "") (quote shen.skip)) (begin (if (kl:not (kl:bound? (quote *sterror*))) (kl:set (quote *sterror*) (kl:value (quote *stoutput*))) (quote shen.skip)) (begin (kl:shen.initialise_arity_table (cons (quote abort) (cons 0 (cons (quote absvector?) (cons 1 (cons (quote absvector) (cons 1 (cons (quote adjoin) (cons 2 (cons (quote and) (cons 2 (cons (quote append) (cons 2 (cons (quote arity) (cons 1 (cons (quote assoc) (cons 2 (cons (quote boolean?) (cons 1 (cons (quote bound?) (cons 1 (cons (quote cd) (cons 1 (cons (quote close) (cons 1 (cons (quote compile) (cons 3 (cons (quote concat) (cons 2 (cons (quote cons) (cons 2 (cons (quote cons?) (cons 1 (cons (quote cn) (cons 2 (cons (quote declare) (cons 2 (cons (quote destroy) (cons 1 (cons (quote difference) (cons 2 (cons (quote do) (cons 2 (cons (quote element?) (cons 2 (cons (quote empty?) (cons 1 (cons (quote enable-type-theory) (cons 1 (cons (quote error-to-string) (cons 1 (cons (quote shen.interror) (cons 2 (cons (quote eval) (cons 1 (cons (quote eval-kl) (cons 1 (cons (quote explode) (cons 1 (cons (quote external) (cons 1 (cons (quote fail-if) (cons 2 (cons (quote fail) (cons 0 (cons (quote fix) (cons 2 (cons (quote findall) (cons 5 (cons (quote freeze) (cons 1 (cons (quote fst) (cons 1 (cons (quote gensym) (cons 1 (cons (quote get) (cons 3 (cons (quote get-time) (cons 1 (cons (quote address->) (cons 3 (cons (quote <-address) (cons 2 (cons (quote <-vector) (cons 2 (cons (quote >) (cons 2 (cons (quote >=) (cons 2 (cons (quote =) (cons 2 (cons (quote hash) (cons 2 (cons (quote hd) (cons 1 (cons (quote hdv) (cons 1 (cons (quote hdstr) (cons 1 (cons (quote head) (cons 1 (cons (quote if) (cons 3 (cons (quote integer?) (cons 1 (cons (quote intern) (cons 1 (cons (quote identical) (cons 4 (cons (quote inferences) (cons 0 (cons (quote input) (cons 1 (cons (quote input+) (cons 2 (cons (quote implementation) (cons 0 (cons (quote intersection) (cons 2 (cons (quote internal) (cons 1 (cons (quote it) (cons 0 (cons (quote kill) (cons 0 (cons (quote language) (cons 0 (cons (quote length) (cons 1 (cons (quote limit) (cons 1 (cons (quote lineread) (cons 1 (cons (quote load) (cons 1 (cons (quote <) (cons 2 (cons (quote <=) (cons 2 (cons (quote vector) (cons 1 (cons (quote macroexpand) (cons 1 (cons (quote map) (cons 2 (cons (quote mapcan) (cons 2 (cons (quote maxinferences) (cons 1 (cons (quote nl) (cons 1 (cons (quote not) (cons 1 (cons (quote nth) (cons 2 (cons (quote n->string) (cons 1 (cons (quote number?) (cons 1 (cons (quote occurs-check) (cons 1 (cons (quote occurrences) (cons 2 (cons (quote occurs-check) (cons 1 (cons (quote open) (cons 2 (cons (quote optimise) (cons 1 (cons (quote or) (cons 2 (cons (quote os) (cons 0 (cons (quote package) (cons 3 (cons (quote package?) (cons 1 (cons (quote port) (cons 0 (cons (quote porters) (cons 0 (cons (quote pos) (cons 2 (cons (quote print) (cons 1 (cons (quote profile) (cons 1 (cons (quote profile-results) (cons 1 (cons (quote pr) (cons 2 (cons (quote ps) (cons 1 (cons (quote preclude) (cons 1 (cons (quote preclude-all-but) (cons 1 (cons (quote protect) (cons 1 (cons (quote address->) (cons 3 (cons (quote put) (cons 4 (cons (quote shen.reassemble) (cons 2 (cons (quote read-file-as-string) (cons 1 (cons (quote read-file) (cons 1 (cons (quote read-file-as-bytelist) (cons 1 (cons (quote read) (cons 1 (cons (quote read-byte) (cons 1 (cons (quote read-from-string) (cons 1 (cons (quote receive) (cons 1 (cons (quote release) (cons 0 (cons (quote remove) (cons 2 (cons (quote shen.require) (cons 3 (cons (quote reverse) (cons 1 (cons (quote set) (cons 2 (cons (quote simple-error) (cons 1 (cons (quote snd) (cons 1 (cons (quote specialise) (cons 1 (cons (quote spy) (cons 1 (cons (quote step) (cons 1 (cons (quote stinput) (cons 0 (cons (quote stoutput) (cons 0 (cons (quote sterror) (cons 0 (cons (quote string->n) (cons 1 (cons (quote string->symbol) (cons 1 (cons (quote string?) (cons 1 (cons (quote str) (cons 1 (cons (quote subst) (cons 3 (cons (quote sum) (cons 1 (cons (quote symbol?) (cons 1 (cons (quote systemf) (cons 1 (cons (quote tail) (cons 1 (cons (quote tl) (cons 1 (cons (quote tc) (cons 1 (cons (quote tc?) (cons 0 (cons (quote thaw) (cons 1 (cons (quote tlstr) (cons 1 (cons (quote track) (cons 1 (cons (quote trap-error) (cons 2 (cons (quote tuple?) (cons 1 (cons (quote type) (cons 2 (cons (quote return) (cons 3 (cons (quote undefmacro) (cons 1 (cons (quote unput) (cons 3 (cons (quote unprofile) (cons 1 (cons (quote unify) (cons 4 (cons (quote unify!) (cons 4 (cons (quote union) (cons 2 (cons (quote untrack) (cons 1 (cons (quote unspecialise) (cons 1 (cons (quote undefmacro) (cons 1 (cons (quote vector) (cons 1 (cons (quote vector?) (cons 1 (cons (quote vector->) (cons 3 (cons (quote value) (cons 1 (cons (quote variable?) (cons 1 (cons (quote version) (cons 0 (cons (quote write-byte) (cons 2 (cons (quote write-to-file) (cons 2 (cons (quote y-or-n?) (cons 1 (cons (quote +) (cons 2 (cons (quote *) (cons 2 (cons (quote /) (cons 2 (cons (quote -) (cons 2 (cons (quote ==) (cons 2 (cons (quote <e>) (cons 1 (cons (quote <!>) (cons 1 (cons (quote _waspvm_at_p) (cons 2 (cons (quote _waspvm_at_v) (cons 2 (cons (quote _waspvm_at_s) (cons 2 (cons (quote preclude) (cons 1 (cons (quote include) (cons 1 (cons (quote preclude-all-but) (cons 1 (cons (quote include-all-but) (cons 1 (quote ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (begin (kl:put (kl:intern "shen") (quote shen.external-symbols) (cons (quote !) (cons (quote }) (cons (quote {) (cons (quote -->) (cons (quote <--) (cons (quote &&) (cons (quote :) (cons (quote _waspvm_sc_) (cons (quote :-) (cons (quote :=) (cons (quote _) (cons (string->symbol ",") (cons (quote *language*) (cons (quote *implementation*) (cons (quote *stinput*) (cons (quote *stoutput*) (cons (quote *sterror*) (cons (quote *home-directory*) (cons (quote *version*) (cons (quote *maximum-print-sequence-size*) (cons (quote *macros*) (cons (quote *os*) (cons (quote *release*) (cons (quote *property-vector*) (cons (quote *port*) (cons (quote *porters*) (cons (quote *hush*) (cons (quote _waspvm_at_v) (cons (quote _waspvm_at_p) (cons (quote _waspvm_at_s) (cons (quote <-) (cons (quote ->) (cons (quote <e>) (cons (quote <!>) (cons (quote ==) (cons (quote =) (cons (quote >=) (cons (quote >) (cons (quote /.) (cons (quote =!) (cons (quote _waspvm_dl_) (cons (quote -) (cons (quote /) (cons (quote *) (cons (quote +) (cons (quote <=) (cons (quote <) (cons (quote >>) (cons (quote y-or-n?) (cons (quote write-to-file) (cons (quote write-byte) (cons (quote where) (cons (quote when) (cons (quote warn) (cons (quote version) (cons (quote verified) (cons (quote variable?) (cons (quote value) (cons (quote vector->) (cons (quote <-vector) (cons (quote vector) (cons (quote vector?) (cons (quote unspecialise) (cons (quote untrack) (cons (quote unit) (cons (quote shen.unix) (cons (quote union) (cons (quote unify) (cons (quote unify!) (cons (quote unput) (cons (quote unprofile) (cons (quote undefmacro) (cons (quote return) (cons (quote type) (cons (quote tuple?) (cons #t (cons (quote trap-error) (cons (quote track) (cons (quote time) (cons (quote thaw) (cons (quote tc?) (cons (quote tc) (cons (quote tl) (cons (quote tlstr) (cons (quote tlv) (cons (quote tail) (cons (quote systemf) (cons (quote synonyms) (cons (quote symbol) (cons (quote symbol?) (cons (quote string->symbol) (cons (quote sum) (cons (quote subst) (cons (quote string?) (cons (quote string->n) (cons (quote stream) (cons (quote string) (cons (quote stinput) (cons (quote sterror) (cons (quote stoutput) (cons (quote step) (cons (quote spy) (cons (quote specialise) (cons (quote snd) (cons (quote simple-error) (cons (quote set) (cons (quote save) (cons (quote str) (cons (quote run) (cons (quote reverse) (cons (quote remove) (cons (quote release) (cons (quote read) (cons (quote receive) (cons (quote read-file) (cons (quote read-file-as-bytelist) (cons (quote read-file-as-string) (cons (quote read-byte) (cons (quote read-from-string) (cons (quote package?) (cons (quote put) (cons (quote preclude) (cons (quote preclude-all-but) (cons (quote ps) (cons (quote prolog?) (cons (quote protect) (cons (quote profile-results) (cons (quote profile) (cons (quote print) (cons (quote pr) (cons (quote pos) (cons (quote porters) (cons (quote port) (cons (quote package) (cons (quote output) (cons (quote out) (cons (quote os) (cons (quote or) (cons (quote optimise) (cons (quote open) (cons (quote occurrences) (cons (quote occurs-check) (cons (quote n->string) (cons (quote number?) (cons (quote number) (cons (quote null) (cons (quote nth) (cons (quote not) (cons (quote nl) (cons (quote mode) (cons (quote macroexpand) (cons (quote maxinferences) (cons (quote mapcan) (cons (quote map) (cons (quote make-string) (cons (quote load) (cons (quote loaded) (cons (quote list) (cons (quote lineread) (cons (quote limit) (cons (quote length) (cons (quote let) (cons (quote lazy) (cons (quote lambda) (cons (quote language) (cons (quote kill) (cons (quote is) (cons (quote intersection) (cons (quote inferences) (cons (quote intern) (cons (quote integer?) (cons (quote input) (cons (quote input+) (cons (quote include) (cons (quote include-all-but) (cons (quote it) (cons (quote in) (cons (quote internal) (cons (quote implementation) (cons (quote if) (cons (quote identical) (cons (quote head) (cons (quote hd) (cons (quote hdv) (cons (quote hdstr) (cons (quote hash) (cons (quote get) (cons (quote get-time) (cons (quote gensym) (cons (quote function) (cons (quote fst) (cons (quote freeze) (cons (quote fix) (cons (quote file) (cons (quote fail) (cons (quote fail-if) (cons (quote fwhen) (cons (quote findall) (cons #f (cons (quote enable-type-theory) (cons (quote explode) (cons (quote external) (cons (quote exception) (cons (quote eval-kl) (cons (quote eval) (cons (quote error-to-string) (cons (quote error) (cons (quote empty?) (cons (quote element?) (cons (quote do) (cons (quote difference) (cons (quote destroy) (cons (quote defun) (cons (quote define) (cons (quote defmacro) (cons (quote defcc) (cons (quote defprolog) (cons (quote declare) (cons (quote datatype) (cons (quote cut) (cons (quote cn) (cons (quote cons?) (cons (quote cons) (cons (quote cond) (cons (quote concat) (cons (quote compile) (cons (quote cd) (cons (quote cases) (cons (quote call) (cons (quote close) (cons (quote bind) (cons (quote bound?) (cons (quote boolean?) (cons (quote boolean) (cons (quote bar!) (cons (quote assoc) (cons (quote arity) (cons (quote abort) (cons (quote append) (cons (quote and) (cons (quote adjoin) (cons (quote <-address) (cons (quote address->) (cons (quote absvector?) (cons (quote absvector) (quote ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (kl:value (quote *property-vector*))) (begin (kl:set (quote shen.*history*) (quote ())) (begin (kl:set (quote shen.*step*) #f) (kl:set (quote shen.*empty-absvector*) (make-vector 0 (quote (quote shen.fail!)))))))))))))))))))))))))))))))))))))))))))) (export shen.initialise-environment) (quote shen.initialise-environment))
(begin (register-function-arity (quote shen.initialise-signedfuncs) 0) (define (kl:shen.initialise-signedfuncs) (begin (kl:set (quote shen.*signedfuncs*) (quote ())) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote absvector?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote adjoin) (cons (quote A) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote and) (cons (quote boolean) (cons (quote -->) (cons (cons (quote boolean) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote shen.app) (cons (quote A) (cons (quote -->) (cons (cons (quote string) (cons (quote -->) (cons (cons (quote symbol) (cons (quote -->) (cons (quote string) (quote ())))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote append) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote arity) (cons (quote A) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote assoc) (cons (quote A) (cons (quote -->) (cons (cons (cons (quote list) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote boolean?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote bound?) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote cd) (cons (quote string) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote close) (cons (cons (quote stream) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote B) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote cn) (cons (quote string) (cons (quote -->) (cons (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote compile) (cons (cons (quote A) (cons (quote shen.==>) (cons (quote B) (quote ())))) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote -->) (cons (quote B) (quote ())))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote cons?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote destroy) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote difference) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote do) (cons (quote A) (cons (quote -->) (cons (cons (quote B) (cons (quote -->) (cons (quote B) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote <e>) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote shen.==>) (cons (cons (quote list) (cons (quote B) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote <!>) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote shen.==>) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote element?) (cons (quote A) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote empty?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote enable-type-theory) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote external) (cons (quote symbol) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote error-to-string) (cons (quote exception) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote explode) (cons (quote A) (cons (quote -->) (cons (cons (quote list) (cons (quote string) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote fail) (cons (quote -->) (cons (quote symbol) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote fail-if) (cons (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ())))) (cons (quote -->) (cons (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote fix) (cons (cons (quote A) (cons (quote -->) (cons (quote A) (quote ())))) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (quote A) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote freeze) (cons (quote A) (cons (quote -->) (cons (cons (quote lazy) (cons (quote A) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote fst) (cons (cons (quote A) (cons (quote *) (cons (quote B) (quote ())))) (cons (quote -->) (cons (quote A) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote function) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote gensym) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote <-vector) (cons (cons (quote vector) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote A) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote vector->) (cons (cons (quote vector) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (cons (quote vector) (cons (quote A) (quote ()))) (quote ())))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote vector) (cons (quote number) (cons (quote -->) (cons (cons (quote vector) (cons (quote A) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote get-time) (cons (quote symbol) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote hash) (cons (quote A) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote head) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (quote A) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote hdv) (cons (cons (quote vector) (cons (quote A) (quote ()))) (cons (quote -->) (cons (quote A) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote hdstr) (cons (quote string) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote if) (cons (quote boolean) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (quote A) (quote ())))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote it) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote implementation) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote include) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote include-all-but) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote inferences) (cons (quote -->) (cons (quote number) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote shen.insert) (cons (quote A) (cons (quote -->) (cons (cons (quote string) (cons (quote -->) (cons (quote string) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote integer?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote internal) (cons (quote symbol) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote intersection) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote kill) (cons (quote -->) (cons (quote A) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote language) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote length) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote limit) (cons (cons (quote vector) (cons (quote A) (quote ()))) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote load) (cons (quote string) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote map) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote B) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote mapcan) (cons (cons (quote A) (cons (quote -->) (cons (cons (quote list) (cons (quote B) (quote ()))) (quote ())))) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote B) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote maxinferences) (cons (quote number) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote n->string) (cons (quote number) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote nl) (cons (quote number) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote not) (cons (quote boolean) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote nth) (cons (quote number) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (quote A) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote number?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote occurrences) (cons (quote A) (cons (quote -->) (cons (cons (quote B) (cons (quote -->) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote occurs-check) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote optimise) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote or) (cons (quote boolean) (cons (quote -->) (cons (cons (quote boolean) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote os) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote package?) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote port) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote porters) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote pos) (cons (quote string) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote string) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote pr) (cons (quote string) (cons (quote -->) (cons (cons (cons (quote stream) (cons (quote out) (quote ()))) (cons (quote -->) (cons (quote string) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote print) (cons (quote A) (cons (quote -->) (cons (quote A) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote profile) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote preclude) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote shen.proc-nl) (cons (quote string) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote profile-results) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote -->) (cons (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote *) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote protect) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote preclude-all-but) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote symbol) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote shen.prhush) (cons (quote string) (cons (quote -->) (cons (cons (cons (quote stream) (cons (quote out) (quote ()))) (cons (quote -->) (cons (quote string) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote ps) (cons (quote symbol) (cons (quote -->) (cons (cons (quote list) (cons (quote unit) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote read) (cons (cons (quote stream) (cons (quote in) (quote ()))) (cons (quote -->) (cons (quote unit) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote read-byte) (cons (cons (quote stream) (cons (quote in) (quote ()))) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote read-file-as-bytelist) (cons (quote string) (cons (quote -->) (cons (cons (quote list) (cons (quote number) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote read-file-as-string) (cons (quote string) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote read-file) (cons (quote string) (cons (quote -->) (cons (cons (quote list) (cons (quote unit) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote read-from-string) (cons (quote string) (cons (quote -->) (cons (cons (quote list) (cons (quote unit) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote release) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote remove) (cons (quote A) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote reverse) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote simple-error) (cons (quote string) (cons (quote -->) (cons (quote A) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote snd) (cons (cons (quote A) (cons (quote *) (cons (quote B) (quote ())))) (cons (quote -->) (cons (quote B) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote specialise) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote spy) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote step) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote stinput) (cons (quote -->) (cons (cons (quote stream) (cons (quote in) (quote ()))) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote sterror) (cons (quote -->) (cons (cons (quote stream) (cons (quote out) (quote ()))) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote stoutput) (cons (quote -->) (cons (cons (quote stream) (cons (quote out) (quote ()))) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote string?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote str) (cons (quote A) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote string->n) (cons (quote string) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote string->symbol) (cons (quote string) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote sum) (cons (cons (quote list) (cons (quote number) (quote ()))) (cons (quote -->) (cons (quote number) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote symbol?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote systemf) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote tail) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote tlstr) (cons (quote string) (cons (quote -->) (cons (quote string) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote tlv) (cons (cons (quote vector) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote vector) (cons (quote A) (quote ()))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote tc) (cons (quote symbol) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote tc?) (cons (quote -->) (cons (quote boolean) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote thaw) (cons (cons (quote lazy) (cons (quote A) (quote ()))) (cons (quote -->) (cons (quote A) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote track) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote trap-error) (cons (quote A) (cons (quote -->) (cons (cons (cons (quote exception) (cons (quote -->) (cons (quote A) (quote ())))) (cons (quote -->) (cons (quote A) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote tuple?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote undefmacro) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote union) (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (cons (quote list) (cons (quote A) (quote ()))) (cons (quote -->) (cons (cons (quote list) (cons (quote A) (quote ()))) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote unprofile) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (quote B) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote untrack) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote unspecialise) (cons (quote symbol) (cons (quote -->) (cons (quote symbol) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote variable?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote vector?) (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote version) (cons (quote -->) (cons (quote string) (quote ())))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote write-to-file) (cons (quote string) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (quote A) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote write-byte) (cons (quote number) (cons (quote -->) (cons (cons (cons (quote stream) (cons (quote out) (quote ()))) (cons (quote -->) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote y-or-n?) (cons (quote string) (cons (quote -->) (cons (quote boolean) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote >) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote <) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote >=) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote <=) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote =) (cons (quote A) (cons (quote -->) (cons (cons (quote A) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote +) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote /) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote -) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (begin (kl:set (quote shen.*signedfuncs*) (cons (cons (quote *) (cons (quote number) (cons (quote -->) (cons (cons (quote number) (cons (quote -->) (cons (quote number) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*)))) (kl:set (quote shen.*signedfuncs*) (cons (cons (quote ==) (cons (quote A) (cons (quote -->) (cons (cons (quote B) (cons (quote -->) (cons (quote boolean) (quote ())))) (quote ()))))) (kl:value (quote shen.*signedfuncs*))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (export shen.initialise-signedfuncs) (quote shen.initialise-signedfuncs))
(begin (register-function-arity (quote shen.initialise-signedfunc-lambda-forms) 0) (define (kl:shen.initialise-signedfunc-lambda-forms) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-absvector?) (lambda (V3181) (lambda (V3182) (lambda (V3183) (kl:shen.type-signature-of-absvector? V3181 V3182 V3183)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-adjoin) (lambda (V3191) (lambda (V3192) (lambda (V3193) (kl:shen.type-signature-of-adjoin V3191 V3192 V3193)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-and) (lambda (V3201) (lambda (V3202) (lambda (V3203) (kl:shen.type-signature-of-and V3201 V3202 V3203)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-shen.app) (lambda (V3211) (lambda (V3212) (lambda (V3213) (kl:shen.type-signature-of-shen.app V3211 V3212 V3213)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-append) (lambda (V3221) (lambda (V3222) (lambda (V3223) (kl:shen.type-signature-of-append V3221 V3222 V3223)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-arity) (lambda (V3231) (lambda (V3232) (lambda (V3233) (kl:shen.type-signature-of-arity V3231 V3232 V3233)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-assoc) (lambda (V3241) (lambda (V3242) (lambda (V3243) (kl:shen.type-signature-of-assoc V3241 V3242 V3243)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-boolean?) (lambda (V3251) (lambda (V3252) (lambda (V3253) (kl:shen.type-signature-of-boolean? V3251 V3252 V3253)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-bound?) (lambda (V3261) (lambda (V3262) (lambda (V3263) (kl:shen.type-signature-of-bound? V3261 V3262 V3263)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-cd) (lambda (V3271) (lambda (V3272) (lambda (V3273) (kl:shen.type-signature-of-cd V3271 V3272 V3273)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-close) (lambda (V3281) (lambda (V3282) (lambda (V3283) (kl:shen.type-signature-of-close V3281 V3282 V3283)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-cn) (lambda (V3291) (lambda (V3292) (lambda (V3293) (kl:shen.type-signature-of-cn V3291 V3292 V3293)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-compile) (lambda (V3301) (lambda (V3302) (lambda (V3303) (kl:shen.type-signature-of-compile V3301 V3302 V3303)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-cons?) (lambda (V3311) (lambda (V3312) (lambda (V3313) (kl:shen.type-signature-of-cons? V3311 V3312 V3313)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-destroy) (lambda (V3321) (lambda (V3322) (lambda (V3323) (kl:shen.type-signature-of-destroy V3321 V3322 V3323)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-difference) (lambda (V3331) (lambda (V3332) (lambda (V3333) (kl:shen.type-signature-of-difference V3331 V3332 V3333)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-do) (lambda (V3341) (lambda (V3342) (lambda (V3343) (kl:shen.type-signature-of-do V3341 V3342 V3343)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-<e>) (lambda (V3351) (lambda (V3352) (lambda (V3353) (kl:shen.type-signature-of-<e> V3351 V3352 V3353)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-<!>) (lambda (V3361) (lambda (V3362) (lambda (V3363) (kl:shen.type-signature-of-<!> V3361 V3362 V3363)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-element?) (lambda (V3371) (lambda (V3372) (lambda (V3373) (kl:shen.type-signature-of-element? V3371 V3372 V3373)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-empty?) (lambda (V3381) (lambda (V3382) (lambda (V3383) (kl:shen.type-signature-of-empty? V3381 V3382 V3383)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-enable-type-theory) (lambda (V3391) (lambda (V3392) (lambda (V3393) (kl:shen.type-signature-of-enable-type-theory V3391 V3392 V3393)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-external) (lambda (V3401) (lambda (V3402) (lambda (V3403) (kl:shen.type-signature-of-external V3401 V3402 V3403)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-error-to-string) (lambda (V3411) (lambda (V3412) (lambda (V3413) (kl:shen.type-signature-of-error-to-string V3411 V3412 V3413)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-explode) (lambda (V3421) (lambda (V3422) (lambda (V3423) (kl:shen.type-signature-of-explode V3421 V3422 V3423)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-fail) (lambda (V3431) (lambda (V3432) (lambda (V3433) (kl:shen.type-signature-of-fail V3431 V3432 V3433)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-fail-if) (lambda (V3441) (lambda (V3442) (lambda (V3443) (kl:shen.type-signature-of-fail-if V3441 V3442 V3443)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-fix) (lambda (V3451) (lambda (V3452) (lambda (V3453) (kl:shen.type-signature-of-fix V3451 V3452 V3453)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-freeze) (lambda (V3461) (lambda (V3462) (lambda (V3463) (kl:shen.type-signature-of-freeze V3461 V3462 V3463)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-fst) (lambda (V3471) (lambda (V3472) (lambda (V3473) (kl:shen.type-signature-of-fst V3471 V3472 V3473)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-function) (lambda (V3481) (lambda (V3482) (lambda (V3483) (kl:shen.type-signature-of-function V3481 V3482 V3483)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-gensym) (lambda (V3491) (lambda (V3492) (lambda (V3493) (kl:shen.type-signature-of-gensym V3491 V3492 V3493)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-<-vector) (lambda (V3501) (lambda (V3502) (lambda (V3503) (kl:shen.type-signature-of-<-vector V3501 V3502 V3503)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-vector->) (lambda (V3511) (lambda (V3512) (lambda (V3513) (kl:shen.type-signature-of-vector-> V3511 V3512 V3513)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-vector) (lambda (V3521) (lambda (V3522) (lambda (V3523) (kl:shen.type-signature-of-vector V3521 V3522 V3523)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-get-time) (lambda (V3531) (lambda (V3532) (lambda (V3533) (kl:shen.type-signature-of-get-time V3531 V3532 V3533)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-hash) (lambda (V3541) (lambda (V3542) (lambda (V3543) (kl:shen.type-signature-of-hash V3541 V3542 V3543)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-head) (lambda (V3551) (lambda (V3552) (lambda (V3553) (kl:shen.type-signature-of-head V3551 V3552 V3553)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-hdv) (lambda (V3561) (lambda (V3562) (lambda (V3563) (kl:shen.type-signature-of-hdv V3561 V3562 V3563)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-hdstr) (lambda (V3571) (lambda (V3572) (lambda (V3573) (kl:shen.type-signature-of-hdstr V3571 V3572 V3573)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-if) (lambda (V3581) (lambda (V3582) (lambda (V3583) (kl:shen.type-signature-of-if V3581 V3582 V3583)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-it) (lambda (V3591) (lambda (V3592) (lambda (V3593) (kl:shen.type-signature-of-it V3591 V3592 V3593)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-implementation) (lambda (V3601) (lambda (V3602) (lambda (V3603) (kl:shen.type-signature-of-implementation V3601 V3602 V3603)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-include) (lambda (V3611) (lambda (V3612) (lambda (V3613) (kl:shen.type-signature-of-include V3611 V3612 V3613)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-include-all-but) (lambda (V3621) (lambda (V3622) (lambda (V3623) (kl:shen.type-signature-of-include-all-but V3621 V3622 V3623)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-inferences) (lambda (V3631) (lambda (V3632) (lambda (V3633) (kl:shen.type-signature-of-inferences V3631 V3632 V3633)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-shen.insert) (lambda (V3641) (lambda (V3642) (lambda (V3643) (kl:shen.type-signature-of-shen.insert V3641 V3642 V3643)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-integer?) (lambda (V3651) (lambda (V3652) (lambda (V3653) (kl:shen.type-signature-of-integer? V3651 V3652 V3653)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-internal) (lambda (V3661) (lambda (V3662) (lambda (V3663) (kl:shen.type-signature-of-internal V3661 V3662 V3663)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-intersection) (lambda (V3671) (lambda (V3672) (lambda (V3673) (kl:shen.type-signature-of-intersection V3671 V3672 V3673)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-kill) (lambda (V3681) (lambda (V3682) (lambda (V3683) (kl:shen.type-signature-of-kill V3681 V3682 V3683)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-language) (lambda (V3691) (lambda (V3692) (lambda (V3693) (kl:shen.type-signature-of-language V3691 V3692 V3693)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-length) (lambda (V3701) (lambda (V3702) (lambda (V3703) (kl:shen.type-signature-of-length V3701 V3702 V3703)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-limit) (lambda (V3711) (lambda (V3712) (lambda (V3713) (kl:shen.type-signature-of-limit V3711 V3712 V3713)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-load) (lambda (V3721) (lambda (V3722) (lambda (V3723) (kl:shen.type-signature-of-load V3721 V3722 V3723)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-map) (lambda (V3731) (lambda (V3732) (lambda (V3733) (kl:shen.type-signature-of-map V3731 V3732 V3733)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-mapcan) (lambda (V3741) (lambda (V3742) (lambda (V3743) (kl:shen.type-signature-of-mapcan V3741 V3742 V3743)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-maxinferences) (lambda (V3751) (lambda (V3752) (lambda (V3753) (kl:shen.type-signature-of-maxinferences V3751 V3752 V3753)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-n->string) (lambda (V3761) (lambda (V3762) (lambda (V3763) (kl:shen.type-signature-of-n->string V3761 V3762 V3763)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-nl) (lambda (V3771) (lambda (V3772) (lambda (V3773) (kl:shen.type-signature-of-nl V3771 V3772 V3773)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-not) (lambda (V3781) (lambda (V3782) (lambda (V3783) (kl:shen.type-signature-of-not V3781 V3782 V3783)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-nth) (lambda (V3791) (lambda (V3792) (lambda (V3793) (kl:shen.type-signature-of-nth V3791 V3792 V3793)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-number?) (lambda (V3801) (lambda (V3802) (lambda (V3803) (kl:shen.type-signature-of-number? V3801 V3802 V3803)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-occurrences) (lambda (V3811) (lambda (V3812) (lambda (V3813) (kl:shen.type-signature-of-occurrences V3811 V3812 V3813)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-occurs-check) (lambda (V3821) (lambda (V3822) (lambda (V3823) (kl:shen.type-signature-of-occurs-check V3821 V3822 V3823)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-optimise) (lambda (V3831) (lambda (V3832) (lambda (V3833) (kl:shen.type-signature-of-optimise V3831 V3832 V3833)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-or) (lambda (V3841) (lambda (V3842) (lambda (V3843) (kl:shen.type-signature-of-or V3841 V3842 V3843)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-os) (lambda (V3851) (lambda (V3852) (lambda (V3853) (kl:shen.type-signature-of-os V3851 V3852 V3853)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-package?) (lambda (V3861) (lambda (V3862) (lambda (V3863) (kl:shen.type-signature-of-package? V3861 V3862 V3863)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-port) (lambda (V3871) (lambda (V3872) (lambda (V3873) (kl:shen.type-signature-of-port V3871 V3872 V3873)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-porters) (lambda (V3881) (lambda (V3882) (lambda (V3883) (kl:shen.type-signature-of-porters V3881 V3882 V3883)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-pos) (lambda (V3891) (lambda (V3892) (lambda (V3893) (kl:shen.type-signature-of-pos V3891 V3892 V3893)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-pr) (lambda (V3901) (lambda (V3902) (lambda (V3903) (kl:shen.type-signature-of-pr V3901 V3902 V3903)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-print) (lambda (V3911) (lambda (V3912) (lambda (V3913) (kl:shen.type-signature-of-print V3911 V3912 V3913)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-profile) (lambda (V3921) (lambda (V3922) (lambda (V3923) (kl:shen.type-signature-of-profile V3921 V3922 V3923)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-preclude) (lambda (V3931) (lambda (V3932) (lambda (V3933) (kl:shen.type-signature-of-preclude V3931 V3932 V3933)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-shen.proc-nl) (lambda (V3941) (lambda (V3942) (lambda (V3943) (kl:shen.type-signature-of-shen.proc-nl V3941 V3942 V3943)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-profile-results) (lambda (V3951) (lambda (V3952) (lambda (V3953) (kl:shen.type-signature-of-profile-results V3951 V3952 V3953)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-protect) (lambda (V3961) (lambda (V3962) (lambda (V3963) (kl:shen.type-signature-of-protect V3961 V3962 V3963)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-preclude-all-but) (lambda (V3971) (lambda (V3972) (lambda (V3973) (kl:shen.type-signature-of-preclude-all-but V3971 V3972 V3973)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-shen.prhush) (lambda (V3981) (lambda (V3982) (lambda (V3983) (kl:shen.type-signature-of-shen.prhush V3981 V3982 V3983)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-ps) (lambda (V3991) (lambda (V3992) (lambda (V3993) (kl:shen.type-signature-of-ps V3991 V3992 V3993)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-read) (lambda (V4001) (lambda (V4002) (lambda (V4003) (kl:shen.type-signature-of-read V4001 V4002 V4003)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-read-byte) (lambda (V4011) (lambda (V4012) (lambda (V4013) (kl:shen.type-signature-of-read-byte V4011 V4012 V4013)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-read-file-as-bytelist) (lambda (V4021) (lambda (V4022) (lambda (V4023) (kl:shen.type-signature-of-read-file-as-bytelist V4021 V4022 V4023)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-read-file-as-string) (lambda (V4031) (lambda (V4032) (lambda (V4033) (kl:shen.type-signature-of-read-file-as-string V4031 V4032 V4033)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-read-file) (lambda (V4041) (lambda (V4042) (lambda (V4043) (kl:shen.type-signature-of-read-file V4041 V4042 V4043)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-read-from-string) (lambda (V4051) (lambda (V4052) (lambda (V4053) (kl:shen.type-signature-of-read-from-string V4051 V4052 V4053)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-release) (lambda (V4061) (lambda (V4062) (lambda (V4063) (kl:shen.type-signature-of-release V4061 V4062 V4063)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-remove) (lambda (V4071) (lambda (V4072) (lambda (V4073) (kl:shen.type-signature-of-remove V4071 V4072 V4073)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-reverse) (lambda (V4081) (lambda (V4082) (lambda (V4083) (kl:shen.type-signature-of-reverse V4081 V4082 V4083)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-simple-error) (lambda (V4091) (lambda (V4092) (lambda (V4093) (kl:shen.type-signature-of-simple-error V4091 V4092 V4093)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-snd) (lambda (V4101) (lambda (V4102) (lambda (V4103) (kl:shen.type-signature-of-snd V4101 V4102 V4103)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-specialise) (lambda (V4111) (lambda (V4112) (lambda (V4113) (kl:shen.type-signature-of-specialise V4111 V4112 V4113)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-spy) (lambda (V4121) (lambda (V4122) (lambda (V4123) (kl:shen.type-signature-of-spy V4121 V4122 V4123)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-step) (lambda (V4131) (lambda (V4132) (lambda (V4133) (kl:shen.type-signature-of-step V4131 V4132 V4133)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-stinput) (lambda (V4141) (lambda (V4142) (lambda (V4143) (kl:shen.type-signature-of-stinput V4141 V4142 V4143)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-sterror) (lambda (V4151) (lambda (V4152) (lambda (V4153) (kl:shen.type-signature-of-sterror V4151 V4152 V4153)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-stoutput) (lambda (V4161) (lambda (V4162) (lambda (V4163) (kl:shen.type-signature-of-stoutput V4161 V4162 V4163)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-string?) (lambda (V4171) (lambda (V4172) (lambda (V4173) (kl:shen.type-signature-of-string? V4171 V4172 V4173)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-str) (lambda (V4181) (lambda (V4182) (lambda (V4183) (kl:shen.type-signature-of-str V4181 V4182 V4183)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-string->n) (lambda (V4191) (lambda (V4192) (lambda (V4193) (kl:shen.type-signature-of-string->n V4191 V4192 V4193)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-string->symbol) (lambda (V4201) (lambda (V4202) (lambda (V4203) (kl:shen.type-signature-of-string->symbol V4201 V4202 V4203)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-sum) (lambda (V4211) (lambda (V4212) (lambda (V4213) (kl:shen.type-signature-of-sum V4211 V4212 V4213)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-symbol?) (lambda (V4221) (lambda (V4222) (lambda (V4223) (kl:shen.type-signature-of-symbol? V4221 V4222 V4223)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-systemf) (lambda (V4231) (lambda (V4232) (lambda (V4233) (kl:shen.type-signature-of-systemf V4231 V4232 V4233)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-tail) (lambda (V4241) (lambda (V4242) (lambda (V4243) (kl:shen.type-signature-of-tail V4241 V4242 V4243)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-tlstr) (lambda (V4251) (lambda (V4252) (lambda (V4253) (kl:shen.type-signature-of-tlstr V4251 V4252 V4253)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-tlv) (lambda (V4261) (lambda (V4262) (lambda (V4263) (kl:shen.type-signature-of-tlv V4261 V4262 V4263)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-tc) (lambda (V4271) (lambda (V4272) (lambda (V4273) (kl:shen.type-signature-of-tc V4271 V4272 V4273)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-tc?) (lambda (V4281) (lambda (V4282) (lambda (V4283) (kl:shen.type-signature-of-tc? V4281 V4282 V4283)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-thaw) (lambda (V4291) (lambda (V4292) (lambda (V4293) (kl:shen.type-signature-of-thaw V4291 V4292 V4293)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-track) (lambda (V4301) (lambda (V4302) (lambda (V4303) (kl:shen.type-signature-of-track V4301 V4302 V4303)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-trap-error) (lambda (V4311) (lambda (V4312) (lambda (V4313) (kl:shen.type-signature-of-trap-error V4311 V4312 V4313)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-tuple?) (lambda (V4321) (lambda (V4322) (lambda (V4323) (kl:shen.type-signature-of-tuple? V4321 V4322 V4323)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-undefmacro) (lambda (V4331) (lambda (V4332) (lambda (V4333) (kl:shen.type-signature-of-undefmacro V4331 V4332 V4333)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-union) (lambda (V4341) (lambda (V4342) (lambda (V4343) (kl:shen.type-signature-of-union V4341 V4342 V4343)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-unprofile) (lambda (V4351) (lambda (V4352) (lambda (V4353) (kl:shen.type-signature-of-unprofile V4351 V4352 V4353)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-untrack) (lambda (V4361) (lambda (V4362) (lambda (V4363) (kl:shen.type-signature-of-untrack V4361 V4362 V4363)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-unspecialise) (lambda (V4371) (lambda (V4372) (lambda (V4373) (kl:shen.type-signature-of-unspecialise V4371 V4372 V4373)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-variable?) (lambda (V4381) (lambda (V4382) (lambda (V4383) (kl:shen.type-signature-of-variable? V4381 V4382 V4383)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-vector?) (lambda (V4391) (lambda (V4392) (lambda (V4393) (kl:shen.type-signature-of-vector? V4391 V4392 V4393)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-version) (lambda (V4401) (lambda (V4402) (lambda (V4403) (kl:shen.type-signature-of-version V4401 V4402 V4403)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-write-to-file) (lambda (V4411) (lambda (V4412) (lambda (V4413) (kl:shen.type-signature-of-write-to-file V4411 V4412 V4413)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-write-byte) (lambda (V4421) (lambda (V4422) (lambda (V4423) (kl:shen.type-signature-of-write-byte V4421 V4422 V4423)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-y-or-n?) (lambda (V4431) (lambda (V4432) (lambda (V4433) (kl:shen.type-signature-of-y-or-n? V4431 V4432 V4433)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of->) (lambda (V4441) (lambda (V4442) (lambda (V4443) (kl:shen.type-signature-of-> V4441 V4442 V4443)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-<) (lambda (V4451) (lambda (V4452) (lambda (V4453) (kl:shen.type-signature-of-< V4451 V4452 V4453)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of->=) (lambda (V4461) (lambda (V4462) (lambda (V4463) (kl:shen.type-signature-of->= V4461 V4462 V4463)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-<=) (lambda (V4471) (lambda (V4472) (lambda (V4473) (kl:shen.type-signature-of-<= V4471 V4472 V4473)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-=) (lambda (V4481) (lambda (V4482) (lambda (V4483) (kl:shen.type-signature-of-= V4481 V4482 V4483)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-+) (lambda (V4491) (lambda (V4492) (lambda (V4493) (kl:shen.type-signature-of-+ V4491 V4492 V4493)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-/) (lambda (V4501) (lambda (V4502) (lambda (V4503) (kl:shen.type-signature-of-/ V4501 V4502 V4503)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of--) (lambda (V4511) (lambda (V4512) (lambda (V4513) (kl:shen.type-signature-of-- V4511 V4512 V4513)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-*) (lambda (V4521) (lambda (V4522) (lambda (V4523) (kl:shen.type-signature-of-* V4521 V4522 V4523)))))) (kl:shen.set-lambda-form-entry (cons (quote shen.type-signature-of-==) (lambda (V4531) (lambda (V4532) (lambda (V4533) (kl:shen.type-signature-of-== V4531 V4532 V4533)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (export shen.initialise-signedfunc-lambda-forms) (quote shen.initialise-signedfunc-lambda-forms))
(begin (register-function-arity (quote shen.initialise-lambda-forms) 0) (define (kl:shen.initialise-lambda-forms) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.datatype-error) (lambda (X) (kl:shen.datatype-error X)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.tuple) (lambda (X) (kl:shen.tuple X)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.pvar) (lambda (X) (kl:shen.pvar X)))) (begin (kl:shen.set-lambda-form-entry (cons (quote shen.dictionary) (lambda (X) (kl:shen.dictionary X)))) (begin (kl:shen.set-lambda-form-entry (cons (quote _waspvm_at_v) (lambda (V418) (lambda (V419) (kl:_waspvm_at_v V418 V419))))) (begin (kl:shen.set-lambda-form-entry (cons (quote _waspvm_at_p) (lambda (V420) (lambda (V421) (kl:_waspvm_at_p V420 V421))))) (begin (kl:shen.set-lambda-form-entry (cons (quote _waspvm_at_s) (lambda (V422) (lambda (V423) (kl:_waspvm_at_s V422 V423))))) (begin (kl:shen.set-lambda-form-entry (cons (quote <e>) (lambda (V424) (kl:<e> V424)))) (begin (kl:shen.set-lambda-form-entry (cons (quote <!>) (lambda (V425) (kl:<!> V425)))) (begin (kl:shen.set-lambda-form-entry (cons (quote ==) (lambda (V426) (lambda (V427) (kl:== V426 V427))))) (begin (kl:shen.set-lambda-form-entry (cons (quote =) (lambda (V428) (lambda (V429) (kl:= V428 V429))))) (begin (kl:shen.set-lambda-form-entry (cons (quote >=) (lambda (V430) (lambda (V431) (>= V430 V431))))) (begin (kl:shen.set-lambda-form-entry (cons (quote >) (lambda (V432) (lambda (V433) (> V432 V433))))) (begin (kl:shen.set-lambda-form-entry (cons (quote -) (lambda (V434) (lambda (V435) (- V434 V435))))) (begin (kl:shen.set-lambda-form-entry (cons (quote /) (lambda (V436) (lambda (V437) (/ V436 V437))))) (begin (kl:shen.set-lambda-form-entry (cons (quote *) (lambda (V438) (lambda (V439) (* V438 V439))))) (begin (kl:shen.set-lambda-form-entry (cons (quote +) (lambda (V440) (lambda (V441) (+ V440 V441))))) (begin (kl:shen.set-lambda-form-entry (cons (quote <=) (lambda (V442) (lambda (V443) (<= V442 V443))))) (begin (kl:shen.set-lambda-form-entry (cons (quote <) (lambda (V444) (lambda (V445) (< V444 V445))))) (begin (kl:shen.set-lambda-form-entry (cons (quote y-or-n?) (lambda (V446) (kl:y-or-n? V446)))) (begin (kl:shen.set-lambda-form-entry (cons (quote write-to-file) (lambda (V447) (lambda (V448) (kl:write-to-file V447 V448))))) (begin (kl:shen.set-lambda-form-entry (cons (quote write-byte) (lambda (V449) (lambda (V450) (write-u8 V449 V450))))) (begin (kl:shen.set-lambda-form-entry (cons (quote variable?) (lambda (V451) (kl:variable? V451)))) (begin (kl:shen.set-lambda-form-entry (cons (quote value) (lambda (V452) (kl:value V452)))) (begin (kl:shen.set-lambda-form-entry (cons (quote vector->) (lambda (V453) (lambda (V454) (lambda (V455) (kl:vector-> V453 V454 V455)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote <-vector) (lambda (V456) (lambda (V457) (kl:<-vector V456 V457))))) (begin (kl:shen.set-lambda-form-entry (cons (quote vector) (lambda (V458) (kl:vector V458)))) (begin (kl:shen.set-lambda-form-entry (cons (quote vector?) (lambda (V459) (kl:vector? V459)))) (begin (kl:shen.set-lambda-form-entry (cons (quote unspecialise) (lambda (V460) (kl:unspecialise V460)))) (begin (kl:shen.set-lambda-form-entry (cons (quote untrack) (lambda (V461) (kl:untrack V461)))) (begin (kl:shen.set-lambda-form-entry (cons (quote union) (lambda (V462) (lambda (V463) (kl:union V462 V463))))) (begin (kl:shen.set-lambda-form-entry (cons (quote unify) (lambda (V464) (lambda (V465) (lambda (V466) (lambda (V467) (kl:unify V464 V465 V466 V467))))))) (begin (kl:shen.set-lambda-form-entry (cons (quote unify!) (lambda (V468) (lambda (V469) (lambda (V470) (lambda (V471) (kl:unify! V468 V469 V470 V471))))))) (begin (kl:shen.set-lambda-form-entry (cons (quote unput) (lambda (V472) (lambda (V473) (lambda (V474) (kl:unput V472 V473 V474)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote unprofile) (lambda (V475) (kl:unprofile V475)))) (begin (kl:shen.set-lambda-form-entry (cons (quote undefmacro) (lambda (V476) (kl:undefmacro V476)))) (begin (kl:shen.set-lambda-form-entry (cons (quote return) (lambda (V477) (lambda (V478) (lambda (V479) (kl:return V477 V478 V479)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote type) (lambda (V480) (lambda (V481) V480)))) (begin (kl:shen.set-lambda-form-entry (cons (quote tuple?) (lambda (V482) (kl:tuple? V482)))) (begin (kl:shen.set-lambda-form-entry (cons (quote trap-error) (lambda (V483) (lambda (V484) (guard (lambda (e) (V484 e)) V483))))) (begin (kl:shen.set-lambda-form-entry (cons (quote track) (lambda (V485) (kl:track V485)))) (begin (kl:shen.set-lambda-form-entry (cons (quote thaw) (lambda (V486) (kl:thaw V486)))) (begin (kl:shen.set-lambda-form-entry (cons (quote tc) (lambda (V487) (kl:tc V487)))) (begin (kl:shen.set-lambda-form-entry (cons (quote tl) (lambda (V488) (cdr V488)))) (begin (kl:shen.set-lambda-form-entry (cons (quote tlstr) (lambda (V489) (string-tail V489 1)))) (begin (kl:shen.set-lambda-form-entry (cons (quote tail) (lambda (V490) (kl:tail V490)))) (begin (kl:shen.set-lambda-form-entry (cons (quote systemf) (lambda (V491) (kl:systemf V491)))) (begin (kl:shen.set-lambda-form-entry (cons (quote symbol?) (lambda (V492) (kl:symbol? V492)))) (begin (kl:shen.set-lambda-form-entry (cons (quote string->symbol) (lambda (V493) (kl:string->symbol V493)))) (begin (kl:shen.set-lambda-form-entry (cons (quote sum) (lambda (V494) (kl:sum V494)))) (begin (kl:shen.set-lambda-form-entry (cons (quote subst) (lambda (V495) (lambda (V496) (lambda (V497) (kl:subst V495 V496 V497)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote string?) (lambda (V498) (string? V498)))) (begin (kl:shen.set-lambda-form-entry (cons (quote string->n) (lambda (V499) (string-ref V499 0)))) (begin (kl:shen.set-lambda-form-entry (cons (quote step) (lambda (V500) (kl:step V500)))) (begin (kl:shen.set-lambda-form-entry (cons (quote spy) (lambda (V501) (kl:spy V501)))) (begin (kl:shen.set-lambda-form-entry (cons (quote specialise) (lambda (V502) (kl:specialise V502)))) (begin (kl:shen.set-lambda-form-entry (cons (quote snd) (lambda (V503) (kl:snd V503)))) (begin (kl:shen.set-lambda-form-entry (cons (quote simple-error) (lambda (V504) (simple-error V504)))) (begin (kl:shen.set-lambda-form-entry (cons (quote set) (lambda (V505) (lambda (V506) (kl:set V505 V506))))) (begin (kl:shen.set-lambda-form-entry (cons (quote str) (lambda (V507) (kl:str V507)))) (begin (kl:shen.set-lambda-form-entry (cons (quote reverse) (lambda (V508) (kl:reverse V508)))) (begin (kl:shen.set-lambda-form-entry (cons (quote remove) (lambda (V509) (lambda (V510) (kl:remove V509 V510))))) (begin (kl:shen.set-lambda-form-entry (cons (quote read) (lambda (V511) (kl:read V511)))) (begin (kl:shen.set-lambda-form-entry (cons (quote read-file) (lambda (V512) (kl:read-file V512)))) (begin (kl:shen.set-lambda-form-entry (cons (quote read-file-as-bytelist) (lambda (V513) (kl:read-file-as-bytelist V513)))) (begin (kl:shen.set-lambda-form-entry (cons (quote read-file-as-string) (lambda (V514) (kl:read-file-as-string V514)))) (begin (kl:shen.set-lambda-form-entry (cons (quote read-byte) (lambda (V515) (read-u8 V515)))) (begin (kl:shen.set-lambda-form-entry (cons (quote read-from-string) (lambda (V516) (kl:read-from-string V516)))) (begin (kl:shen.set-lambda-form-entry (cons (quote package?) (lambda (V517) (kl:package? V517)))) (begin (kl:shen.set-lambda-form-entry (cons (quote put) (lambda (V518) (lambda (V519) (lambda (V520) (lambda (V521) (kl:put V518 V519 V520 V521))))))) (begin (kl:shen.set-lambda-form-entry (cons (quote preclude) (lambda (V522) (kl:preclude V522)))) (begin (kl:shen.set-lambda-form-entry (cons (quote preclude-all-but) (lambda (V523) (kl:preclude-all-but V523)))) (begin (kl:shen.set-lambda-form-entry (cons (quote ps) (lambda (V524) (kl:ps V524)))) (begin (kl:shen.set-lambda-form-entry (cons (quote protect) (lambda (V525) (kl:protect V525)))) (begin (kl:shen.set-lambda-form-entry (cons (quote profile-results) (lambda (V526) (kl:profile-results V526)))) (begin (kl:shen.set-lambda-form-entry (cons (quote profile) (lambda (V527) (kl:profile V527)))) (begin (kl:shen.set-lambda-form-entry (cons (quote print) (lambda (V528) (kl:print V528)))) (begin (kl:shen.set-lambda-form-entry (cons (quote pr) (lambda (V529) (lambda (V530) (kl:pr V529 V530))))) (begin (kl:shen.set-lambda-form-entry (cons (quote pos) (lambda (V531) (lambda (V532) (make-string 1 (string-ref V531 V532)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote or) (lambda (V533) (lambda (V534) (or (assert-boolean V533) (assert-boolean V534)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote optimise) (lambda (V535) (kl:optimise V535)))) (begin (kl:shen.set-lambda-form-entry (cons (quote open) (lambda (V536) (lambda (V537) (kl:open V536 V537))))) (begin (kl:shen.set-lambda-form-entry (cons (quote occurrences) (lambda (V538) (lambda (V539) (kl:occurrences V538 V539))))) (begin (kl:shen.set-lambda-form-entry (cons (quote occurs-check) (lambda (V540) (kl:occurs-check V540)))) (begin (kl:shen.set-lambda-form-entry (cons (quote n->string) (lambda (V541) (make-string 1 V541)))) (begin (kl:shen.set-lambda-form-entry (cons (quote number?) (lambda (V542) (number? V542)))) (begin (kl:shen.set-lambda-form-entry (cons (quote nth) (lambda (V543) (lambda (V544) (kl:nth V543 V544))))) (begin (kl:shen.set-lambda-form-entry (cons (quote not) (lambda (V545) (kl:not V545)))) (begin (kl:shen.set-lambda-form-entry (cons (quote nl) (lambda (V546) (kl:nl V546)))) (begin (kl:shen.set-lambda-form-entry (cons (quote macroexpand) (lambda (V547) (kl:macroexpand V547)))) (begin (kl:shen.set-lambda-form-entry (cons (quote maxinferences) (lambda (V548) (kl:maxinferences V548)))) (begin (kl:shen.set-lambda-form-entry (cons (quote mapcan) (lambda (V549) (lambda (V550) (kl:mapcan V549 V550))))) (begin (kl:shen.set-lambda-form-entry (cons (quote map) (lambda (V551) (lambda (V552) (kl:map V551 V552))))) (begin (kl:shen.set-lambda-form-entry (cons (quote load) (lambda (V553) (kl:load V553)))) (begin (kl:shen.set-lambda-form-entry (cons (quote lineread) (lambda (V554) (kl:lineread V554)))) (begin (kl:shen.set-lambda-form-entry (cons (quote limit) (lambda (V555) (kl:limit V555)))) (begin (kl:shen.set-lambda-form-entry (cons (quote length) (lambda (V556) (kl:length V556)))) (begin (kl:shen.set-lambda-form-entry (cons (quote intersection) (lambda (V557) (lambda (V558) (kl:intersection V557 V558))))) (begin (kl:shen.set-lambda-form-entry (cons (quote intern) (lambda (V559) (kl:intern V559)))) (begin (kl:shen.set-lambda-form-entry (cons (quote integer?) (lambda (V560) (kl:integer? V560)))) (begin (kl:shen.set-lambda-form-entry (cons (quote input) (lambda (V561) (kl:input V561)))) (begin (kl:shen.set-lambda-form-entry (cons (quote input+) (lambda (V562) (lambda (V563) (kl:input+ V562 V563))))) (begin (kl:shen.set-lambda-form-entry (cons (quote include) (lambda (V564) (kl:include V564)))) (begin (kl:shen.set-lambda-form-entry (cons (quote include-all-but) (lambda (V565) (kl:include-all-but V565)))) (begin (kl:shen.set-lambda-form-entry (cons (quote internal) (lambda (V566) (kl:internal V566)))) (begin (kl:shen.set-lambda-form-entry (cons (quote if) (lambda (V567) (lambda (V568) (lambda (V569) (if (assert-boolean V567) V568 V569)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote identical) (lambda (V570) (lambda (V571) (lambda (V572) (lambda (V573) (kl:identical V570 V571 V572 V573))))))) (begin (kl:shen.set-lambda-form-entry (cons (quote head) (lambda (V574) (kl:head V574)))) (begin (kl:shen.set-lambda-form-entry (cons (quote hd) (lambda (V575) (car V575)))) (begin (kl:shen.set-lambda-form-entry (cons (quote hdv) (lambda (V576) (kl:hdv V576)))) (begin (kl:shen.set-lambda-form-entry (cons (quote hdstr) (lambda (V577) (kl:hdstr V577)))) (begin (kl:shen.set-lambda-form-entry (cons (quote hash) (lambda (V578) (lambda (V579) (kl:hash V578 V579))))) (begin (kl:shen.set-lambda-form-entry (cons (quote get) (lambda (V580) (lambda (V581) (lambda (V582) (kl:get V580 V581 V582)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote get-time) (lambda (V583) (kl:get-time V583)))) (begin (kl:shen.set-lambda-form-entry (cons (quote gensym) (lambda (V584) (kl:gensym V584)))) (begin (kl:shen.set-lambda-form-entry (cons (quote fst) (lambda (V585) (kl:fst V585)))) (begin (kl:shen.set-lambda-form-entry (cons (quote freeze) (lambda (V586) (lambda () V586)))) (begin (kl:shen.set-lambda-form-entry (cons (quote fix) (lambda (V587) (lambda (V588) (kl:fix V587 V588))))) (begin (kl:shen.set-lambda-form-entry (cons (quote fail-if) (lambda (V589) (lambda (V590) (kl:fail-if V589 V590))))) (begin (kl:shen.set-lambda-form-entry (cons (quote findall) (lambda (V591) (lambda (V592) (lambda (V593) (lambda (V594) (lambda (V595) (kl:findall V591 V592 V593 V594 V595)))))))) (begin (kl:shen.set-lambda-form-entry (cons (quote enable-type-theory) (lambda (V596) (kl:enable-type-theory V596)))) (begin (kl:shen.set-lambda-form-entry (cons (quote explode) (lambda (V597) (kl:explode V597)))) (begin (kl:shen.set-lambda-form-entry (cons (quote external) (lambda (V598) (kl:external V598)))) (begin (kl:shen.set-lambda-form-entry (cons (quote eval-kl) (lambda (V599) (kl:eval-kl V599)))) (begin (kl:shen.set-lambda-form-entry (cons (quote eval) (lambda (V600) (kl:eval V600)))) (begin (kl:shen.set-lambda-form-entry (cons (quote error-to-string) (lambda (V601) (kl:error-to-string V601)))) (begin (kl:shen.set-lambda-form-entry (cons (quote empty?) (lambda (V602) (kl:empty? V602)))) (begin (kl:shen.set-lambda-form-entry (cons (quote element?) (lambda (V603) (lambda (V604) (kl:element? V603 V604))))) (begin (kl:shen.set-lambda-form-entry (cons (quote do) (lambda (V605) (lambda (V606) (begin V605 V606))))) (begin (kl:shen.set-lambda-form-entry (cons (quote difference) (lambda (V607) (lambda (V608) (kl:difference V607 V608))))) (begin (kl:shen.set-lambda-form-entry (cons (quote destroy) (lambda (V609) (kl:destroy V609)))) (begin (kl:shen.set-lambda-form-entry (cons (quote declare) (lambda (V610) (lambda (V611) (kl:declare V610 V611))))) (begin (kl:shen.set-lambda-form-entry (cons (quote cn) (lambda (V612) (lambda (V613) (string-append V612 V613))))) (begin (kl:shen.set-lambda-form-entry (cons (quote cons?) (lambda (V614) (pair? V614)))) (begin (kl:shen.set-lambda-form-entry (cons (quote cons) (lambda (V615) (lambda (V616) (cons V615 V616))))) (begin (kl:shen.set-lambda-form-entry (cons (quote concat) (lambda (V617) (lambda (V618) (kl:concat V617 V618))))) (begin (kl:shen.set-lambda-form-entry (cons (quote compile) (lambda (V619) (lambda (V620) (lambda (V621) (kl:compile V619 V620 V621)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote cd) (lambda (V622) (kl:cd V622)))) (begin (kl:shen.set-lambda-form-entry (cons (quote close) (lambda (V623) (kl:close V623)))) (begin (kl:shen.set-lambda-form-entry (cons (quote bound?) (lambda (V624) (kl:bound? V624)))) (begin (kl:shen.set-lambda-form-entry (cons (quote boolean?) (lambda (V625) (kl:boolean? V625)))) (begin (kl:shen.set-lambda-form-entry (cons (quote assoc) (lambda (V626) (lambda (V627) (kl:assoc V626 V627))))) (begin (kl:shen.set-lambda-form-entry (cons (quote arity) (lambda (V628) (kl:arity V628)))) (begin (kl:shen.set-lambda-form-entry (cons (quote append) (lambda (V629) (lambda (V630) (kl:append V629 V630))))) (begin (kl:shen.set-lambda-form-entry (cons (quote and) (lambda (V631) (lambda (V632) (and (assert-boolean V631) (assert-boolean V632)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote adjoin) (lambda (V633) (lambda (V634) (kl:adjoin V633 V634))))) (begin (kl:shen.set-lambda-form-entry (cons (quote <-address) (lambda (V635) (lambda (V636) (vector-ref V635 V636))))) (begin (kl:shen.set-lambda-form-entry (cons (quote address->) (lambda (V637) (lambda (V638) (lambda (V639) (let ((_tmp V637)) (vector-set! _tmp V638 V639) _tmp)))))) (begin (kl:shen.set-lambda-form-entry (cons (quote absvector?) (lambda (V640) (vector? V640)))) (kl:shen.set-lambda-form-entry (cons (quote absvector) (lambda (V641) (make-vector V641 (quote (quote shen.fail!)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (export shen.initialise-lambda-forms) (quote shen.initialise-lambda-forms))
(begin (register-function-arity (quote shen.initialise) 0) (define (kl:shen.initialise) (begin (kl:shen.initialise-environment) (begin (kl:shen.initialise-lambda-forms) (begin (kl:shen.initialise-signedfunc-lambda-forms) (kl:shen.initialise-signedfuncs))))) (export shen.initialise) (quote shen.initialise))
