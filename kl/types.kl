"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun declare (V3152 V3153) (let Record (set shen.*signedfuncs* (cons (cons V3152 V3153) (value shen.*signedfuncs*))) (let Variancy (trap-error (shen.variancy-test V3152 V3153) (lambda E shen.skip)) (let Type (shen.rcons_form (shen.demodulate V3153)) (let F* (concat shen.type-signature-of- V3152) (let Parameters (shen.parameters 1) (let Clause (cons (cons F* (cons X ())) (cons :- (cons (cons (cons unify! (cons X (cons Type ()))) ()) ()))) (let AUM_instruction (shen.aum Clause Parameters) (let Code (shen.aum_to_shen AUM_instruction) (let ShenDef (cons define (cons F* (append Parameters (append (cons ProcessN (cons Continuation ())) (cons -> (cons Code ())))))) (let Eval (shen.eval-without-macros ShenDef) V3152)))))))))))

(defun shen.demodulate (V3155) (let Demod (shen.walk (value shen.*demodulation-function*) V3155) (if (= Demod V3155) V3155 (shen.demodulate Demod))))

(defun shen.variancy-test (V3158 V3159) (let TypeF (shen.typecheck V3158 B) (let Check (if (= symbol TypeF) shen.skip (if (shen.variant? TypeF V3159) shen.skip (shen.prhush (cn "warning: changing the type of " (shen.app V3158 " may create errors
" shen.a)) (stoutput)))) shen.skip)))

(defun shen.variant? (V3172 V3173) (cond ((= V3173 V3172) true) ((and (cons? V3172) (and (cons? V3173) (= (hd V3173) (hd V3172)))) (shen.variant? (tl V3172) (tl V3173))) ((and (cons? V3172) (and (cons? V3173) (and (shen.pvar? (hd V3172)) (variable? (hd V3173))))) (shen.variant? (subst shen.a (hd V3172) (tl V3172)) (subst shen.a (hd V3173) (tl V3173)))) ((and (cons? V3172) (and (cons? (hd V3172)) (and (cons? V3173) (cons? (hd V3173))))) (shen.variant? (append (hd V3172) (tl V3172)) (append (hd V3173) (tl V3173)))) (true false)))

(defun shen.type-signature-of-absvector? (V3178 V3179 V3180) (let A (shen.newpv V3179) (do (shen.incinfs) (unify! V3178 (cons A (cons --> (cons boolean ()))) V3179 V3180))))

(defun shen.type-signature-of-adjoin (V3188 V3189 V3190) (let A (shen.newpv V3189) (do (shen.incinfs) (unify! V3188 (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))) V3189 V3190))))

(defun shen.type-signature-of-and (V3198 V3199 V3200) (do (shen.incinfs) (unify! V3198 (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ()))) V3199 V3200)))

(defun shen.type-signature-of-shen.app (V3208 V3209 V3210) (let A (shen.newpv V3209) (do (shen.incinfs) (unify! V3208 (cons A (cons --> (cons (cons string (cons --> (cons (cons symbol (cons --> (cons string ()))) ()))) ()))) V3209 V3210))))

(defun shen.type-signature-of-append (V3218 V3219 V3220) (let A (shen.newpv V3219) (do (shen.incinfs) (unify! V3218 (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))) V3219 V3220))))

(defun shen.type-signature-of-arity (V3228 V3229 V3230) (let A (shen.newpv V3229) (do (shen.incinfs) (unify! V3228 (cons A (cons --> (cons number ()))) V3229 V3230))))

(defun shen.type-signature-of-assoc (V3238 V3239 V3240) (let A (shen.newpv V3239) (do (shen.incinfs) (unify! V3238 (cons A (cons --> (cons (cons (cons list (cons (cons list (cons A ())) ())) (cons --> (cons (cons list (cons A ())) ()))) ()))) V3239 V3240))))

(defun shen.type-signature-of-boolean? (V3248 V3249 V3250) (let A (shen.newpv V3249) (do (shen.incinfs) (unify! V3248 (cons A (cons --> (cons boolean ()))) V3249 V3250))))

(defun shen.type-signature-of-bound? (V3258 V3259 V3260) (do (shen.incinfs) (unify! V3258 (cons symbol (cons --> (cons boolean ()))) V3259 V3260)))

(defun shen.type-signature-of-cd (V3268 V3269 V3270) (do (shen.incinfs) (unify! V3268 (cons string (cons --> (cons string ()))) V3269 V3270)))

(defun shen.type-signature-of-close (V3278 V3279 V3280) (let A (shen.newpv V3279) (let B (shen.newpv V3279) (do (shen.incinfs) (unify! V3278 (cons (cons stream (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) V3279 V3280)))))

(defun shen.type-signature-of-cn (V3288 V3289 V3290) (do (shen.incinfs) (unify! V3288 (cons string (cons --> (cons (cons string (cons --> (cons string ()))) ()))) V3289 V3290)))

(defun shen.type-signature-of-compile (V3298 V3299 V3300) (let A (shen.newpv V3299) (let B (shen.newpv V3299) (do (shen.incinfs) (unify! V3298 (cons (cons A (cons shen.==> (cons B ()))) (cons --> (cons (cons A (cons --> (cons (cons (cons A (cons --> (cons B ()))) (cons --> (cons B ()))) ()))) ()))) V3299 V3300)))))

(defun shen.type-signature-of-cons? (V3308 V3309 V3310) (let A (shen.newpv V3309) (do (shen.incinfs) (unify! V3308 (cons A (cons --> (cons boolean ()))) V3309 V3310))))

(defun shen.type-signature-of-destroy (V3318 V3319 V3320) (let A (shen.newpv V3319) (let B (shen.newpv V3319) (do (shen.incinfs) (unify! V3318 (cons (cons A (cons --> (cons B ()))) (cons --> (cons symbol ()))) V3319 V3320)))))

(defun shen.type-signature-of-difference (V3328 V3329 V3330) (let A (shen.newpv V3329) (do (shen.incinfs) (unify! V3328 (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))) V3329 V3330))))

(defun shen.type-signature-of-do (V3338 V3339 V3340) (let A (shen.newpv V3339) (let B (shen.newpv V3339) (do (shen.incinfs) (unify! V3338 (cons A (cons --> (cons (cons B (cons --> (cons B ()))) ()))) V3339 V3340)))))

(defun shen.type-signature-of-<e> (V3348 V3349 V3350) (let A (shen.newpv V3349) (let B (shen.newpv V3349) (do (shen.incinfs) (unify! V3348 (cons (cons list (cons A ())) (cons shen.==> (cons (cons list (cons B ())) ()))) V3349 V3350)))))

(defun shen.type-signature-of-<!> (V3358 V3359 V3360) (let A (shen.newpv V3359) (do (shen.incinfs) (unify! V3358 (cons (cons list (cons A ())) (cons shen.==> (cons (cons list (cons A ())) ()))) V3359 V3360))))

(defun shen.type-signature-of-element? (V3368 V3369 V3370) (let A (shen.newpv V3369) (do (shen.incinfs) (unify! V3368 (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons boolean ()))) ()))) V3369 V3370))))

(defun shen.type-signature-of-empty? (V3378 V3379 V3380) (let A (shen.newpv V3379) (do (shen.incinfs) (unify! V3378 (cons A (cons --> (cons boolean ()))) V3379 V3380))))

(defun shen.type-signature-of-enable-type-theory (V3388 V3389 V3390) (do (shen.incinfs) (unify! V3388 (cons symbol (cons --> (cons boolean ()))) V3389 V3390)))

(defun shen.type-signature-of-external (V3398 V3399 V3400) (do (shen.incinfs) (unify! V3398 (cons symbol (cons --> (cons (cons list (cons symbol ())) ()))) V3399 V3400)))

(defun shen.type-signature-of-error-to-string (V3408 V3409 V3410) (do (shen.incinfs) (unify! V3408 (cons exception (cons --> (cons string ()))) V3409 V3410)))

(defun shen.type-signature-of-explode (V3418 V3419 V3420) (let A (shen.newpv V3419) (do (shen.incinfs) (unify! V3418 (cons A (cons --> (cons (cons list (cons string ())) ()))) V3419 V3420))))

(defun shen.type-signature-of-fail (V3428 V3429 V3430) (do (shen.incinfs) (unify! V3428 (cons --> (cons symbol ())) V3429 V3430)))

(defun shen.type-signature-of-fail-if (V3438 V3439 V3440) (do (shen.incinfs) (unify! V3438 (cons (cons symbol (cons --> (cons boolean ()))) (cons --> (cons (cons symbol (cons --> (cons symbol ()))) ()))) V3439 V3440)))

(defun shen.type-signature-of-fix (V3448 V3449 V3450) (let A (shen.newpv V3449) (do (shen.incinfs) (unify! V3448 (cons (cons A (cons --> (cons A ()))) (cons --> (cons (cons A (cons --> (cons A ()))) ()))) V3449 V3450))))

(defun shen.type-signature-of-freeze (V3458 V3459 V3460) (let A (shen.newpv V3459) (do (shen.incinfs) (unify! V3458 (cons A (cons --> (cons (cons lazy (cons A ())) ()))) V3459 V3460))))

(defun shen.type-signature-of-fst (V3468 V3469 V3470) (let B (shen.newpv V3469) (let A (shen.newpv V3469) (do (shen.incinfs) (unify! V3468 (cons (cons A (cons * (cons B ()))) (cons --> (cons A ()))) V3469 V3470)))))

(defun shen.type-signature-of-function (V3478 V3479 V3480) (let A (shen.newpv V3479) (let B (shen.newpv V3479) (do (shen.incinfs) (unify! V3478 (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ()))) V3479 V3480)))))

(defun shen.type-signature-of-gensym (V3488 V3489 V3490) (do (shen.incinfs) (unify! V3488 (cons symbol (cons --> (cons symbol ()))) V3489 V3490)))

(defun shen.type-signature-of-<-vector (V3498 V3499 V3500) (let A (shen.newpv V3499) (do (shen.incinfs) (unify! V3498 (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons A ()))) ()))) V3499 V3500))))

(defun shen.type-signature-of-vector-> (V3508 V3509 V3510) (let A (shen.newpv V3509) (do (shen.incinfs) (unify! V3508 (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons (cons A (cons --> (cons (cons vector (cons A ())) ()))) ()))) ()))) V3509 V3510))))

(defun shen.type-signature-of-vector (V3518 V3519 V3520) (let A (shen.newpv V3519) (do (shen.incinfs) (unify! V3518 (cons number (cons --> (cons (cons vector (cons A ())) ()))) V3519 V3520))))

(defun shen.type-signature-of-get-time (V3528 V3529 V3530) (do (shen.incinfs) (unify! V3528 (cons symbol (cons --> (cons number ()))) V3529 V3530)))

(defun shen.type-signature-of-hash (V3538 V3539 V3540) (let A (shen.newpv V3539) (do (shen.incinfs) (unify! V3538 (cons A (cons --> (cons (cons number (cons --> (cons number ()))) ()))) V3539 V3540))))

(defun shen.type-signature-of-head (V3548 V3549 V3550) (let A (shen.newpv V3549) (do (shen.incinfs) (unify! V3548 (cons (cons list (cons A ())) (cons --> (cons A ()))) V3549 V3550))))

(defun shen.type-signature-of-hdv (V3558 V3559 V3560) (let A (shen.newpv V3559) (do (shen.incinfs) (unify! V3558 (cons (cons vector (cons A ())) (cons --> (cons A ()))) V3559 V3560))))

(defun shen.type-signature-of-hdstr (V3568 V3569 V3570) (do (shen.incinfs) (unify! V3568 (cons string (cons --> (cons string ()))) V3569 V3570)))

(defun shen.type-signature-of-if (V3578 V3579 V3580) (let A (shen.newpv V3579) (do (shen.incinfs) (unify! V3578 (cons boolean (cons --> (cons (cons A (cons --> (cons (cons A (cons --> (cons A ()))) ()))) ()))) V3579 V3580))))

(defun shen.type-signature-of-it (V3588 V3589 V3590) (do (shen.incinfs) (unify! V3588 (cons --> (cons string ())) V3589 V3590)))

(defun shen.type-signature-of-implementation (V3598 V3599 V3600) (do (shen.incinfs) (unify! V3598 (cons --> (cons string ())) V3599 V3600)))

(defun shen.type-signature-of-include (V3608 V3609 V3610) (do (shen.incinfs) (unify! V3608 (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ()))) V3609 V3610)))

(defun shen.type-signature-of-include-all-but (V3618 V3619 V3620) (do (shen.incinfs) (unify! V3618 (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ()))) V3619 V3620)))

(defun shen.type-signature-of-inferences (V3628 V3629 V3630) (do (shen.incinfs) (unify! V3628 (cons --> (cons number ())) V3629 V3630)))

(defun shen.type-signature-of-shen.insert (V3638 V3639 V3640) (let A (shen.newpv V3639) (do (shen.incinfs) (unify! V3638 (cons A (cons --> (cons (cons string (cons --> (cons string ()))) ()))) V3639 V3640))))

(defun shen.type-signature-of-integer? (V3648 V3649 V3650) (let A (shen.newpv V3649) (do (shen.incinfs) (unify! V3648 (cons A (cons --> (cons boolean ()))) V3649 V3650))))

(defun shen.type-signature-of-internal (V3658 V3659 V3660) (do (shen.incinfs) (unify! V3658 (cons symbol (cons --> (cons (cons list (cons symbol ())) ()))) V3659 V3660)))

(defun shen.type-signature-of-intersection (V3668 V3669 V3670) (let A (shen.newpv V3669) (do (shen.incinfs) (unify! V3668 (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))) V3669 V3670))))

(defun shen.type-signature-of-kill (V3678 V3679 V3680) (let A (shen.newpv V3679) (do (shen.incinfs) (unify! V3678 (cons --> (cons A ())) V3679 V3680))))

(defun shen.type-signature-of-language (V3688 V3689 V3690) (do (shen.incinfs) (unify! V3688 (cons --> (cons string ())) V3689 V3690)))

(defun shen.type-signature-of-length (V3698 V3699 V3700) (let A (shen.newpv V3699) (do (shen.incinfs) (unify! V3698 (cons (cons list (cons A ())) (cons --> (cons number ()))) V3699 V3700))))

(defun shen.type-signature-of-limit (V3708 V3709 V3710) (let A (shen.newpv V3709) (do (shen.incinfs) (unify! V3708 (cons (cons vector (cons A ())) (cons --> (cons number ()))) V3709 V3710))))

(defun shen.type-signature-of-load (V3718 V3719 V3720) (do (shen.incinfs) (unify! V3718 (cons string (cons --> (cons symbol ()))) V3719 V3720)))

(defun shen.type-signature-of-map (V3728 V3729 V3730) (let A (shen.newpv V3729) (let B (shen.newpv V3729) (do (shen.incinfs) (unify! V3728 (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ()))) V3729 V3730)))))

(defun shen.type-signature-of-mapcan (V3738 V3739 V3740) (let A (shen.newpv V3739) (let B (shen.newpv V3739) (do (shen.incinfs) (unify! V3738 (cons (cons A (cons --> (cons (cons list (cons B ())) ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ()))) V3739 V3740)))))

(defun shen.type-signature-of-maxinferences (V3748 V3749 V3750) (do (shen.incinfs) (unify! V3748 (cons number (cons --> (cons number ()))) V3749 V3750)))

(defun shen.type-signature-of-n->string (V3758 V3759 V3760) (do (shen.incinfs) (unify! V3758 (cons number (cons --> (cons string ()))) V3759 V3760)))

(defun shen.type-signature-of-nl (V3768 V3769 V3770) (do (shen.incinfs) (unify! V3768 (cons number (cons --> (cons number ()))) V3769 V3770)))

(defun shen.type-signature-of-not (V3778 V3779 V3780) (do (shen.incinfs) (unify! V3778 (cons boolean (cons --> (cons boolean ()))) V3779 V3780)))

(defun shen.type-signature-of-nth (V3788 V3789 V3790) (let A (shen.newpv V3789) (do (shen.incinfs) (unify! V3788 (cons number (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons A ()))) ()))) V3789 V3790))))

(defun shen.type-signature-of-number? (V3798 V3799 V3800) (let A (shen.newpv V3799) (do (shen.incinfs) (unify! V3798 (cons A (cons --> (cons boolean ()))) V3799 V3800))))

(defun shen.type-signature-of-occurrences (V3808 V3809 V3810) (let A (shen.newpv V3809) (let B (shen.newpv V3809) (do (shen.incinfs) (unify! V3808 (cons A (cons --> (cons (cons B (cons --> (cons number ()))) ()))) V3809 V3810)))))

(defun shen.type-signature-of-occurs-check (V3818 V3819 V3820) (do (shen.incinfs) (unify! V3818 (cons symbol (cons --> (cons boolean ()))) V3819 V3820)))

(defun shen.type-signature-of-optimise (V3828 V3829 V3830) (do (shen.incinfs) (unify! V3828 (cons symbol (cons --> (cons boolean ()))) V3829 V3830)))

(defun shen.type-signature-of-or (V3838 V3839 V3840) (do (shen.incinfs) (unify! V3838 (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ()))) V3839 V3840)))

(defun shen.type-signature-of-os (V3848 V3849 V3850) (do (shen.incinfs) (unify! V3848 (cons --> (cons string ())) V3849 V3850)))

(defun shen.type-signature-of-package? (V3858 V3859 V3860) (do (shen.incinfs) (unify! V3858 (cons symbol (cons --> (cons boolean ()))) V3859 V3860)))

(defun shen.type-signature-of-port (V3868 V3869 V3870) (do (shen.incinfs) (unify! V3868 (cons --> (cons string ())) V3869 V3870)))

(defun shen.type-signature-of-porters (V3878 V3879 V3880) (do (shen.incinfs) (unify! V3878 (cons --> (cons string ())) V3879 V3880)))

(defun shen.type-signature-of-pos (V3888 V3889 V3890) (do (shen.incinfs) (unify! V3888 (cons string (cons --> (cons (cons number (cons --> (cons string ()))) ()))) V3889 V3890)))

(defun shen.type-signature-of-pr (V3898 V3899 V3900) (do (shen.incinfs) (unify! V3898 (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ()))) V3899 V3900)))

(defun shen.type-signature-of-print (V3908 V3909 V3910) (let A (shen.newpv V3909) (do (shen.incinfs) (unify! V3908 (cons A (cons --> (cons A ()))) V3909 V3910))))

(defun shen.type-signature-of-profile (V3918 V3919 V3920) (let A (shen.newpv V3919) (let B (shen.newpv V3919) (do (shen.incinfs) (unify! V3918 (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ()))) V3919 V3920)))))

(defun shen.type-signature-of-preclude (V3928 V3929 V3930) (do (shen.incinfs) (unify! V3928 (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ()))) V3929 V3930)))

(defun shen.type-signature-of-shen.proc-nl (V3938 V3939 V3940) (do (shen.incinfs) (unify! V3938 (cons string (cons --> (cons string ()))) V3939 V3940)))

(defun shen.type-signature-of-profile-results (V3948 V3949 V3950) (let A (shen.newpv V3949) (let B (shen.newpv V3949) (do (shen.incinfs) (unify! V3948 (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons A (cons --> (cons B ()))) (cons * (cons number ()))) ()))) V3949 V3950)))))

(defun shen.type-signature-of-protect (V3958 V3959 V3960) (do (shen.incinfs) (unify! V3958 (cons symbol (cons --> (cons symbol ()))) V3959 V3960)))

(defun shen.type-signature-of-preclude-all-but (V3968 V3969 V3970) (do (shen.incinfs) (unify! V3968 (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ()))) V3969 V3970)))

(defun shen.type-signature-of-shen.prhush (V3978 V3979 V3980) (do (shen.incinfs) (unify! V3978 (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ()))) V3979 V3980)))

(defun shen.type-signature-of-ps (V3988 V3989 V3990) (do (shen.incinfs) (unify! V3988 (cons symbol (cons --> (cons (cons list (cons unit ())) ()))) V3989 V3990)))

(defun shen.type-signature-of-read (V3998 V3999 V4000) (do (shen.incinfs) (unify! V3998 (cons (cons stream (cons in ())) (cons --> (cons unit ()))) V3999 V4000)))

(defun shen.type-signature-of-read-byte (V4008 V4009 V4010) (do (shen.incinfs) (unify! V4008 (cons (cons stream (cons in ())) (cons --> (cons number ()))) V4009 V4010)))

(defun shen.type-signature-of-read-file-as-bytelist (V4018 V4019 V4020) (do (shen.incinfs) (unify! V4018 (cons string (cons --> (cons (cons list (cons number ())) ()))) V4019 V4020)))

(defun shen.type-signature-of-read-file-as-string (V4028 V4029 V4030) (do (shen.incinfs) (unify! V4028 (cons string (cons --> (cons string ()))) V4029 V4030)))

(defun shen.type-signature-of-read-file (V4038 V4039 V4040) (do (shen.incinfs) (unify! V4038 (cons string (cons --> (cons (cons list (cons unit ())) ()))) V4039 V4040)))

(defun shen.type-signature-of-read-from-string (V4048 V4049 V4050) (do (shen.incinfs) (unify! V4048 (cons string (cons --> (cons (cons list (cons unit ())) ()))) V4049 V4050)))

(defun shen.type-signature-of-release (V4058 V4059 V4060) (do (shen.incinfs) (unify! V4058 (cons --> (cons string ())) V4059 V4060)))

(defun shen.type-signature-of-remove (V4068 V4069 V4070) (let A (shen.newpv V4069) (do (shen.incinfs) (unify! V4068 (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))) V4069 V4070))))

(defun shen.type-signature-of-reverse (V4078 V4079 V4080) (let A (shen.newpv V4079) (do (shen.incinfs) (unify! V4078 (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) V4079 V4080))))

(defun shen.type-signature-of-simple-error (V4088 V4089 V4090) (let A (shen.newpv V4089) (do (shen.incinfs) (unify! V4088 (cons string (cons --> (cons A ()))) V4089 V4090))))

(defun shen.type-signature-of-snd (V4098 V4099 V4100) (let A (shen.newpv V4099) (let B (shen.newpv V4099) (do (shen.incinfs) (unify! V4098 (cons (cons A (cons * (cons B ()))) (cons --> (cons B ()))) V4099 V4100)))))

(defun shen.type-signature-of-specialise (V4108 V4109 V4110) (do (shen.incinfs) (unify! V4108 (cons symbol (cons --> (cons symbol ()))) V4109 V4110)))

(defun shen.type-signature-of-spy (V4118 V4119 V4120) (do (shen.incinfs) (unify! V4118 (cons symbol (cons --> (cons boolean ()))) V4119 V4120)))

(defun shen.type-signature-of-step (V4128 V4129 V4130) (do (shen.incinfs) (unify! V4128 (cons symbol (cons --> (cons boolean ()))) V4129 V4130)))

(defun shen.type-signature-of-stinput (V4138 V4139 V4140) (do (shen.incinfs) (unify! V4138 (cons --> (cons (cons stream (cons in ())) ())) V4139 V4140)))

(defun shen.type-signature-of-sterror (V4148 V4149 V4150) (do (shen.incinfs) (unify! V4148 (cons --> (cons (cons stream (cons out ())) ())) V4149 V4150)))

(defun shen.type-signature-of-stoutput (V4158 V4159 V4160) (do (shen.incinfs) (unify! V4158 (cons --> (cons (cons stream (cons out ())) ())) V4159 V4160)))

(defun shen.type-signature-of-string? (V4168 V4169 V4170) (let A (shen.newpv V4169) (do (shen.incinfs) (unify! V4168 (cons A (cons --> (cons boolean ()))) V4169 V4170))))

(defun shen.type-signature-of-str (V4178 V4179 V4180) (let A (shen.newpv V4179) (do (shen.incinfs) (unify! V4178 (cons A (cons --> (cons string ()))) V4179 V4180))))

(defun shen.type-signature-of-string->n (V4188 V4189 V4190) (do (shen.incinfs) (unify! V4188 (cons string (cons --> (cons number ()))) V4189 V4190)))

(defun shen.type-signature-of-string->symbol (V4198 V4199 V4200) (do (shen.incinfs) (unify! V4198 (cons string (cons --> (cons symbol ()))) V4199 V4200)))

(defun shen.type-signature-of-sum (V4208 V4209 V4210) (do (shen.incinfs) (unify! V4208 (cons (cons list (cons number ())) (cons --> (cons number ()))) V4209 V4210)))

(defun shen.type-signature-of-symbol? (V4218 V4219 V4220) (let A (shen.newpv V4219) (do (shen.incinfs) (unify! V4218 (cons A (cons --> (cons boolean ()))) V4219 V4220))))

(defun shen.type-signature-of-systemf (V4228 V4229 V4230) (do (shen.incinfs) (unify! V4228 (cons symbol (cons --> (cons symbol ()))) V4229 V4230)))

(defun shen.type-signature-of-tail (V4238 V4239 V4240) (let A (shen.newpv V4239) (do (shen.incinfs) (unify! V4238 (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) V4239 V4240))))

(defun shen.type-signature-of-tlstr (V4248 V4249 V4250) (do (shen.incinfs) (unify! V4248 (cons string (cons --> (cons string ()))) V4249 V4250)))

(defun shen.type-signature-of-tlv (V4258 V4259 V4260) (let A (shen.newpv V4259) (do (shen.incinfs) (unify! V4258 (cons (cons vector (cons A ())) (cons --> (cons (cons vector (cons A ())) ()))) V4259 V4260))))

(defun shen.type-signature-of-tc (V4268 V4269 V4270) (do (shen.incinfs) (unify! V4268 (cons symbol (cons --> (cons boolean ()))) V4269 V4270)))

(defun shen.type-signature-of-tc? (V4278 V4279 V4280) (do (shen.incinfs) (unify! V4278 (cons --> (cons boolean ())) V4279 V4280)))

(defun shen.type-signature-of-thaw (V4288 V4289 V4290) (let A (shen.newpv V4289) (do (shen.incinfs) (unify! V4288 (cons (cons lazy (cons A ())) (cons --> (cons A ()))) V4289 V4290))))

(defun shen.type-signature-of-track (V4298 V4299 V4300) (do (shen.incinfs) (unify! V4298 (cons symbol (cons --> (cons symbol ()))) V4299 V4300)))

(defun shen.type-signature-of-trap-error (V4308 V4309 V4310) (let A (shen.newpv V4309) (do (shen.incinfs) (unify! V4308 (cons A (cons --> (cons (cons (cons exception (cons --> (cons A ()))) (cons --> (cons A ()))) ()))) V4309 V4310))))

(defun shen.type-signature-of-tuple? (V4318 V4319 V4320) (let A (shen.newpv V4319) (do (shen.incinfs) (unify! V4318 (cons A (cons --> (cons boolean ()))) V4319 V4320))))

(defun shen.type-signature-of-undefmacro (V4328 V4329 V4330) (do (shen.incinfs) (unify! V4328 (cons symbol (cons --> (cons symbol ()))) V4329 V4330)))

(defun shen.type-signature-of-union (V4338 V4339 V4340) (let A (shen.newpv V4339) (do (shen.incinfs) (unify! V4338 (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ()))) V4339 V4340))))

(defun shen.type-signature-of-unprofile (V4348 V4349 V4350) (let A (shen.newpv V4349) (let B (shen.newpv V4349) (do (shen.incinfs) (unify! V4348 (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ()))) V4349 V4350)))))

(defun shen.type-signature-of-untrack (V4358 V4359 V4360) (do (shen.incinfs) (unify! V4358 (cons symbol (cons --> (cons symbol ()))) V4359 V4360)))

(defun shen.type-signature-of-unspecialise (V4368 V4369 V4370) (do (shen.incinfs) (unify! V4368 (cons symbol (cons --> (cons symbol ()))) V4369 V4370)))

(defun shen.type-signature-of-variable? (V4378 V4379 V4380) (let A (shen.newpv V4379) (do (shen.incinfs) (unify! V4378 (cons A (cons --> (cons boolean ()))) V4379 V4380))))

(defun shen.type-signature-of-vector? (V4388 V4389 V4390) (let A (shen.newpv V4389) (do (shen.incinfs) (unify! V4388 (cons A (cons --> (cons boolean ()))) V4389 V4390))))

(defun shen.type-signature-of-version (V4398 V4399 V4400) (do (shen.incinfs) (unify! V4398 (cons --> (cons string ())) V4399 V4400)))

(defun shen.type-signature-of-write-to-file (V4408 V4409 V4410) (let A (shen.newpv V4409) (do (shen.incinfs) (unify! V4408 (cons string (cons --> (cons (cons A (cons --> (cons A ()))) ()))) V4409 V4410))))

(defun shen.type-signature-of-write-byte (V4418 V4419 V4420) (do (shen.incinfs) (unify! V4418 (cons number (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons number ()))) ()))) V4419 V4420)))

(defun shen.type-signature-of-y-or-n? (V4428 V4429 V4430) (do (shen.incinfs) (unify! V4428 (cons string (cons --> (cons boolean ()))) V4429 V4430)))

(defun shen.type-signature-of-> (V4438 V4439 V4440) (do (shen.incinfs) (unify! V4438 (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))) V4439 V4440)))

(defun shen.type-signature-of-< (V4448 V4449 V4450) (do (shen.incinfs) (unify! V4448 (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))) V4449 V4450)))

(defun shen.type-signature-of->= (V4458 V4459 V4460) (do (shen.incinfs) (unify! V4458 (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))) V4459 V4460)))

(defun shen.type-signature-of-<= (V4468 V4469 V4470) (do (shen.incinfs) (unify! V4468 (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ()))) V4469 V4470)))

(defun shen.type-signature-of-= (V4478 V4479 V4480) (let A (shen.newpv V4479) (do (shen.incinfs) (unify! V4478 (cons A (cons --> (cons (cons A (cons --> (cons boolean ()))) ()))) V4479 V4480))))

(defun shen.type-signature-of-+ (V4488 V4489 V4490) (do (shen.incinfs) (unify! V4488 (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ()))) V4489 V4490)))

(defun shen.type-signature-of-/ (V4498 V4499 V4500) (do (shen.incinfs) (unify! V4498 (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ()))) V4499 V4500)))

(defun shen.type-signature-of-- (V4508 V4509 V4510) (do (shen.incinfs) (unify! V4508 (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ()))) V4509 V4510)))

(defun shen.type-signature-of-* (V4518 V4519 V4520) (do (shen.incinfs) (unify! V4518 (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ()))) V4519 V4520)))

(defun shen.type-signature-of-== (V4528 V4529 V4530) (let A (shen.newpv V4529) (let B (shen.newpv V4529) (do (shen.incinfs) (unify! V4528 (cons A (cons --> (cons (cons B (cons --> (cons boolean ()))) ()))) V4529 V4530)))))



