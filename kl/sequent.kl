"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.datatype-error (V1664) (cond ((and (cons? V1664) (and (cons? (tl V1664)) (= () (tl (tl V1664))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V1664)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V1666) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V1666) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1666) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V1668) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V1668) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V1668) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V1670) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V1670) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1670) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V1674) (let YaccParse (if (and (cons? (hd V1674)) (= if (shen.hdhd V1674))) (let NewStream1671 (shen.pair (shen.tlhd V1674) (shen.hdtl V1674)) (let Parse_shen.<expr> (shen.<expr> NewStream1671) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail)))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V1674)) (= let (shen.hdhd V1674))) (let NewStream1672 (shen.pair (shen.tlhd V1674) (shen.hdtl V1674)) (let Parse_shen.<variable?> (shen.<variable?> NewStream1672) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail)))) (fail)) YaccParse)))

(defun shen.<variable?> (V1676) (if (cons? (hd V1676)) (let Parse_X (shen.hdhd V1676) (if (variable? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V1676) (shen.hdtl V1676))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V1678) (if (cons? (hd V1678)) (let Parse_X (shen.hdhd V1678) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (shen.tlhd V1678) (shen.hdtl V1678))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V1680) (cond ((and (cons? V1680) (and (cons? (tl V1680)) (and (cons? (tl (tl V1680))) (and (= () (tl (tl (tl V1680)))) (= (hd (tl V1680)) bar!))))) (cons (hd V1680) (hd (tl (tl V1680))))) ((cons? V1680) (cons (shen.remove-bar (hd V1680)) (shen.remove-bar (tl V1680)))) (true V1680)))

(defun shen.<premises> (V1682) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V1682) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1682) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V1684) (if (cons? (hd V1684)) (let Parse_X (shen.hdhd V1684) (if (= Parse_X ;) (shen.pair (hd (shen.pair (shen.tlhd V1684) (shen.hdtl V1684))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V1688) (let YaccParse (if (and (cons? (hd V1688)) (= ! (shen.hdhd V1688))) (let NewStream1685 (shen.pair (shen.tlhd V1688) (shen.hdtl V1688)) (shen.pair (hd NewStream1685) !)) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V1688) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (shen.hdhd Parse_shen.<formulae>))) (let NewStream1686 (shen.pair (shen.tlhd Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formulae>)) (let Parse_shen.<formula> (shen.<formula> NewStream1686) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V1688) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V1691) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V1691) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (shen.hdhd Parse_shen.<formulae>))) (let NewStream1689 (shen.pair (shen.tlhd Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formulae>)) (let Parse_shen.<formula> (shen.<formula> NewStream1689) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V1691) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V1694 V1695) (@p V1694 V1695))

(defun shen.<formulae> (V1697) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V1697) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V1697) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1697) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V1699) (if (cons? (hd V1699)) (let Parse_X (shen.hdhd V1699) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (shen.tlhd V1699) (shen.hdtl V1699))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V1702) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V1702) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (shen.hdhd Parse_shen.<expr>))) (let NewStream1700 (shen.pair (shen.tlhd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (let Parse_shen.<type> (shen.<type> NewStream1700) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V1702) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V1704) (let Parse_shen.<expr> (shen.<expr> V1704) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V1706) (if (cons? (hd V1706)) (let Parse_X (shen.hdhd V1706) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V1706) (shen.hdtl V1706))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V1708) (if (cons? (hd V1708)) (let Parse_X (shen.hdhd V1708) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V1708) (shen.hdtl V1708))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V1710) (and (symbol? V1710) (shen.sh? (str V1710))))

(defun shen.sh? (V1712) (cond ((= "_" V1712) true) (true (and (= (pos V1712 0) "_") (shen.sh? (tlstr V1712))))))

(defun shen.doubleunderline? (V1714) (and (symbol? V1714) (shen.dh? (str V1714))))

(defun shen.dh? (V1716) (cond ((= "=" V1716) true) (true (and (= (pos V1716 0) "=") (shen.dh? (tlstr V1716))))))

(defun shen.process-datatype (V1719 V1720) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V1719 V1720))))

(defun shen.remember-datatype (V1726) (cond ((cons? V1726) (do (set shen.*datatypes* (adjoin (hd V1726) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V1726) (value shen.*alldatatypes*))) (hd V1726)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V1731 V1732) (cond ((= () V1732) ()) ((and (cons? V1732) (and (tuple? (hd V1732)) (= shen.single (fst (hd V1732))))) (cons (shen.rule->horn-clause V1731 (snd (hd V1732))) (shen.rules->horn-clauses V1731 (tl V1732)))) ((and (cons? V1732) (and (tuple? (hd V1732)) (= shen.double (fst (hd V1732))))) (shen.rules->horn-clauses V1731 (append (shen.double->singles (snd (hd V1732))) (tl V1732)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V1734) (cons (shen.right-rule V1734) (cons (shen.left-rule V1734) ())))

(defun shen.right-rule (V1736) (@p shen.single V1736))

(defun shen.left-rule (V1738) (cond ((and (cons? V1738) (and (cons? (tl V1738)) (and (cons? (tl (tl V1738))) (and (tuple? (hd (tl (tl V1738)))) (and (= () (fst (hd (tl (tl V1738))))) (= () (tl (tl (tl V1738))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V1738)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V1738))) Q) ()) (@p shen.single (cons (hd V1738) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V1744) (cond ((and (tuple? V1744) (= () (fst V1744))) (snd V1744)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V1747 V1748) (cond ((and (cons? V1748) (and (cons? (tl V1748)) (and (cons? (tl (tl V1748))) (and (tuple? (hd (tl (tl V1748)))) (= () (tl (tl (tl V1748)))))))) (cons (shen.rule->horn-clause-head V1747 (snd (hd (tl (tl V1748))))) (cons :- (cons (shen.rule->horn-clause-body (hd V1748) (hd (tl V1748)) (fst (hd (tl (tl V1748))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V1751 V1752) (cons V1751 (cons (shen.mode-ify V1752) (cons Context_1957 ()))))

(defun shen.mode-ify (V1754) (cond ((and (cons? V1754) (and (cons? (tl V1754)) (and (= : (hd (tl V1754))) (and (cons? (tl (tl V1754))) (= () (tl (tl (tl V1754)))))))) (cons mode (cons (cons (hd V1754) (cons : (cons (cons mode (cons (hd (tl (tl V1754))) (cons + ()))) ()))) (cons - ())))) (true V1754)))

(defun shen.rule->horn-clause-body (V1758 V1759 V1760) (let Variables (map (lambda X (shen.extract_vars X)) V1760) (let Predicates (map (lambda X (gensym shen.cl)) V1760) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V1760 Variables) (let SideLiterals (shen.construct-side-literals V1758) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V1760))) V1759) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V1769 V1770 V1771 V1772) (cond ((and (= () V1769) (= () V1770)) ()) (true (shen.csl-help V1769 V1770 V1771 V1772))))

(defun shen.csl-help (V1779 V1780 V1781 V1782) (cond ((and (= () V1779) (= () V1780)) (cons (cons bind (cons ContextOut_1957 (cons V1781 ()))) ())) ((and (cons? V1779) (cons? V1780)) (cons (cons (hd V1779) (cons V1781 (cons V1782 (hd V1780)))) (shen.csl-help (tl V1779) (tl V1780) V1782 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V1786 V1787 V1788) (cond ((and (= () V1786) (and (= () V1787) (= () V1788))) shen.skip) ((and (cons? V1786) (and (cons? V1787) (cons? V1788))) (do (shen.construct-search-clause (hd V1786) (hd V1787) (hd V1788)) (shen.construct-search-clauses (tl V1786) (tl V1787) (tl V1788)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V1792 V1793 V1794) (shen.s-prolog (cons (shen.construct-base-search-clause V1792 V1793 V1794) (cons (shen.construct-recursive-search-clause V1792 V1793 V1794) ()))))

(defun shen.construct-base-search-clause (V1798 V1799 V1800) (cons (cons V1798 (cons (cons (shen.mode-ify V1799) In_1957) (cons In_1957 V1800))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V1804 V1805 V1806) (cons (cons V1804 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V1806))) (cons :- (cons (cons (cons V1804 (cons Assumptions_1957 (cons Out_1957 V1806))) ()) ()))))

(defun shen.construct-side-literals (V1812) (cond ((= () V1812) ()) ((and (cons? V1812) (and (cons? (hd V1812)) (and (= if (hd (hd V1812))) (and (cons? (tl (hd V1812))) (= () (tl (tl (hd V1812)))))))) (cons (cons when (tl (hd V1812))) (shen.construct-side-literals (tl V1812)))) ((and (cons? V1812) (and (cons? (hd V1812)) (and (= let (hd (hd V1812))) (and (cons? (tl (hd V1812))) (and (cons? (tl (tl (hd V1812)))) (= () (tl (tl (tl (hd V1812)))))))))) (cons (cons is (tl (hd V1812))) (shen.construct-side-literals (tl V1812)))) ((cons? V1812) (shen.construct-side-literals (tl V1812))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V1819 V1820) (cond ((tuple? V1819) (cons shen.t* (cons (shen.recursive_cons_form (snd V1819)) (cons (shen.construct-context V1820 (fst V1819)) ())))) ((= ! V1819) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V1823 V1824) (cond ((and (= true V1823) (= () V1824)) Context_1957) ((and (= false V1823) (= () V1824)) ContextOut_1957) ((cons? V1824) (cons cons (cons (shen.recursive_cons_form (hd V1824)) (cons (shen.construct-context V1823 (tl V1824)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V1826) (cond ((cons? V1826) (cons cons (cons (shen.recursive_cons_form (hd V1826)) (cons (shen.recursive_cons_form (tl V1826)) ())))) (true V1826)))

(defun preclude (V1828) (shen.preclude-h (map (lambda X (shen.intern-type X)) V1828)))

(defun shen.preclude-h (V1830) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V1830)) (value shen.*datatypes*)))

(defun include (V1832) (shen.include-h (map (lambda X (shen.intern-type X)) V1832)))

(defun shen.include-h (V1834) (let ValidTypes (intersection V1834 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V1836) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V1836))))

(defun include-all-but (V1838) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V1838))))

(defun shen.synonyms-help (V1844) (cond ((= () V1844) (shen.update-demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V1844) (cons? (tl V1844))) (let Vs (difference (shen.extract_vars (hd (tl V1844))) (shen.extract_vars (hd V1844))) (if (empty? Vs) (do (shen.pushnew (cons (hd V1844) (cons (hd (tl V1844)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V1844)))) (shen.free_variable_warnings (hd (tl V1844)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V1847 V1848) (if (element? V1847 (value V1848)) (value V1848) (set V1848 (cons V1847 (value V1848)))))

(defun shen.demod-rule (V1850) (cond ((and (cons? V1850) (and (cons? (tl V1850)) (= () (tl (tl V1850))))) (cons (shen.rcons_form (hd V1850)) (cons -> (cons (shen.rcons_form (hd (tl V1850))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.lambda-of-defun (V1856) (cond ((and (cons? V1856) (and (= defun (hd V1856)) (and (cons? (tl V1856)) (and (cons? (tl (tl V1856))) (and (cons? (hd (tl (tl V1856)))) (and (= () (tl (hd (tl (tl V1856))))) (and (cons? (tl (tl (tl V1856)))) (= () (tl (tl (tl (tl V1856)))))))))))) (eval (cons /. (cons (hd (hd (tl (tl V1856)))) (tl (tl (tl V1856))))))) (true (shen.f_error shen.lambda-of-defun))))

(defun shen.update-demodulation-function (V1859 V1860) (do (tc -) (do (set shen.*demodulation-function* (shen.lambda-of-defun (shen.elim-def (cons define (cons shen.demod (append V1860 (shen.default-rule))))))) (do (if V1859 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



