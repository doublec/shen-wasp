"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.dict (V2284) (cond ((< V2284 1) (simple-error (cn "invalid initial dict size: " (shen.app V2284 "" shen.s)))) (true (let D (absvector (+ 3 V2284)) (let Tag (address-> D 0 shen.dictionary) (let Capacity (address-> D 1 V2284) (let Count (address-> D 2 0) (let Fill (shen.fillvector D 3 (+ 2 V2284) ()) D))))))))

(defun shen.dict? (V2286) (and (absvector? V2286) (= (trap-error (<-address V2286 0) (lambda E shen.not-dictionary)) shen.dictionary)))

(defun shen.dict-capacity (V2288) (<-address V2288 1))

(defun shen.dict-count (V2290) (<-address V2290 2))

(defun shen.dict-count-> (V2293 V2294) (address-> V2293 2 V2294))

(defun shen.<-dict-bucket (V2297 V2298) (<-address V2297 (+ 3 V2298)))

(defun shen.dict-bucket-> (V2302 V2303 V2304) (address-> V2302 (+ 3 V2303) V2304))

(defun shen.dict-update-count (V2308 V2309 V2310) (let Diff (- (length V2310) (length V2309)) (shen.dict-count-> V2308 (+ Diff (shen.dict-count V2308)))))

(defun shen.dict-> (V2314 V2315 V2316) (let N (hash V2315 (shen.dict-capacity V2314)) (let Bucket (shen.<-dict-bucket V2314 N) (let NewBucket (shen.assoc-set V2315 V2316 Bucket) (let Change (shen.dict-bucket-> V2314 N NewBucket) (let Count (shen.dict-update-count V2314 Bucket NewBucket) V2316))))))

(defun shen.<-dict (V2319 V2320) (let N (hash V2320 (shen.dict-capacity V2319)) (let Bucket (shen.<-dict-bucket V2319 N) (let Result (assoc V2320 Bucket) (if (empty? Result) (simple-error (cn "value " (shen.app V2320 " not found in dict
" shen.a))) (tl Result))))))

(defun shen.dict-rm (V2323 V2324) (let N (hash V2324 (shen.dict-capacity V2323)) (let Bucket (shen.<-dict-bucket V2323 N) (let NewBucket (shen.assoc-rm V2324 Bucket) (let Change (shen.dict-bucket-> V2323 N NewBucket) (let Count (shen.dict-update-count V2323 Bucket NewBucket) V2324))))))

(defun shen.dict-fold (V2328 V2329 V2330) (let Limit (shen.dict-capacity V2329) (shen.dict-fold-h V2328 V2329 V2330 0 Limit)))

(defun shen.dict-fold-h (V2337 V2338 V2339 V2340 V2341) (cond ((= V2341 V2340) V2339) (true (let B (shen.<-dict-bucket V2338 V2340) (let Acc (shen.bucket-fold V2337 B V2339) (shen.dict-fold-h V2337 V2338 Acc (+ 1 V2340) V2341))))))

(defun shen.bucket-fold (V2345 V2346 V2347) (cond ((= () V2346) V2347) ((and (cons? V2346) (cons? (hd V2346))) (V2345 (hd (hd V2346)) (tl (hd V2346)) (shen.bucket-fold V2345 (tl V2346) V2347))) (true (shen.f_error shen.bucket-fold))))

(defun shen.dict-keys (V2349) (shen.dict-fold (lambda K (lambda _ (lambda Acc (cons K Acc)))) V2349 ()))

(defun shen.dict-values (V2351) (shen.dict-fold (lambda _ (lambda V (lambda Acc (cons V Acc)))) V2351 ()))



