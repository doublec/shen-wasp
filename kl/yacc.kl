"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.yacc (V4666) (cond ((and (cons? V4666) (and (= defcc (hd V4666)) (cons? (tl V4666)))) (shen.yacc->shen (hd (tl V4666)) (tl (tl V4666)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V4669 V4670) (let CCRules (shen.split_cc_rules true V4670 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V4669 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V4672) (cond ((> (occurrences kill V4672) 0) (cons trap-error (cons V4672 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V4672)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V4674) (let String (error-to-string V4674) (if (= String "yacc kill") (fail) V4674)))

(defun shen.split_cc_rules (V4680 V4681 V4682) (cond ((and (= () V4681) (= () V4682)) ()) ((= () V4681) (cons (shen.split_cc_rule V4680 (reverse V4682) ()) ())) ((and (cons? V4681) (= ; (hd V4681))) (cons (shen.split_cc_rule V4680 (reverse V4682) ()) (shen.split_cc_rules V4680 (tl V4681) ()))) ((cons? V4681) (shen.split_cc_rules V4680 (tl V4681) (cons (hd V4681) V4682))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V4690 V4691 V4692) (cond ((and (cons? V4691) (and (= := (hd V4691)) (and (cons? (tl V4691)) (= () (tl (tl V4691)))))) (cons (reverse V4692) (tl V4691))) ((and (cons? V4691) (and (= := (hd V4691)) (and (cons? (tl V4691)) (and (cons? (tl (tl V4691))) (and (= where (hd (tl (tl V4691)))) (and (cons? (tl (tl (tl V4691)))) (= () (tl (tl (tl (tl V4691))))))))))) (cons (reverse V4692) (cons (cons where (cons (hd (tl (tl (tl V4691)))) (cons (hd (tl V4691)) ()))) ()))) ((= () V4691) (do (shen.semantic-completion-warning V4690 V4692) (shen.split_cc_rule V4690 (cons := (cons (shen.default_semantics (reverse V4692)) ())) V4692))) ((cons? V4691) (shen.split_cc_rule V4690 (tl V4691) (cons (hd V4691) V4692))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V4703 V4704) (cond ((= true V4703) (do (shen.prhush "warning: " (stoutput)) (do (shen.for-each (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V4704)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V4706) (cond ((= () V4706) ()) ((and (cons? V4706) (and (= () (tl V4706)) (shen.grammar_symbol? (hd V4706)))) (hd V4706)) ((and (cons? V4706) (shen.grammar_symbol? (hd V4706))) (cons append (cons (hd V4706) (cons (shen.default_semantics (tl V4706)) ())))) ((cons? V4706) (cons cons (cons (hd V4706) (cons (shen.default_semantics (tl V4706)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V4708) (and (symbol? V4708) (let Cs (shen.strip-pathname (explode V4708)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V4710) (cond ((and (cons? V4710) (= () (tl V4710))) (hd V4710)) ((cons? V4710) (let P YaccParse (cons let (cons P (cons (hd V4710) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V4710)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V4712) (cond ((and (cons? V4712) (and (cons? (tl V4712)) (= () (tl (tl V4712))))) (shen.syntax (hd V4712) Stream (hd (tl V4712)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V4716 V4717 V4718) (cond ((and (= () V4716) (and (cons? V4718) (and (= where (hd V4718)) (and (cons? (tl V4718)) (and (cons? (tl (tl V4718))) (= () (tl (tl (tl V4718))))))))) (cons if (cons (shen.semantics (hd (tl V4718))) (cons (cons shen.pair (cons (cons hd (cons V4717 ())) (cons (shen.semantics (hd (tl (tl V4718)))) ()))) (cons (cons fail ()) ()))))) ((= () V4716) (cons shen.pair (cons (cons hd (cons V4717 ())) (cons (shen.semantics V4718) ())))) ((cons? V4716) (if (shen.grammar_symbol? (hd V4716)) (shen.recursive_descent V4716 V4717 V4718) (if (variable? (hd V4716)) (shen.variable-match V4716 V4717 V4718) (if (shen.jump_stream? (hd V4716)) (shen.jump_stream V4716 V4717 V4718) (if (shen.terminal? (hd V4716)) (shen.check_stream V4716 V4717 V4718) (if (cons? (hd V4716)) (shen.list-stream (shen.decons (hd V4716)) (tl V4716) V4717 V4718) (simple-error (shen.app (hd V4716) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V4723 V4724 V4725 V4726) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4725 ())) ())) (cons (cons cons? (cons (cons shen.hdhd (cons V4725 ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V4724 (cons shen.pair (cons (cons shen.tlhd (cons V4725 ())) (cons (cons shen.hdtl (cons V4725 ())) ()))) V4726) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V4723 (cons shen.pair (cons (cons shen.hdhd (cons V4725 ())) (cons (cons shen.hdtl (cons V4725 ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V4728) (cond ((and (cons? V4728) (and (= cons (hd V4728)) (and (cons? (tl V4728)) (and (cons? (tl (tl V4728))) (and (= () (hd (tl (tl V4728)))) (= () (tl (tl (tl V4728))))))))) (cons (hd (tl V4728)) ())) ((and (cons? V4728) (and (= cons (hd V4728)) (and (cons? (tl V4728)) (and (cons? (tl (tl V4728))) (= () (tl (tl (tl V4728)))))))) (cons (hd (tl V4728)) (shen.decons (hd (tl (tl V4728)))))) (true V4728)))

(defun shen.insert-runon (V4743 V4744 V4745) (cond ((and (cons? V4745) (and (= shen.pair (hd V4745)) (and (cons? (tl V4745)) (and (cons? (tl (tl V4745))) (and (= () (tl (tl (tl V4745)))) (= (hd (tl (tl V4745))) V4744)))))) V4743) ((cons? V4745) (map (lambda Z (shen.insert-runon V4743 V4744 Z)) V4745)) (true V4745)))

(defun shen.strip-pathname (V4751) (cond ((not (element? "." V4751)) V4751) ((cons? V4751) (shen.strip-pathname (tl V4751))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V4755 V4756 V4757) (cond ((cons? V4755) (let Test (cons (hd V4755) (cons V4756 ())) (let Action (shen.syntax (tl V4755) (concat Parse_ (hd V4755)) V4757) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V4755)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V4755)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V4761 V4762 V4763) (cond ((cons? V4761) (let Test (cons cons? (cons (cons hd (cons V4762 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V4761)) (cons (cons shen.hdhd (cons V4762 ())) (cons (shen.syntax (tl V4761) (cons shen.pair (cons (cons shen.tlhd (cons V4762 ())) (cons (cons shen.hdtl (cons V4762 ())) ()))) V4763) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V4773) (cond ((cons? V4773) false) ((variable? V4773) false) (true true)))

(defun shen.jump_stream? (V4779) (cond ((= V4779 _) true) (true false)))

(defun shen.check_stream (V4783 V4784 V4785) (cond ((cons? V4783) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4784 ())) ())) (cons (cons = (cons (hd V4783) (cons (cons shen.hdhd (cons V4784 ())) ()))) ()))) (let NewStr (gensym NewStream) (let Action (cons let (cons NewStr (cons (cons shen.pair (cons (cons shen.tlhd (cons V4784 ())) (cons (cons shen.hdtl (cons V4784 ())) ()))) (cons (shen.syntax (tl V4783) NewStr V4785) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ()))))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V4789 V4790 V4791) (cond ((cons? V4789) (let Test (cons cons? (cons (cons hd (cons V4790 ())) ())) (let Action (shen.syntax (tl V4789) (cons shen.pair (cons (cons shen.tlhd (cons V4790 ())) (cons (cons shen.hdtl (cons V4790 ())) ()))) V4791) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V4793) (cond ((= () V4793) ()) ((shen.grammar_symbol? V4793) (cons shen.hdtl (cons (concat Parse_ V4793) ()))) ((variable? V4793) (concat Parse_ V4793)) ((cons? V4793) (map (lambda Z (shen.semantics Z)) V4793)) (true V4793)))

(defun shen.pair (V4796 V4797) (cons V4796 (cons V4797 ())))

(defun shen.hdtl (V4799) (hd (tl V4799)))

(defun shen.hdhd (V4801) (hd (hd V4801)))

(defun shen.tlhd (V4803) (tl (hd V4803)))

(defun shen.snd-or-fail (V4811) (cond ((and (cons? V4811) (and (cons? (tl V4811)) (= () (tl (tl V4811))))) (hd (tl V4811))) (true (fail))))

(defun fail () shen.fail!)(defun <!> (V4819) (cond ((and (cons? V4819) (and (cons? (tl V4819)) (= () (tl (tl V4819))))) (cons () (cons (hd V4819) ()))) (true (fail))))

(defun <e> (V4825) (cond ((and (cons? V4825) (and (cons? (tl V4825)) (= () (tl (tl V4825))))) (cons (hd V4825) (cons () ()))) (true (shen.f_error <e>))))



