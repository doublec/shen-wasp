"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun thaw (V1862) (V1862))

(defun eval (V1864) (let Macroexpand (shen.walk (lambda Y (macroexpand Y)) V1864) (if (shen.packaged? Macroexpand) (map (lambda Z (shen.eval-without-macros Z)) (shen.package-contents Macroexpand)) (shen.eval-without-macros Macroexpand))))

(defun shen.eval-without-macros (V1866) (eval-kl (shen.elim-def (shen.proc-input+ V1866))))

(defun shen.proc-input+ (V1868) (cond ((and (cons? V1868) (and (= input+ (hd V1868)) (and (cons? (tl V1868)) (and (cons? (tl (tl V1868))) (= () (tl (tl (tl V1868)))))))) (cons input+ (cons (shen.rcons_form (hd (tl V1868))) (tl (tl V1868))))) ((and (cons? V1868) (and (= shen.read+ (hd V1868)) (and (cons? (tl V1868)) (and (cons? (tl (tl V1868))) (= () (tl (tl (tl V1868)))))))) (cons shen.read+ (cons (shen.rcons_form (hd (tl V1868))) (tl (tl V1868))))) ((cons? V1868) (map (lambda Z (shen.proc-input+ Z)) V1868)) (true V1868)))

(defun shen.elim-def (V1870) (cond ((and (cons? V1870) (and (= define (hd V1870)) (cons? (tl V1870)))) (shen.shen->kl (hd (tl V1870)) (tl (tl V1870)))) ((and (cons? V1870) (and (= defmacro (hd V1870)) (cons? (tl V1870)))) (let Default (cons X (cons -> (cons X ()))) (let Def (shen.elim-def (cons define (cons (hd (tl V1870)) (append (tl (tl V1870)) Default)))) (let MacroAdd (shen.add-macro (hd (tl V1870))) Def)))) ((and (cons? V1870) (and (= defcc (hd V1870)) (cons? (tl V1870)))) (shen.elim-def (shen.yacc V1870))) ((cons? V1870) (map (lambda Z (shen.elim-def Z)) V1870)) (true V1870)))

(defun shen.add-macro (V1872) (let MacroReg (value shen.*macroreg*) (let NewMacroReg (set shen.*macroreg* (adjoin V1872 (value shen.*macroreg*))) (if (= MacroReg NewMacroReg) shen.skip (set *macros* (cons (function V1872) (value *macros*)))))))

(defun shen.packaged? (V1880) (cond ((and (cons? V1880) (and (= package (hd V1880)) (and (cons? (tl V1880)) (cons? (tl (tl V1880)))))) true) (true false)))

(defun external (V1882) (trap-error (get V1882 shen.external-symbols (value *property-vector*)) (lambda E (simple-error (cn "package " (shen.app V1882 " has not been used.
" shen.a))))))

(defun internal (V1884) (trap-error (get V1884 shen.internal-symbols (value *property-vector*)) (lambda E (simple-error (cn "package " (shen.app V1884 " has not been used.
" shen.a))))))

(defun shen.package-contents (V1888) (cond ((and (cons? V1888) (and (= package (hd V1888)) (and (cons? (tl V1888)) (and (= null (hd (tl V1888))) (cons? (tl (tl V1888))))))) (tl (tl (tl V1888)))) ((and (cons? V1888) (and (= package (hd V1888)) (and (cons? (tl V1888)) (cons? (tl (tl V1888)))))) (let PackageNameDot (intern (cn (str (hd (tl V1888))) ".")) (let ExpPackageNameDot (explode PackageNameDot) (shen.packageh (hd (tl V1888)) (hd (tl (tl V1888))) (tl (tl (tl V1888))) ExpPackageNameDot)))) (true (shen.f_error shen.package-contents))))

(defun shen.walk (V1891 V1892) (cond ((cons? V1892) (V1891 (map (lambda Z (shen.walk V1891 Z)) V1892))) (true (V1891 V1892))))

(defun compile (V1896 V1897 V1898) (let O (V1896 (cons V1897 (cons () ()))) (if (or (= (fail) O) (not (empty? (hd O)))) (V1898 O) (shen.hdtl O))))

(defun fail-if (V1901 V1902) (if (V1901 V1902) (fail) V1902))

(defun @s (V1905 V1906) (cn V1905 V1906))

(defun tc? () (value shen.*tc*))

(defun ps (V1908) (trap-error (get V1908 shen.source (value *property-vector*)) (lambda E (simple-error (shen.app V1908 " not found.
" shen.a)))))

(defun stinput () (value *stinput*))

(defun vector (V1910) (let Vector (absvector (+ V1910 1)) (let ZeroStamp (address-> Vector 0 V1910) (let Standard (if (= V1910 0) ZeroStamp (shen.fillvector ZeroStamp 1 V1910 (fail))) Standard))))

(defun shen.fillvector (V1916 V1917 V1918 V1919) (cond ((= V1918 V1917) (address-> V1916 V1918 V1919)) (true (shen.fillvector (address-> V1916 V1917 V1919) (+ 1 V1917) V1918 V1919))))

(defun vector? (V1921) (and (absvector? V1921) (let X (trap-error (<-address V1921 0) (lambda E -1)) (and (number? X) (>= X 0)))))

(defun vector-> (V1925 V1926 V1927) (if (= V1926 0) (simple-error "cannot access 0th element of a vector
") (address-> V1925 V1926 V1927)))

(defun <-vector (V1930 V1931) (if (= V1931 0) (simple-error "cannot access 0th element of a vector
") (let VectorElement (<-address V1930 V1931) (if (= VectorElement (fail)) (simple-error "vector element not found
") VectorElement))))

(defun shen.posint? (V1933) (and (integer? V1933) (>= V1933 0)))

(defun limit (V1935) (<-address V1935 0))

(defun symbol? (V1937) (cond ((or (boolean? V1937) (or (number? V1937) (string? V1937))) false) (true (trap-error (let String (str V1937) (shen.analyse-symbol? String)) (lambda E false)))))

(defun shen.analyse-symbol? (V1939) (cond ((= "" V1939) false) ((shen.+string? V1939) (and (shen.alpha? (pos V1939 0)) (shen.alphanums? (tlstr V1939)))) (true (shen.f_error shen.analyse-symbol?))))

(defun shen.alpha? (V1941) (element? V1941 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" (cons "a" (cons "b" (cons "c" (cons "d" (cons "e" (cons "f" (cons "g" (cons "h" (cons "i" (cons "j" (cons "k" (cons "l" (cons "m" (cons "n" (cons "o" (cons "p" (cons "q" (cons "r" (cons "s" (cons "t" (cons "u" (cons "v" (cons "w" (cons "x" (cons "y" (cons "z" (cons "=" (cons "*" (cons "/" (cons "+" (cons "-" (cons "_" (cons "?" (cons "$" (cons "!" (cons "@" (cons "~" (cons ">" (cons "<" (cons "&" (cons "%" (cons "{" (cons "}" (cons ":" (cons ";" (cons "`" (cons "#" (cons "'" (cons "." ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.alphanums? (V1943) (cond ((= "" V1943) true) ((shen.+string? V1943) (and (shen.alphanum? (pos V1943 0)) (shen.alphanums? (tlstr V1943)))) (true (shen.f_error shen.alphanums?))))

(defun shen.alphanum? (V1945) (or (shen.alpha? V1945) (shen.digit? V1945)))

(defun shen.digit? (V1947) (element? V1947 (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))

(defun variable? (V1949) (cond ((or (boolean? V1949) (or (number? V1949) (string? V1949))) false) (true (trap-error (let String (str V1949) (shen.analyse-variable? String)) (lambda E false)))))

(defun shen.analyse-variable? (V1951) (cond ((shen.+string? V1951) (and (shen.uppercase? (pos V1951 0)) (shen.alphanums? (tlstr V1951)))) (true (shen.f_error shen.analyse-variable?))))

(defun shen.uppercase? (V1953) (element? V1953 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" ()))))))))))))))))))))))))))))

(defun gensym (V1955) (concat V1955 (set shen.*gensym* (+ 1 (value shen.*gensym*)))))

(defun concat (V1958 V1959) (intern (cn (str V1958) (str V1959))))

(defun @p (V1962 V1963) (let Vector (absvector 3) (let Tag (address-> Vector 0 shen.tuple) (let Fst (address-> Vector 1 V1962) (let Snd (address-> Vector 2 V1963) Vector)))))

(defun fst (V1965) (<-address V1965 1))

(defun snd (V1967) (<-address V1967 2))

(defun tuple? (V1969) (and (absvector? V1969) (= shen.tuple (trap-error (<-address V1969 0) (lambda E shen.not-tuple)))))

(defun append (V1972 V1973) (cond ((= () V1972) V1973) ((cons? V1972) (cons (hd V1972) (append (tl V1972) V1973))) (true (shen.f_error append))))

(defun @v (V1976 V1977) (let Limit (limit V1977) (let NewVector (vector (+ Limit 1)) (let X+NewVector (vector-> NewVector 1 V1976) (if (= Limit 0) X+NewVector (shen.@v-help V1977 1 Limit X+NewVector))))))

(defun shen.@v-help (V1983 V1984 V1985 V1986) (cond ((= V1985 V1984) (shen.copyfromvector V1983 V1986 V1985 (+ V1985 1))) (true (shen.@v-help V1983 (+ V1984 1) V1985 (shen.copyfromvector V1983 V1986 V1984 (+ V1984 1))))))

(defun shen.copyfromvector (V1991 V1992 V1993 V1994) (trap-error (vector-> V1992 V1994 (<-vector V1991 V1993)) (lambda E V1992)))

(defun hdv (V1996) (trap-error (<-vector V1996 1) (lambda E (simple-error (cn "hdv needs a non-empty vector as an argument; not " (shen.app V1996 "
" shen.s))))))

(defun tlv (V1998) (let Limit (limit V1998) (if (= Limit 0) (simple-error "cannot take the tail of the empty vector
") (if (= Limit 1) (vector 0) (let NewVector (vector (- Limit 1)) (shen.tlv-help V1998 2 Limit (vector (- Limit 1))))))))

(defun shen.tlv-help (V2004 V2005 V2006 V2007) (cond ((= V2006 V2005) (shen.copyfromvector V2004 V2007 V2006 (- V2006 1))) (true (shen.tlv-help V2004 (+ V2005 1) V2006 (shen.copyfromvector V2004 V2007 V2005 (- V2005 1))))))

(defun assoc (V2019 V2020) (cond ((= () V2020) ()) ((and (cons? V2020) (and (cons? (hd V2020)) (= (hd (hd V2020)) V2019))) (hd V2020)) ((cons? V2020) (assoc V2019 (tl V2020))) (true (shen.f_error assoc))))

(defun shen.assoc-set (V2027 V2028 V2029) (cond ((= () V2029) (cons (cons V2027 V2028) ())) ((and (cons? V2029) (and (cons? (hd V2029)) (= (hd (hd V2029)) V2027))) (cons (cons (hd (hd V2029)) V2028) (tl V2029))) ((cons? V2029) (cons (hd V2029) (shen.assoc-set V2027 V2028 (tl V2029)))) (true (shen.f_error shen.assoc-set))))

(defun shen.assoc-rm (V2035 V2036) (cond ((= () V2036) ()) ((and (cons? V2036) (and (cons? (hd V2036)) (= (hd (hd V2036)) V2035))) (tl V2036)) ((cons? V2036) (cons (hd V2036) (shen.assoc-rm V2035 (tl V2036)))) (true (shen.f_error shen.assoc-rm))))

(defun boolean? (V2042) (cond ((= true V2042) true) ((= false V2042) true) (true false)))

(defun nl (V2044) (cond ((= 0 V2044) 0) (true (do (shen.prhush "
" (stoutput)) (nl (- V2044 1))))))

(defun difference (V2049 V2050) (cond ((= () V2049) ()) ((cons? V2049) (if (element? (hd V2049) V2050) (difference (tl V2049) V2050) (cons (hd V2049) (difference (tl V2049) V2050)))) (true (shen.f_error difference))))

(defun do (V2053 V2054) V2054)

(defun element? (V2066 V2067) (cond ((= () V2067) false) ((and (cons? V2067) (= (hd V2067) V2066)) true) ((cons? V2067) (element? V2066 (tl V2067))) (true (shen.f_error element?))))

(defun empty? (V2073) (cond ((= () V2073) true) (true false)))

(defun fix (V2076 V2077) (shen.fix-help V2076 V2077 (V2076 V2077)))

(defun shen.fix-help (V2088 V2089 V2090) (cond ((= V2090 V2089) V2090) (true (shen.fix-help V2088 V2090 (V2088 V2090)))))

(defun put (V2095 V2096 V2097 V2098) (let Curr (trap-error (shen.<-dict V2098 V2095) (lambda E ())) (let Added (shen.assoc-set V2096 V2097 Curr) (let Update (shen.dict-> V2098 V2095 Added) V2097))))

(defun unput (V2102 V2103 V2104) (let Curr (trap-error (shen.<-dict V2104 V2102) (lambda E ())) (let Removed (shen.assoc-rm V2103 Curr) (let Update (shen.dict-> V2104 V2102 Removed) V2102))))

(defun get (V2108 V2109 V2110) (let Entry (trap-error (shen.<-dict V2110 V2108) (lambda E ())) (let Result (assoc V2109 Entry) (if (empty? Result) (simple-error "value not found
") (tl Result)))))

(defun hash (V2113 V2114) (shen.mod (sum (map (lambda X (string->n X)) (explode V2113))) V2114))

(defun shen.mod (V2117 V2118) (shen.modh V2117 (shen.multiples V2117 (cons V2118 ()))))

(defun shen.multiples (V2121 V2122) (cond ((and (cons? V2122) (> (hd V2122) V2121)) (tl V2122)) ((cons? V2122) (shen.multiples V2121 (cons (* 2 (hd V2122)) V2122))) (true (shen.f_error shen.multiples))))

(defun shen.modh (V2127 V2128) (cond ((= 0 V2127) 0) ((= () V2128) V2127) ((and (cons? V2128) (> (hd V2128) V2127)) (if (empty? (tl V2128)) V2127 (shen.modh V2127 (tl V2128)))) ((cons? V2128) (shen.modh (- V2127 (hd V2128)) V2128)) (true (shen.f_error shen.modh))))

(defun sum (V2130) (cond ((= () V2130) 0) ((cons? V2130) (+ (hd V2130) (sum (tl V2130)))) (true (shen.f_error sum))))

(defun head (V2138) (cond ((cons? V2138) (hd V2138)) (true (simple-error "head expects a non-empty list"))))

(defun tail (V2146) (cond ((cons? V2146) (tl V2146)) (true (simple-error "tail expects a non-empty list"))))

(defun hdstr (V2148) (pos V2148 0))

(defun intersection (V2153 V2154) (cond ((= () V2153) ()) ((cons? V2153) (if (element? (hd V2153) V2154) (cons (hd V2153) (intersection (tl V2153) V2154)) (intersection (tl V2153) V2154))) (true (shen.f_error intersection))))

(defun reverse (V2156) (shen.reverse_help V2156 ()))

(defun shen.reverse_help (V2159 V2160) (cond ((= () V2159) V2160) ((cons? V2159) (shen.reverse_help (tl V2159) (cons (hd V2159) V2160))) (true (shen.f_error shen.reverse_help))))

(defun union (V2163 V2164) (cond ((= () V2163) V2164) ((cons? V2163) (if (element? (hd V2163) V2164) (union (tl V2163) V2164) (cons (hd V2163) (union (tl V2163) V2164)))) (true (shen.f_error union))))

(defun y-or-n? (V2166) (let Message (shen.prhush (shen.proc-nl V2166) (stoutput)) (let Y-or-N (shen.prhush " (y/n) " (stoutput)) (let Input (shen.app (read (stinput)) "" shen.s) (if (= "y" Input) true (if (= "n" Input) false (do (shen.prhush "please answer y or n
" (stoutput)) (y-or-n? V2166))))))))

(defun not (V2168) (if V2168 false true))

(defun subst (V2181 V2182 V2183) (cond ((= V2183 V2182) V2181) ((cons? V2183) (map (lambda W (subst V2181 V2182 W)) V2183)) (true V2183)))

(defun explode (V2185) (shen.explode-h (shen.app V2185 "" shen.a)))

(defun shen.explode-h (V2187) (cond ((= "" V2187) ()) ((shen.+string? V2187) (cons (pos V2187 0) (shen.explode-h (tlstr V2187)))) (true (shen.f_error shen.explode-h))))

(defun cd (V2189) (set *home-directory* (if (= V2189 "") "" (shen.app V2189 "/" shen.a))))

(defun shen.for-each (V2192 V2193) (cond ((= () V2193) true) ((cons? V2193) (let _ (V2192 (hd V2193)) (shen.for-each V2192 (tl V2193)))) (true (shen.f_error shen.for-each))))

(defun map (V2198 V2199) (cond ((= () V2199) ()) ((cons? V2199) (cons (V2198 (hd V2199)) (map V2198 (tl V2199)))) (true (V2198 V2199))))

(defun length (V2201) (shen.length-h V2201 0))

(defun shen.length-h (V2204 V2205) (cond ((= () V2204) V2205) (true (shen.length-h (tl V2204) (+ V2205 1)))))

(defun occurrences (V2217 V2218) (cond ((= V2218 V2217) 1) ((cons? V2218) (+ (occurrences V2217 (hd V2218)) (occurrences V2217 (tl V2218)))) (true 0)))

(defun nth (V2225 V2226) (cond ((and (= 1 V2225) (cons? V2226)) (hd V2226)) ((cons? V2226) (nth (- V2225 1) (tl V2226))) (true (simple-error (cn "nth applied to " (shen.app V2225 (cn ", " (shen.app V2226 "
" shen.a)) shen.a))))))

(defun integer? (V2228) (and (number? V2228) (let Abs (shen.abs V2228) (shen.integer-test? Abs (shen.magless Abs 1)))))

(defun shen.abs (V2230) (if (> V2230 0) V2230 (- 0 V2230)))

(defun shen.magless (V2233 V2234) (let Nx2 (* V2234 2) (if (> Nx2 V2233) V2234 (shen.magless V2233 Nx2))))

(defun shen.integer-test? (V2240 V2241) (cond ((= 0 V2240) true) ((> 1 V2240) false) (true (let Abs-N (- V2240 V2241) (if (> 0 Abs-N) (integer? V2240) (shen.integer-test? Abs-N V2241))))))

(defun mapcan (V2246 V2247) (cond ((= () V2247) ()) ((cons? V2247) (append (V2246 (hd V2247)) (mapcan V2246 (tl V2247)))) (true (shen.f_error mapcan))))

(defun == (V2259 V2260) (cond ((= V2260 V2259) true) (true false)))

(defun abort () (simple-error ""))

(defun bound? (V2262) (and (symbol? V2262) (let Val (trap-error (value V2262) (lambda E shen.this-symbol-is-unbound)) (if (= Val shen.this-symbol-is-unbound) false true))))

(defun shen.string->bytes (V2264) (cond ((= "" V2264) ()) (true (cons (string->n (pos V2264 0)) (shen.string->bytes (tlstr V2264))))))

(defun maxinferences (V2266) (set shen.*maxinferences* V2266))

(defun inferences () (value shen.*infs*))

(defun protect (V2268) V2268)

(defun stoutput () (value *stoutput*))

(defun sterror () (value *sterror*))

(defun string->symbol (V2270) (let Symbol (intern V2270) (if (symbol? Symbol) Symbol (simple-error (cn "cannot intern " (shen.app V2270 " to a symbol" shen.s))))))

(defun optimise (V2276) (cond ((= + V2276) (set shen.*optimise* true)) ((= - V2276) (set shen.*optimise* false)) (true (simple-error "optimise expects a + or a -.
"))))

(defun os () (value *os*))

(defun language () (value *language*))

(defun version () (value *version*))

(defun port () (value *port*))

(defun porters () (value *porters*))

(defun implementation () (value *implementation*))

(defun release () (value *release*))

(defun package? (V2278) (trap-error (do (external V2278) true) (lambda E false)))

(defun function (V2280) (shen.lookup-func V2280))

(defun shen.lookup-func (V2282) (trap-error (get V2282 shen.lambda-form (value *property-vector*)) (lambda E (simple-error (shen.app V2282 " has no lambda expansion
" shen.a)))))



