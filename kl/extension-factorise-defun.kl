"Copyright (c) 2012-2019 Bruno Deferrari.  All rights reserved.
BSD 3-Clause License: http://opensource.org/licenses/BSD-3-Clause"

(defun shen.x.factorise-defun.factorise-defun (V4873) (cond ((and (cons? V4873) (and (= defun (hd V4873)) (and (cons? (tl V4873)) (and (cons? (tl (tl V4873))) (and (cons? (tl (tl (tl V4873)))) (and (cons? (hd (tl (tl (tl V4873))))) (and (= cond (hd (hd (tl (tl (tl V4873)))))) (= () (tl (tl (tl (tl V4873)))))))))))) (cons defun (cons (hd (tl V4873)) (cons (hd (tl (tl V4873))) (cons (shen.x.factorise-defun.factorise-cond (hd (tl (tl (tl V4873)))) (cons shen.f_error (cons (hd (tl V4873)) ())) (hd (tl (tl V4873)))) ()))))) (true V4873)))

(defun shen.x.factorise-defun.factorise-cond (V4885 V4886 V4887) (cond ((and (cons? V4885) (= cond (hd V4885))) (shen.x.factorise-defun.inline-mono-labels (shen.x.factorise-defun.rebranch (shen.x.factorise-defun.add-returns (tl V4885)) V4886) V4887)) (true V4885)))

(defun shen.x.factorise-defun.add-returns (V4889) (cond ((= () V4889) ()) ((and (cons? V4889) (and (cons? (hd V4889)) (and (cons? (tl (hd V4889))) (= () (tl (tl (hd V4889))))))) (cons (cons (hd (hd V4889)) (cons (cons %%return (tl (hd V4889))) ())) (shen.x.factorise-defun.add-returns (tl V4889)))) (true (shen.f_error shen.x.factorise-defun.add-returns))))

(defun shen.x.factorise-defun.generate-label () (gensym %%label))

(defun shen.x.factorise-defun.free-variables (V4892 V4893) (reverse (shen.x.factorise-defun.free-variables-h V4892 V4893 ())))

(defun shen.x.factorise-defun.free-variables-h (V4905 V4906 V4907) (cond ((and (cons? V4905) (and (= let (hd V4905)) (and (cons? (tl V4905)) (and (cons? (tl (tl V4905))) (and (cons? (tl (tl (tl V4905)))) (= () (tl (tl (tl (tl V4905)))))))))) (shen.x.factorise-defun.free-variables-h (hd (tl (tl (tl V4905)))) (remove (hd (tl V4905)) V4906) (shen.x.factorise-defun.free-variables-h (hd (tl (tl V4905))) V4906 V4907))) ((and (cons? V4905) (and (= lambda (hd V4905)) (and (cons? (tl V4905)) (and (cons? (tl (tl V4905))) (= () (tl (tl (tl V4905)))))))) (shen.x.factorise-defun.free-variables-h (hd (tl (tl V4905))) (remove (hd (tl V4905)) V4906) V4907)) ((cons? V4905) (shen.x.factorise-defun.free-variables-h (tl V4905) V4906 (shen.x.factorise-defun.free-variables-h (hd V4905) V4906 V4907))) ((element? V4905 V4906) (adjoin V4905 V4907)) (true V4907)))

(defun shen.x.factorise-defun.attach-free-variables (V4910 V4911) (cond ((and (cons? V4910) (and (= %%let-label (hd V4910)) (and (cons? (tl V4910)) (and (cons? (tl (tl V4910))) (and (cons? (tl (tl (tl V4910)))) (= () (tl (tl (tl (tl V4910)))))))))) (let FreeVars (shen.x.factorise-defun.free-variables (hd (tl (tl V4910))) V4911) (let NewBody (if (= () FreeVars) (hd (tl (tl (tl V4910)))) (subst (cons %%goto-label (cons (hd (tl V4910)) FreeVars)) (cons %%goto-label (cons (hd (tl V4910)) ())) (hd (tl (tl (tl V4910)))))) (cons %%let-label (cons (cons (hd (tl V4910)) FreeVars) (cons (hd (tl (tl V4910))) (cons (shen.x.factorise-defun.inline-mono-labels NewBody V4911) ()))))))) (true (shen.f_error shen.x.factorise-defun.attach-free-variables))))

(defun shen.x.factorise-defun.inline-mono-labels (V4918 V4919) (cond ((and (cons? V4918) (and (= %%let-label (hd V4918)) (and (cons? (tl V4918)) (and (cons? (tl (tl V4918))) (and (cons? (tl (tl (tl V4918)))) (and (= () (tl (tl (tl (tl V4918))))) (> (occurrences (cons %%goto-label (cons (hd (tl V4918)) ())) (hd (tl (tl (tl V4918))))) 1))))))) (shen.x.factorise-defun.attach-free-variables (cons %%let-label (cons (hd (tl V4918)) (cons (shen.x.factorise-defun.inline-mono-labels (hd (tl (tl V4918))) V4919) (tl (tl (tl V4918)))))) V4919)) ((and (cons? V4918) (and (= %%let-label (hd V4918)) (and (cons? (tl V4918)) (and (cons? (tl (tl V4918))) (and (cons? (tl (tl (tl V4918)))) (= () (tl (tl (tl (tl V4918)))))))))) (subst (shen.x.factorise-defun.inline-mono-labels (hd (tl (tl V4918))) V4919) (cons %%goto-label (cons (hd (tl V4918)) ())) (shen.x.factorise-defun.inline-mono-labels (hd (tl (tl (tl V4918)))) V4919))) ((and (cons? V4918) (and (= if (hd V4918)) (and (cons? (tl V4918)) (and (cons? (tl (tl V4918))) (and (cons? (tl (tl (tl V4918)))) (= () (tl (tl (tl (tl V4918)))))))))) (cons if (cons (hd (tl V4918)) (cons (shen.x.factorise-defun.inline-mono-labels (hd (tl (tl V4918))) V4919) (cons (shen.x.factorise-defun.inline-mono-labels (hd (tl (tl (tl V4918)))) V4919) ()))))) ((and (cons? V4918) (and (= let (hd V4918)) (and (cons? (tl V4918)) (and (cons? (tl (tl V4918))) (and (cons? (tl (tl (tl V4918)))) (= () (tl (tl (tl (tl V4918)))))))))) (cons let (cons (hd (tl V4918)) (cons (hd (tl (tl V4918))) (cons (shen.x.factorise-defun.inline-mono-labels (hd (tl (tl (tl V4918)))) (cons (hd (tl V4918)) V4919)) ()))))) (true V4918)))

(defun shen.x.factorise-defun.rebranch (V4926 V4927) (cond ((= () V4926) V4927) ((and (cons? V4926) (and (cons? (hd V4926)) (and (= true (hd (hd V4926))) (and (cons? (tl (hd V4926))) (= () (tl (tl (hd V4926)))))))) (hd (tl (hd V4926)))) ((and (cons? V4926) (and (cons? (hd V4926)) (and (cons? (hd (hd V4926))) (and (= and (hd (hd (hd V4926)))) (and (cons? (tl (hd (hd V4926)))) (and (cons? (tl (tl (hd (hd V4926))))) (and (= () (tl (tl (tl (hd (hd V4926)))))) (and (cons? (tl (hd V4926))) (= () (tl (tl (hd V4926)))))))))))) (let TrueBranch (shen.x.factorise-defun.true-branch (hd (tl (hd (hd V4926)))) V4926) (let FalseBranch (shen.x.factorise-defun.false-branch (hd (tl (hd (hd V4926)))) V4926) (shen.x.factorise-defun.rebranch-h (hd (tl (hd (hd V4926)))) TrueBranch FalseBranch V4927)))) ((and (cons? V4926) (and (cons? (hd V4926)) (and (cons? (tl (hd V4926))) (= () (tl (tl (hd V4926))))))) (let TrueBranch (shen.x.factorise-defun.true-branch (hd (hd V4926)) V4926) (let FalseBranch (shen.x.factorise-defun.false-branch (hd (hd V4926)) V4926) (shen.x.factorise-defun.rebranch-h (hd (hd V4926)) TrueBranch FalseBranch V4927)))) (true (shen.f_error shen.x.factorise-defun.rebranch))))

(defun shen.x.factorise-defun.rebranch-h (V4932 V4933 V4934 V4935) (let NewElse (shen.x.factorise-defun.rebranch V4934 V4935) (shen.x.factorise-defun.with-labelled-else NewElse (lambda GotoElse (shen.x.factorise-defun.merge-same-else-ifs (cons if (cons V4932 (cons (shen.x.factorise-defun.optimize-selectors V4932 (shen.x.factorise-defun.rebranch V4933 GotoElse)) (cons GotoElse ())))))))))

(defun shen.x.factorise-defun.true-branch (V4948 V4949) (cond ((and (cons? V4949) (and (cons? (hd V4949)) (and (cons? (hd (hd V4949))) (and (= and (hd (hd (hd V4949)))) (and (cons? (tl (hd (hd V4949)))) (and (cons? (tl (tl (hd (hd V4949))))) (and (= () (tl (tl (tl (hd (hd V4949)))))) (and (cons? (tl (hd V4949))) (and (= () (tl (tl (hd V4949)))) (= (hd (tl (hd (hd V4949)))) V4948)))))))))) (cons (cons (hd (tl (tl (hd (hd V4949))))) (tl (hd V4949))) (shen.x.factorise-defun.true-branch (hd (tl (hd (hd V4949)))) (tl V4949)))) ((and (cons? V4949) (and (cons? (hd V4949)) (and (cons? (tl (hd V4949))) (and (= () (tl (tl (hd V4949)))) (= (hd (hd V4949)) V4948))))) (cons (cons true (tl (hd V4949))) ())) (true ())))

(defun shen.x.factorise-defun.false-branch (V4958 V4959) (cond ((and (cons? V4959) (and (cons? (hd V4959)) (and (cons? (hd (hd V4959))) (and (= and (hd (hd (hd V4959)))) (and (cons? (tl (hd (hd V4959)))) (and (cons? (tl (tl (hd (hd V4959))))) (and (= () (tl (tl (tl (hd (hd V4959)))))) (and (cons? (tl (hd V4959))) (and (= () (tl (tl (hd V4959)))) (= (hd (tl (hd (hd V4959)))) V4958)))))))))) (shen.x.factorise-defun.false-branch (hd (tl (hd (hd V4959)))) (tl V4959))) ((and (cons? V4959) (and (cons? (hd V4959)) (and (cons? (tl (hd V4959))) (and (= () (tl (tl (hd V4959)))) (= (hd (hd V4959)) V4958))))) (shen.x.factorise-defun.false-branch (hd (hd V4959)) (tl V4959))) (true V4959)))

(defun shen.x.factorise-defun.with-labelled-else (V4962 V4963) (cond ((and (cons? V4962) (and (= %%return (hd V4962)) (and (cons? (tl V4962)) (and (= () (tl (tl V4962))) (not (cons? (hd (tl V4962)))))))) (V4963 V4962)) ((and (cons? V4962) (and (= fail (hd V4962)) (= () (tl V4962)))) (V4963 V4962)) ((and (cons? V4962) (and (= %%goto-label (hd V4962)) (and (cons? (tl V4962)) (= () (tl (tl V4962)))))) (V4963 V4962)) (true (let Label (shen.x.factorise-defun.generate-label) (cons %%let-label (cons Label (cons V4962 (cons (V4963 (cons %%goto-label (cons Label ()))) ()))))))))

(defun shen.x.factorise-defun.merge-same-else-ifs (V4966) (cond ((and (cons? V4966) (and (= if (hd V4966)) (and (cons? (tl V4966)) (and (cons? (tl (tl V4966))) (and (cons? (hd (tl (tl V4966)))) (and (= if (hd (hd (tl (tl V4966))))) (and (cons? (tl (hd (tl (tl V4966))))) (and (cons? (tl (tl (hd (tl (tl V4966)))))) (and (cons? (tl (tl (tl (hd (tl (tl V4966))))))) (and (= () (tl (tl (tl (tl (hd (tl (tl V4966)))))))) (and (cons? (tl (tl (tl V4966)))) (and (= () (tl (tl (tl (tl V4966))))) (= (hd (tl (tl (tl V4966)))) (hd (tl (tl (tl (hd (tl (tl V4966)))))))))))))))))))) (cons if (cons (cons and (cons (hd (tl V4966)) (cons (hd (tl (hd (tl (tl V4966))))) ()))) (cons (hd (tl (tl (hd (tl (tl V4966)))))) (tl (tl (tl V4966))))))) (true V4966)))

(defun shen.x.factorise-defun.concat/ (V4969 V4970) (concat V4969 (concat / V4970)))

(defun shen.x.factorise-defun.exp-var (V4974) (cond ((and (cons? V4974) (and (cons? (tl V4974)) (and (= () (tl (tl V4974))) (symbol? (hd V4974))))) (shen.x.factorise-defun.concat/ (shen.x.factorise-defun.exp-var (hd (tl V4974))) (hd V4974))) ((cons? V4974) (gensym (hd V4974))) (true V4974)))

(defun shen.x.factorise-defun.optimize-selectors (V4977 V4978) (shen.x.factorise-defun.bind-repeating-selectors (shen.x.factorise-defun.test->selectors V4977) V4978))

(defun shen.x.factorise-defun.test->selectors (V4984) (cond ((and (cons? V4984) (and (= cons? (hd V4984)) (and (cons? (tl V4984)) (= () (tl (tl V4984)))))) (cons (cons hd (tl V4984)) (cons (cons tl (tl V4984)) ()))) ((and (cons? V4984) (and (= tuple? (hd V4984)) (and (cons? (tl V4984)) (= () (tl (tl V4984)))))) (cons (cons fst (tl V4984)) (cons (cons snd (tl V4984)) ()))) ((and (cons? V4984) (and (= shen.+string? (hd V4984)) (and (cons? (tl V4984)) (= () (tl (tl V4984)))))) (cons (cons hdstr (tl V4984)) (cons (cons tlstr (tl V4984)) ()))) ((and (cons? V4984) (and (= shen.+vector? (hd V4984)) (and (cons? (tl V4984)) (= () (tl (tl V4984)))))) (cons (cons hdv (tl V4984)) (cons (cons tlv (tl V4984)) ()))) (true (let Result (shen.x.factorise-defun.apply-selector-handlers (value shen.x.factorise-defun.*selector-handlers*) V4984) (if (= Result (fail)) () Result)))))

(defun shen.x.factorise-defun.bind-repeating-selectors (V4987 V4988) (cond ((cons? V4987) (shen.x.factorise-defun.bind-selector (hd V4987) (shen.x.factorise-defun.bind-repeating-selectors (tl V4987) V4988))) ((= () V4987) V4988) (true (shen.f_error shen.x.factorise-defun.bind-repeating-selectors))))

(defun shen.x.factorise-defun.bind-selector (V4995 V4996) (cond ((> (occurrences V4995 V4996) 1) (let Var (shen.x.factorise-defun.exp-var V4995) (cons let (cons Var (cons V4995 (cons (subst Var V4995 V4996) ())))))) (true V4996)))

(defun shen.x.factorise-defun.apply-selector-handlers (V5009 V5010) (cond ((= () V5009) (fail)) (true (let Freeze (freeze (cond ((cons? V5009) (shen.x.factorise-defun.apply-selector-handlers (tl V5009) V5010)) (true (shen.f_error shen.x.factorise-defun.apply-selector-handlers)))) (if (cons? V5009) (let Result ((hd V5009) V5010) (if (= Result (fail)) (thaw Freeze) Result)) (thaw Freeze))))))

(defun shen.x.factorise-defun.initialise () (do (set shen.x.factorise-defun.*selector-handlers* ()) (do (set shen.x.factorise-defun.*selector-handlers-reg* ()) shen.x.factorise-defun.done)))

(defun shen.x.factorise-defun.register-selector-handler (V5012) (cond ((element? V5012 (value shen.x.factorise-defun.*selector-handlers*)) V5012) (true (do (set shen.x.factorise-defun.*selector-handlers-reg* (cons V5012 (value shen.x.factorise-defun.*selector-handlers*))) (do (set shen.x.factorise-defun.*selector-handlers* (cons (function V5012) (value shen.x.factorise-defun.*selector-handlers*))) V5012)))))

(defun shen.x.factorise-defun.findpos (V5015 V5016) (trap-error (shen.findpos V5015 V5016) (lambda _ (simple-error (shen.app V5015 " is not a selector handler
" shen.a)))))

(defun shen.x.factorise-defun.unregister-selector-handler (V5018) (let Reg (value shen.x.factorise-defun.*selector-handlers-reg*) (let Pos (shen.x.factorise-defun.findpos V5018 Reg) (let RemoveReg (set shen.x.factorise-defun.*selector-handlers-reg* (remove V5018 Reg)) (let RemoveFun (set shen.x.factorise-defun.*selector-handlers* (shen.remove-nth Pos (value shen.x.factorise-defun.*selector-handlers*))) V5018)))))



