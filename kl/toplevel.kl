"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.repl () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (shen.toplevel-display-exception E))) (shen.loop)))))

(defun shen.toplevel-display-exception (V2964) (pr (error-to-string V2964) (stoutput)))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V2966) (cond ((= () V2966) ()) ((and (cons? V2966) (cons? (tl V2966))) (do (set (hd V2966) (hd (tl V2966))) (shen.multiple-set (tl (tl V2966))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V2968) (declare V2968 symbol))

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V2980 V2981) (cond ((and (tuple? V2980) (and (cons? (snd V2980)) (element? (hd (snd V2980)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V2980) (tl (snd V2980))) V2981)) ((and (tuple? V2980) (and (cons? (snd V2980)) (and (cons? (tl (snd V2980))) (and (= () (tl (tl (snd V2980)))) (and (cons? V2981) (and (= (hd (snd V2980)) (shen.exclamation)) (= (hd (tl (snd V2980))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V2981))) (hd V2981))) ((and (tuple? V2980) (and (cons? (snd V2980)) (= (hd (snd V2980)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V2980)) V2981) (let Find (head (shen.find-past-inputs Key? V2981)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V2980) (and (cons? (snd V2980)) (and (= () (tl (snd V2980))) (= (hd (snd V2980)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V2981) 0) (abort))) ((and (tuple? V2980) (and (cons? (snd V2980)) (= (hd (snd V2980)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V2980)) V2981) (let Pastprint (shen.print-past-inputs Key? (reverse V2981) 0) (abort)))) (true V2980)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V2983) (do (shen.for-each (lambda Byte (pr (n->string Byte) (stoutput))) V2983) (nl 1)))

(defun shen.update_history (V2986 V2987) (set shen.*history* (cons V2986 V2987)))

(defun shen.toplineread () (shen.toplineread_loop (shen.read-char-code (stinput)) ()))

(defun shen.toplineread_loop (V2991 V2992) (cond ((= V2991 (shen.hat)) (simple-error "line read aborted")) ((element? V2991 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V2992 (lambda E shen.nextline)) (let It (shen.record-it V2992) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (shen.read-char-code (stinput)) (append V2992 (cons V2991 ()))) (@p Line V2992))))) (true (shen.toplineread_loop (shen.read-char-code (stinput)) (if (= V2991 -1) V2992 (append V2992 (cons V2991 ())))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V2998) (cond ((= + V2998) (set shen.*tc* true)) ((= - V2998) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V3000) (shen.toplevel_evaluate V3000 (value shen.*tc*)))

(defun shen.find-past-inputs (V3003 V3004) (let F (shen.find V3003 V3004) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V3007 V3008) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V3007 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V3008)))) (lambda X (shen.prefix? V3007 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V3010) (cond ((and (cons? V3010) (= (hd V3010) (shen.space))) (shen.trim-gubbins (tl V3010))) ((and (cons? V3010) (= (hd V3010) (shen.newline))) (shen.trim-gubbins (tl V3010))) ((and (cons? V3010) (= (hd V3010) (shen.carriage-return))) (shen.trim-gubbins (tl V3010))) ((and (cons? V3010) (= (hd V3010) (shen.tab))) (shen.trim-gubbins (tl V3010))) ((and (cons? V3010) (= (hd V3010) (shen.left-round))) (shen.trim-gubbins (tl V3010))) (true V3010)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V3019 V3020) (cond ((= () V3020) ()) ((and (cons? V3020) (V3019 (hd V3020))) (cons (hd V3020) (shen.find V3019 (tl V3020)))) ((cons? V3020) (shen.find V3019 (tl V3020))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V3034 V3035) (cond ((= () V3034) true) ((and (cons? V3034) (and (cons? V3035) (= (hd V3035) (hd V3034)))) (shen.prefix? (tl V3034) (tl V3035))) (true false)))

(defun shen.print-past-inputs (V3047 V3048 V3049) (cond ((= () V3048) _) ((and (cons? V3048) (not (V3047 (hd V3048)))) (shen.print-past-inputs V3047 (tl V3048) (+ V3049 1))) ((and (cons? V3048) (tuple? (hd V3048))) (do (shen.prhush (shen.app V3049 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V3048))) (shen.print-past-inputs V3047 (tl V3048) (+ V3049 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V3052 V3053) (cond ((and (cons? V3052) (and (cons? (tl V3052)) (and (= : (hd (tl V3052))) (and (cons? (tl (tl V3052))) (and (= () (tl (tl (tl V3052)))) (= true V3053)))))) (shen.typecheck-and-evaluate (hd V3052) (hd (tl (tl V3052))))) ((and (cons? V3052) (cons? (tl V3052))) (do (shen.toplevel_evaluate (cons (hd V3052) ()) V3053) (do (nl 1) (shen.toplevel_evaluate (tl V3052) V3053)))) ((and (cons? V3052) (and (= () (tl V3052)) (= true V3053))) (shen.typecheck-and-evaluate (hd V3052) (gensym A))) ((and (cons? V3052) (and (= () (tl V3052)) (= false V3053))) (let Eval (shen.eval-without-macros (hd V3052)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V3056 V3057) (let Typecheck (shen.typecheck V3056 V3057) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V3056) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V3059) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V3059) V3059))

(defun shen.extract-pvars (V3065) (cond ((shen.pvar? V3065) (cons V3065 ())) ((cons? V3065) (union (shen.extract-pvars (hd V3065)) (shen.extract-pvars (tl V3065)))) (true ())))

(defun shen.mult_subst (V3073 V3074 V3075) (cond ((= () V3073) V3075) ((= () V3074) V3075) ((and (cons? V3073) (cons? V3074)) (shen.mult_subst (tl V3073) (tl V3074) (subst (hd V3073) (hd V3074) V3075))) (true (shen.f_error shen.mult_subst))))



