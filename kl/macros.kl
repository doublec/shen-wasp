"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun macroexpand (V690) (let Y (shen.compose (value *macros*) V690) (if (= V690 Y) V690 (shen.walk (lambda Z (macroexpand Z)) Y))))

(defun shen.error-macro (V692) (cond ((and (cons? V692) (and (= error (hd V692)) (cons? (tl V692)))) (cons simple-error (cons (shen.mkstr (hd (tl V692)) (tl (tl V692))) ()))) (true V692)))

(defun shen.output-macro (V694) (cond ((and (cons? V694) (and (= output (hd V694)) (cons? (tl V694)))) (cons shen.prhush (cons (shen.mkstr (hd (tl V694)) (tl (tl V694))) (cons (cons stoutput ()) ())))) ((and (cons? V694) (and (= pr (hd V694)) (and (cons? (tl V694)) (= () (tl (tl V694)))))) (cons pr (cons (hd (tl V694)) (cons (cons stoutput ()) ())))) (true V694)))

(defun shen.make-string-macro (V696) (cond ((and (cons? V696) (and (= make-string (hd V696)) (cons? (tl V696)))) (shen.mkstr (hd (tl V696)) (tl (tl V696)))) (true V696)))

(defun shen.input-macro (V698) (cond ((and (cons? V698) (and (= lineread (hd V698)) (= () (tl V698)))) (cons lineread (cons (cons stinput ()) ()))) ((and (cons? V698) (and (= input (hd V698)) (= () (tl V698)))) (cons input (cons (cons stinput ()) ()))) ((and (cons? V698) (and (= read (hd V698)) (= () (tl V698)))) (cons read (cons (cons stinput ()) ()))) ((and (cons? V698) (and (= input+ (hd V698)) (and (cons? (tl V698)) (= () (tl (tl V698)))))) (cons input+ (cons (hd (tl V698)) (cons (cons stinput ()) ())))) ((and (cons? V698) (and (= read-byte (hd V698)) (= () (tl V698)))) (cons read-byte (cons (cons stinput ()) ()))) (true V698)))

(defun shen.compose (V701 V702) (cond ((= () V701) V702) ((cons? V701) (shen.compose (tl V701) ((hd V701) V702))) (true (shen.f_error shen.compose))))

(defun shen.compile-macro (V704) (cond ((and (cons? V704) (and (= compile (hd V704)) (and (cons? (tl V704)) (and (cons? (tl (tl V704))) (= () (tl (tl (tl V704)))))))) (cons compile (cons (hd (tl V704)) (cons (hd (tl (tl V704))) (cons (cons lambda (cons E (cons (cons if (cons (cons cons? (cons E ())) (cons (cons error (cons "parse error here: ~S~%" (cons E ()))) (cons (cons error (cons "parse error~%" ())) ())))) ()))) ()))))) (true V704)))

(defun shen.prolog-macro (V706) (cond ((and (cons? V706) (= prolog? (hd V706))) (cons let (cons NPP (cons (cons shen.start-new-prolog-process ()) (cons (let Calls (shen.bld-prolog-call NPP (tl V706)) (let Vs (shen.extract_vars (tl V706)) (let External (shen.externally-bound (tl V706)) (let PrologVs (difference Vs External) (shen.locally-bind-prolog-vs NPP PrologVs Calls))))) ()))))) (true V706)))

(defun shen.externally-bound (V712) (cond ((and (cons? V712) (and (= receive (hd V712)) (and (cons? (tl V712)) (= () (tl (tl V712)))))) (tl V712)) ((cons? V712) (union (shen.externally-bound (hd V712)) (shen.externally-bound (tl V712)))) (true ())))

(defun shen.locally-bind-prolog-vs (V730 V731 V732) (cond ((= () V731) V732) ((cons? V731) (cons let (cons (hd V731) (cons (cons shen.newpv (cons V730 ())) (cons (shen.locally-bind-prolog-vs V730 (tl V731) V732) ()))))) (true (simple-error "implementation error inp locally-bind-prolog-vs"))))

(defun shen.bld-prolog-call (V745 V746) (cond ((= () V746) true) ((and (cons? V746) (= ! (hd V746))) (cons cut (cons false (cons V745 (cons (cons freeze (cons (shen.bld-prolog-call V745 (tl V746)) ())) ()))))) ((and (cons? V746) (and (cons? (hd V746)) (and (= when (hd (hd V746))) (and (cons? (tl (hd V746))) (= () (tl (tl (hd V746)))))))) (cons fwhen (cons (shen.insert-deref (hd (tl (hd V746))) V745) (cons V745 (cons (cons freeze (cons (shen.bld-prolog-call V745 (tl V746)) ())) ()))))) ((and (cons? V746) (and (cons? (hd V746)) (and (= is (hd (hd V746))) (and (cons? (tl (hd V746))) (and (cons? (tl (tl (hd V746)))) (= () (tl (tl (tl (hd V746)))))))))) (cons bind (cons (hd (tl (hd V746))) (cons (shen.insert-deref (hd (tl (tl (hd V746)))) V745) (cons V745 (cons (cons freeze (cons (shen.bld-prolog-call V745 (tl V746)) ())) ())))))) ((and (cons? V746) (and (cons? (hd V746)) (and (= receive (hd (hd V746))) (and (cons? (tl (hd V746))) (= () (tl (tl (hd V746)))))))) (shen.bld-prolog-call V745 (tl V746))) ((and (cons? V746) (and (cons? (hd V746)) (and (= bind (hd (hd V746))) (and (cons? (tl (hd V746))) (and (cons? (tl (tl (hd V746)))) (= () (tl (tl (tl (hd V746)))))))))) (cons bind (cons (hd (tl (hd V746))) (cons (shen.insert-lazyderef (hd (tl (tl (hd V746)))) V745) (cons V745 (cons (cons freeze (cons (shen.bld-prolog-call V745 (tl V746)) ())) ())))))) ((and (cons? V746) (and (cons? (hd V746)) (and (= fwhen (hd (hd V746))) (and (cons? (tl (hd V746))) (= () (tl (tl (hd V746)))))))) (cons fwhen (cons (shen.insert-lazyderef (hd (tl (hd V746))) V745) (cons V745 (cons (cons freeze (cons (shen.bld-prolog-call V745 (tl V746)) ())) ()))))) ((cons? V746) (append (hd V746) (cons V745 (cons (cons freeze (cons (shen.bld-prolog-call V745 (tl V746)) ())) ())))) (true (simple-error "implementation error in bld-prolog-call"))))

(defun shen.defprolog-macro (V748) (cond ((and (cons? V748) (and (= defprolog (hd V748)) (cons? (tl V748)))) (compile (lambda Y (shen.<defprolog> Y)) (tl V748) (lambda Y (shen.prolog-error (hd (tl V748)) Y)))) (true V748)))

(defun shen.datatype-macro (V750) (cond ((and (cons? V750) (and (= datatype (hd V750)) (cons? (tl V750)))) (cons shen.process-datatype (cons (shen.intern-type (hd (tl V750))) (cons (cons compile (cons (cons lambda (cons X (cons (cons shen.<datatype-rules> (cons X ())) ()))) (cons (shen.rcons_form (tl (tl V750))) (cons (cons function (cons shen.datatype-error ())) ())))) ())))) (true V750)))

(defun shen.intern-type (V752) (intern (cn (str V752) "#type")))

(defun shen.@s-macro (V754) (cond ((and (cons? V754) (and (= @s (hd V754)) (and (cons? (tl V754)) (and (cons? (tl (tl V754))) (cons? (tl (tl (tl V754)))))))) (cons @s (cons (hd (tl V754)) (cons (shen.@s-macro (cons @s (tl (tl V754)))) ())))) ((and (cons? V754) (and (= @s (hd V754)) (and (cons? (tl V754)) (and (cons? (tl (tl V754))) (and (= () (tl (tl (tl V754)))) (string? (hd (tl V754)))))))) (let E (explode (hd (tl V754))) (if (> (length E) 1) (shen.@s-macro (cons @s (append E (tl (tl V754))))) V754))) (true V754)))

(defun shen.synonyms-macro (V756) (cond ((and (cons? V756) (= synonyms (hd V756))) (cons shen.synonyms-help (cons (shen.rcons_form (shen.curry-synonyms (tl V756))) ()))) (true V756)))

(defun shen.curry-synonyms (V758) (map (lambda X (shen.curry-type X)) V758))

(defun shen.nl-macro (V760) (cond ((and (cons? V760) (and (= nl (hd V760)) (= () (tl V760)))) (cons nl (cons 1 ()))) (true V760)))

(defun shen.assoc-macro (V762) (cond ((and (cons? V762) (and (cons? (tl V762)) (and (cons? (tl (tl V762))) (and (cons? (tl (tl (tl V762)))) (element? (hd V762) (cons @p (cons @v (cons append (cons and (cons or (cons + (cons * (cons do ()))))))))))))) (cons (hd V762) (cons (hd (tl V762)) (cons (shen.assoc-macro (cons (hd V762) (tl (tl V762)))) ())))) (true V762)))

(defun shen.let-macro (V764) (cond ((and (cons? V764) (and (= let (hd V764)) (and (cons? (tl V764)) (and (cons? (tl (tl V764))) (and (cons? (tl (tl (tl V764)))) (cons? (tl (tl (tl (tl V764)))))))))) (cons let (cons (hd (tl V764)) (cons (hd (tl (tl V764))) (cons (shen.let-macro (cons let (tl (tl (tl V764))))) ()))))) (true V764)))

(defun shen.abs-macro (V766) (cond ((and (cons? V766) (and (= /. (hd V766)) (and (cons? (tl V766)) (and (cons? (tl (tl V766))) (cons? (tl (tl (tl V766)))))))) (cons lambda (cons (hd (tl V766)) (cons (shen.abs-macro (cons /. (tl (tl V766)))) ())))) ((and (cons? V766) (and (= /. (hd V766)) (and (cons? (tl V766)) (and (cons? (tl (tl V766))) (= () (tl (tl (tl V766)))))))) (cons lambda (tl V766))) (true V766)))

(defun shen.cases-macro (V770) (cond ((and (cons? V770) (and (= cases (hd V770)) (and (cons? (tl V770)) (and (= true (hd (tl V770))) (cons? (tl (tl V770))))))) (hd (tl (tl V770)))) ((and (cons? V770) (and (= cases (hd V770)) (and (cons? (tl V770)) (and (cons? (tl (tl V770))) (= () (tl (tl (tl V770)))))))) (cons if (cons (hd (tl V770)) (cons (hd (tl (tl V770))) (cons (cons simple-error (cons "error: cases exhausted" ())) ()))))) ((and (cons? V770) (and (= cases (hd V770)) (and (cons? (tl V770)) (cons? (tl (tl V770)))))) (cons if (cons (hd (tl V770)) (cons (hd (tl (tl V770))) (cons (shen.cases-macro (cons cases (tl (tl (tl V770))))) ()))))) ((and (cons? V770) (and (= cases (hd V770)) (and (cons? (tl V770)) (= () (tl (tl V770)))))) (simple-error "error: odd number of case elements
")) (true V770)))

(defun shen.timer-macro (V772) (cond ((and (cons? V772) (and (= time (hd V772)) (and (cons? (tl V772)) (= () (tl (tl V772)))))) (shen.let-macro (cons let (cons Start (cons (cons get-time (cons run ())) (cons Result (cons (hd (tl V772)) (cons Finish (cons (cons get-time (cons run ())) (cons Time (cons (cons - (cons Finish (cons Start ()))) (cons Message (cons (cons shen.prhush (cons (cons cn (cons "
run time: " (cons (cons cn (cons (cons str (cons Time ())) (cons " secs
" ()))) ()))) (cons (cons stoutput ()) ()))) (cons Result ())))))))))))))) (true V772)))

(defun shen.tuple-up (V774) (cond ((cons? V774) (cons @p (cons (hd V774) (cons (shen.tuple-up (tl V774)) ())))) (true V774)))

(defun shen.put/get-macro (V776) (cond ((and (cons? V776) (and (= put (hd V776)) (and (cons? (tl V776)) (and (cons? (tl (tl V776))) (and (cons? (tl (tl (tl V776)))) (= () (tl (tl (tl (tl V776)))))))))) (cons put (cons (hd (tl V776)) (cons (hd (tl (tl V776))) (cons (hd (tl (tl (tl V776)))) (cons (cons value (cons *property-vector* ())) ())))))) ((and (cons? V776) (and (= get (hd V776)) (and (cons? (tl V776)) (and (cons? (tl (tl V776))) (= () (tl (tl (tl V776)))))))) (cons get (cons (hd (tl V776)) (cons (hd (tl (tl V776))) (cons (cons value (cons *property-vector* ())) ()))))) ((and (cons? V776) (and (= unput (hd V776)) (and (cons? (tl V776)) (and (cons? (tl (tl V776))) (= () (tl (tl (tl V776)))))))) (cons unput (cons (hd (tl V776)) (cons (hd (tl (tl V776))) (cons (cons value (cons *property-vector* ())) ()))))) (true V776)))

(defun shen.function-macro (V778) (cond ((and (cons? V778) (and (= function (hd V778)) (and (cons? (tl V778)) (= () (tl (tl V778)))))) (shen.function-abstraction (hd (tl V778)) (arity (hd (tl V778))))) (true V778)))

(defun shen.function-abstraction (V781 V782) (cond ((= 0 V782) (simple-error (shen.app V781 " has no lambda form
" shen.a))) ((= -1 V782) (cons function (cons V781 ()))) (true (shen.function-abstraction-help V781 V782 ()))))

(defun shen.function-abstraction-help (V786 V787 V788) (cond ((= 0 V787) (cons V786 V788)) (true (let X (gensym V) (cons /. (cons X (cons (shen.function-abstraction-help V786 (- V787 1) (append V788 (cons X ()))) ())))))))

(defun undefmacro (V790) (let MacroReg (value shen.*macroreg*) (let Pos (shen.findpos V790 MacroReg) (let Remove1 (set shen.*macroreg* (remove V790 MacroReg)) (let Remove2 (set *macros* (shen.remove-nth Pos (value *macros*))) V790)))))

(defun shen.findpos (V800 V801) (cond ((= () V801) (simple-error (shen.app V800 " is not a macro
" shen.a))) ((and (cons? V801) (= (hd V801) V800)) 1) ((cons? V801) (+ 1 (shen.findpos V800 (tl V801)))) (true (shen.f_error shen.findpos))))

(defun shen.remove-nth (V806 V807) (cond ((and (= 1 V806) (cons? V807)) (tl V807)) ((cons? V807) (cons (hd V807) (shen.remove-nth (- V806 1) (tl V807)))) (true (shen.f_error shen.remove-nth))))



