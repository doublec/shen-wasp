"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun load (V643) (let Load (let Start (get-time run) (let Result (shen.load-help (value shen.*tc*) (read-file V643)) (let Finish (get-time run) (let Time (- Finish Start) (let Message (shen.prhush (cn "
run time: " (cn (str Time) " secs
")) (stoutput)) Result))))) (let Infs (if (value shen.*tc*) (shen.prhush (cn "
typechecked in " (shen.app (inferences) " inferences
" shen.a)) (stoutput)) shen.skip) loaded)))

(defun shen.load-help (V650 V651) (cond ((= false V650) (shen.for-each (lambda X (shen.prhush (shen.app (shen.eval-without-macros X) "
" shen.s) (stoutput))) V651)) (true (let RemoveSynonyms (mapcan (lambda X (shen.remove-synonyms X)) V651) (let Table (mapcan (lambda X (shen.typetable X)) RemoveSynonyms) (let Assume (shen.for-each (lambda X (shen.assumetype X)) Table) (trap-error (shen.for-each (lambda X (shen.typecheck-and-load X)) RemoveSynonyms) (lambda E (shen.unwind-types E Table)))))))))

(defun shen.remove-synonyms (V653) (cond ((and (cons? V653) (= shen.synonyms-help (hd V653))) (do (eval V653) ())) (true (cons V653 ()))))

(defun shen.typecheck-and-load (V655) (do (nl 1) (shen.typecheck-and-evaluate V655 (gensym A))))

(defun shen.typetable (V661) (cond ((and (cons? V661) (and (= define (hd V661)) (cons? (tl V661)))) (let Sig (compile (lambda Y (shen.<sig+rest> Y)) (tl (tl V661)) (lambda E (simple-error (shen.app (hd (tl V661)) " lacks a proper signature.
" shen.a)))) (cons (cons (hd (tl V661)) Sig) ()))) (true ())))

(defun shen.assumetype (V663) (cond ((cons? V663) (declare (hd V663) (tl V663))) (true (shen.f_error shen.assumetype))))

(defun shen.unwind-types (V670 V671) (cond ((= () V671) (simple-error (error-to-string V670))) ((and (cons? V671) (cons? (hd V671))) (do (shen.remtype (hd (hd V671))) (shen.unwind-types V670 (tl V671)))) (true (shen.f_error shen.unwind-types))))

(defun shen.remtype (V673) (set shen.*signedfuncs* (shen.removetype V673 (value shen.*signedfuncs*))))

(defun shen.removetype (V681 V682) (cond ((= () V682) ()) ((and (cons? V682) (and (cons? (hd V682)) (= (hd (hd V682)) V681))) (shen.removetype (hd (hd V682)) (tl V682))) ((cons? V682) (cons (hd V682) (shen.removetype V681 (tl V682)))) (true (shen.f_error shen.removetype))))

(defun shen.<sig+rest> (V684) (let Parse_shen.<signature> (shen.<signature> V684) (if (not (= (fail) Parse_shen.<signature>)) (let Parse_<!> (<!> Parse_shen.<signature>) (if (not (= (fail) Parse_<!>)) (shen.pair (hd Parse_<!>) (shen.hdtl Parse_shen.<signature>)) (fail))) (fail))))

(defun write-to-file (V687 V688) (let Stream (open V687 out) (let String (if (string? V688) (shen.app V688 "

" shen.a) (shen.app V688 "

" shen.s)) (let Write (pr String Stream) (let Close (close Stream) V688)))))



