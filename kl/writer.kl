"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun pr (V4536 V4537) (trap-error (shen.prh V4536 V4537 0) (lambda E V4536)))

(defun shen.prh (V4541 V4542 V4543) (shen.prh V4541 V4542 (shen.write-char-and-inc V4541 V4542 V4543)))

(defun shen.write-char-and-inc (V4547 V4548 V4549) (do (write-byte (string->n (pos V4547 V4549)) V4548) (+ V4549 1)))

(defun print (V4551) (let String (shen.insert V4551 "~S") (let Print (shen.prhush String (stoutput)) V4551)))

(defun shen.prhush (V4554 V4555) (if (value *hush*) V4554 (pr V4554 V4555)))

(defun shen.mkstr (V4558 V4559) (cond ((string? V4558) (shen.mkstr-l (shen.proc-nl V4558) V4559)) (true (shen.mkstr-r (cons shen.proc-nl (cons V4558 ())) V4559))))

(defun shen.mkstr-l (V4562 V4563) (cond ((= () V4563) V4562) ((cons? V4563) (shen.mkstr-l (shen.insert-l (hd V4563) V4562) (tl V4563))) (true (shen.f_error shen.mkstr-l))))

(defun shen.insert-l (V4568 V4569) (cond ((= "" V4569) "") ((and (shen.+string? V4569) (and (= "~" (pos V4569 0)) (and (shen.+string? (tlstr V4569)) (= "A" (pos (tlstr V4569) 0))))) (cons shen.app (cons V4568 (cons (tlstr (tlstr V4569)) (cons shen.a ()))))) ((and (shen.+string? V4569) (and (= "~" (pos V4569 0)) (and (shen.+string? (tlstr V4569)) (= "R" (pos (tlstr V4569) 0))))) (cons shen.app (cons V4568 (cons (tlstr (tlstr V4569)) (cons shen.r ()))))) ((and (shen.+string? V4569) (and (= "~" (pos V4569 0)) (and (shen.+string? (tlstr V4569)) (= "S" (pos (tlstr V4569) 0))))) (cons shen.app (cons V4568 (cons (tlstr (tlstr V4569)) (cons shen.s ()))))) ((shen.+string? V4569) (shen.factor-cn (cons cn (cons (pos V4569 0) (cons (shen.insert-l V4568 (tlstr V4569)) ()))))) ((and (cons? V4569) (and (= cn (hd V4569)) (and (cons? (tl V4569)) (and (cons? (tl (tl V4569))) (= () (tl (tl (tl V4569)))))))) (cons cn (cons (hd (tl V4569)) (cons (shen.insert-l V4568 (hd (tl (tl V4569)))) ())))) ((and (cons? V4569) (and (= shen.app (hd V4569)) (and (cons? (tl V4569)) (and (cons? (tl (tl V4569))) (and (cons? (tl (tl (tl V4569)))) (= () (tl (tl (tl (tl V4569)))))))))) (cons shen.app (cons (hd (tl V4569)) (cons (shen.insert-l V4568 (hd (tl (tl V4569)))) (tl (tl (tl V4569))))))) (true (shen.f_error shen.insert-l))))

(defun shen.factor-cn (V4571) (cond ((and (cons? V4571) (and (= cn (hd V4571)) (and (cons? (tl V4571)) (and (cons? (tl (tl V4571))) (and (cons? (hd (tl (tl V4571)))) (and (= cn (hd (hd (tl (tl V4571))))) (and (cons? (tl (hd (tl (tl V4571))))) (and (cons? (tl (tl (hd (tl (tl V4571)))))) (and (= () (tl (tl (tl (hd (tl (tl V4571))))))) (and (= () (tl (tl (tl V4571)))) (and (string? (hd (tl V4571))) (string? (hd (tl (hd (tl (tl V4571))))))))))))))))) (cons cn (cons (cn (hd (tl V4571)) (hd (tl (hd (tl (tl V4571)))))) (tl (tl (hd (tl (tl V4571)))))))) (true V4571)))

(defun shen.proc-nl (V4573) (cond ((= "" V4573) "") ((and (shen.+string? V4573) (and (= "~" (pos V4573 0)) (and (shen.+string? (tlstr V4573)) (= "%" (pos (tlstr V4573) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V4573))))) ((shen.+string? V4573) (cn (pos V4573 0) (shen.proc-nl (tlstr V4573)))) (true (shen.f_error shen.proc-nl))))

(defun shen.mkstr-r (V4576 V4577) (cond ((= () V4577) V4576) ((cons? V4577) (shen.mkstr-r (cons shen.insert (cons (hd V4577) (cons V4576 ()))) (tl V4577))) (true (shen.f_error shen.mkstr-r))))

(defun shen.insert (V4580 V4581) (shen.insert-h V4580 V4581 ""))

(defun shen.insert-h (V4587 V4588 V4589) (cond ((= "" V4588) V4589) ((and (shen.+string? V4588) (and (= "~" (pos V4588 0)) (and (shen.+string? (tlstr V4588)) (= "A" (pos (tlstr V4588) 0))))) (cn V4589 (shen.app V4587 (tlstr (tlstr V4588)) shen.a))) ((and (shen.+string? V4588) (and (= "~" (pos V4588 0)) (and (shen.+string? (tlstr V4588)) (= "R" (pos (tlstr V4588) 0))))) (cn V4589 (shen.app V4587 (tlstr (tlstr V4588)) shen.r))) ((and (shen.+string? V4588) (and (= "~" (pos V4588 0)) (and (shen.+string? (tlstr V4588)) (= "S" (pos (tlstr V4588) 0))))) (cn V4589 (shen.app V4587 (tlstr (tlstr V4588)) shen.s))) ((shen.+string? V4588) (shen.insert-h V4587 (tlstr V4588) (cn V4589 (pos V4588 0)))) (true (shen.f_error shen.insert-h))))

(defun shen.app (V4593 V4594 V4595) (cn (shen.arg->str V4593 V4595) V4594))

(defun shen.arg->str (V4603 V4604) (cond ((= V4603 (fail)) "...") ((shen.list? V4603) (shen.list->str V4603 V4604)) ((string? V4603) (shen.str->str V4603 V4604)) ((absvector? V4603) (shen.vector->str V4603 V4604)) (true (shen.atom->str V4603))))

(defun shen.list->str (V4607 V4608) (cond ((= shen.r V4608) (@s "(" (@s (shen.iter-list V4607 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V4607 V4608 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V4622 V4623 V4624) (cond ((= () V4622) "") ((= 0 V4624) "... etc") ((and (cons? V4622) (= () (tl V4622))) (shen.arg->str (hd V4622) V4623)) ((cons? V4622) (@s (shen.arg->str (hd V4622) V4623) (@s " " (shen.iter-list (tl V4622) V4623 (- V4624 1))))) (true (@s "|" (@s " " (shen.arg->str V4622 V4623))))))

(defun shen.str->str (V4631 V4632) (cond ((= shen.a V4632) V4631) (true (@s (n->string 34) (@s V4631 (n->string 34))))))

(defun shen.vector->str (V4635 V4636) (if (shen.print-vector? V4635) ((function (<-address V4635 0)) V4635) (if (vector? V4635) (@s "<" (@s (shen.iter-vector V4635 1 V4636 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V4635 0 V4636 (shen.maxseq)) ">>"))))))

(defun shen.empty-absvector? (V4638) (= V4638 (value shen.*empty-absvector*)))

(defun shen.print-vector? (V4640) (and (not (shen.empty-absvector? V4640)) (let First (<-address V4640 0) (or (= First shen.tuple) (or (= First shen.pvar) (or (= First shen.dictionary) (and (not (number? First)) (shen.fbound? First))))))))

(defun shen.fbound? (V4642) (trap-error (do (shen.lookup-func V4642) true) (lambda E false)))

(defun shen.tuple (V4644) (cn "(@p " (shen.app (<-address V4644 1) (cn " " (shen.app (<-address V4644 2) ")" shen.s)) shen.s)))

(defun shen.dictionary (V4646) "(dict ...)")

(defun shen.iter-vector (V4657 V4658 V4659 V4660) (cond ((= 0 V4660) "... etc") (true (let Item (trap-error (<-address V4657 V4658) (lambda E shen.out-of-bounds)) (let Next (trap-error (<-address V4657 (+ V4658 1)) (lambda E shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V4659) (@s (shen.arg->str Item V4659) (@s " " (shen.iter-vector V4657 (+ V4658 1) V4659 (- V4660 1)))))))))))

(defun shen.atom->str (V4662) (trap-error (str V4662) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V4664) (or (empty? V4664) (cons? V4664)))



