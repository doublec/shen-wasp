"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.f_error (V3077) (do (shen.prhush (cn "partial function " (shen.app V3077 ";
" shen.a)) (stoutput)) (do (if (and (not (shen.tracked? V3077)) (y-or-n? (cn "track " (shen.app V3077 "? " shen.a)))) (shen.track-function (ps V3077)) shen.ok) (simple-error "aborted"))))

(defun shen.tracked? (V3079) (element? V3079 (value shen.*tracking*)))

(defun track (V3081) (let Source (ps V3081) (shen.track-function Source)))

(defun shen.track-function (V3083) (cond ((and (cons? V3083) (and (= defun (hd V3083)) (and (cons? (tl V3083)) (and (cons? (tl (tl V3083))) (and (cons? (tl (tl (tl V3083)))) (= () (tl (tl (tl (tl V3083)))))))))) (let KL (cons defun (cons (hd (tl V3083)) (cons (hd (tl (tl V3083))) (cons (shen.insert-tracking-code (hd (tl V3083)) (hd (tl (tl V3083))) (hd (tl (tl (tl V3083))))) ())))) (let Ob (eval-kl KL) (let Tr (set shen.*tracking* (cons Ob (value shen.*tracking*))) Ob)))) (true (shen.f_error shen.track-function))))

(defun shen.insert-tracking-code (V3087 V3088 V3089) (cons do (cons (cons set (cons shen.*call* (cons (cons + (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.input-track (cons (cons value (cons shen.*call* ())) (cons V3087 (cons (shen.cons_form V3088) ())))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons (cons let (cons Result (cons V3089 (cons (cons do (cons (cons shen.output-track (cons (cons value (cons shen.*call* ())) (cons V3087 (cons Result ())))) (cons (cons do (cons (cons set (cons shen.*call* (cons (cons - (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons Result ()))) ()))) ()))) ())))) ()))) ()))) ()))))

(defun step (V3095) (cond ((= + V3095) (set shen.*step* true)) ((= - V3095) (set shen.*step* false)) (true (simple-error "step expects a + or a -.
"))))

(defun spy (V3101) (cond ((= + V3101) (set shen.*spy* true)) ((= - V3101) (set shen.*spy* false)) (true (simple-error "spy expects a + or a -.
"))))

(defun shen.terpri-or-read-char () (if (value shen.*step*) (shen.check-byte (read-byte (value *stinput*))) (nl 1)))

(defun shen.check-byte (V3107) (cond ((= V3107 (shen.hat)) (simple-error "aborted")) (true true)))

(defun shen.input-track (V3111 V3112 V3113) (do (shen.prhush (cn "
" (shen.app (shen.spaces V3111) (cn "<" (shen.app V3111 (cn "> Inputs to " (shen.app V3112 (cn " 
" (shen.app (shen.spaces V3111) "" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (shen.recursively-print V3113)))

(defun shen.recursively-print (V3115) (cond ((= () V3115) (shen.prhush " ==>" (stoutput))) ((cons? V3115) (do (print (hd V3115)) (do (shen.prhush ", " (stoutput)) (shen.recursively-print (tl V3115))))) (true (shen.f_error shen.recursively-print))))

(defun shen.spaces (V3117) (cond ((= 0 V3117) "") (true (cn " " (shen.spaces (- V3117 1))))))

(defun shen.output-track (V3121 V3122 V3123) (shen.prhush (cn "
" (shen.app (shen.spaces V3121) (cn "<" (shen.app V3121 (cn "> Output from " (shen.app V3122 (cn " 
" (shen.app (shen.spaces V3121) (cn "==> " (shen.app V3123 "" shen.s)) shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)))

(defun untrack (V3125) (let Tracking (value shen.*tracking*) (let Tracking (set shen.*tracking* (remove V3125 Tracking)) (eval (ps V3125)))))

(defun profile (V3127) (shen.profile-help (ps V3127)))

(defun shen.profile-help (V3133) (cond ((and (cons? V3133) (and (= defun (hd V3133)) (and (cons? (tl V3133)) (and (cons? (tl (tl V3133))) (and (cons? (tl (tl (tl V3133)))) (= () (tl (tl (tl (tl V3133)))))))))) (let G (gensym shen.f) (let Profile (cons defun (cons (hd (tl V3133)) (cons (hd (tl (tl V3133))) (cons (shen.profile-func (hd (tl V3133)) (hd (tl (tl V3133))) (cons G (hd (tl (tl V3133))))) ())))) (let Def (cons defun (cons G (cons (hd (tl (tl V3133))) (cons (subst G (hd (tl V3133)) (hd (tl (tl (tl V3133))))) ())))) (let CompileProfile (shen.eval-without-macros Profile) (let CompileG (shen.eval-without-macros Def) (hd (tl V3133)))))))) (true (simple-error "Cannot profile.
"))))

(defun unprofile (V3135) (untrack V3135))

(defun shen.profile-func (V3139 V3140 V3141) (cons let (cons Start (cons (cons get-time (cons run ())) (cons (cons let (cons Result (cons V3141 (cons (cons let (cons Finish (cons (cons - (cons (cons get-time (cons run ())) (cons Start ()))) (cons (cons let (cons Record (cons (cons shen.put-profile (cons V3139 (cons (cons + (cons (cons shen.get-profile (cons V3139 ())) (cons Finish ()))) ()))) (cons Result ())))) ())))) ())))) ())))))

(defun profile-results (V3143) (let Results (shen.get-profile V3143) (let Initialise (shen.put-profile V3143 0) (@p V3143 Results))))

(defun shen.get-profile (V3145) (trap-error (get V3145 profile (value *property-vector*)) (lambda E 0)))

(defun shen.put-profile (V3148 V3149) (put V3148 profile V3149 (value *property-vector*)))



