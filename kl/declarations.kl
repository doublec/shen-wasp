"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.initialise_arity_table (V393) (cond ((= () V393) ()) ((and (cons? V393) (cons? (tl V393))) (let DecArity (put (hd V393) arity (hd (tl V393)) (value *property-vector*)) (shen.initialise_arity_table (tl (tl V393))))) (true (shen.f_error shen.initialise_arity_table))))

(defun arity (V395) (trap-error (get V395 arity (value *property-vector*)) (lambda E -1)))

(defun systemf (V397) (let Shen (intern "shen") (let External (get Shen shen.external-symbols (value *property-vector*)) (let Place (put Shen shen.external-symbols (adjoin V397 External) (value *property-vector*)) V397))))

(defun adjoin (V400 V401) (if (element? V400 V401) V401 (cons V400 V401)))

(defun shen.lambda-form-entry (V403) (cond ((= package V403) ()) ((= receive V403) ()) (true (let ArityF (arity V403) (if (= ArityF -1) () (if (= ArityF 0) () (cons (cons V403 (eval-kl (shen.lambda-form V403 ArityF))) ())))))))

(defun shen.lambda-form (V406 V407) (cond ((= 0 V407) V406) (true (let X (gensym V) (cons lambda (cons X (cons (shen.lambda-form (shen.add-end V406 X) (- V407 1)) ())))))))

(defun shen.add-end (V410 V411) (cond ((cons? V410) (append V410 (cons V411 ()))) (true (cons V410 (cons V411 ())))))

(defun shen.set-lambda-form-entry (V413) (cond ((cons? V413) (put (hd V413) shen.lambda-form (tl V413) (value *property-vector*))) (true (shen.f_error shen.set-lambda-form-entry))))

(defun specialise (V415) (do (set shen.*special* (cons V415 (value shen.*special*))) V415))

(defun unspecialise (V417) (do (set shen.*special* (remove V417 (value shen.*special*))) V417))



