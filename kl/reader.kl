"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.read-char-code (V1372) (read-byte V1372))

(defun read-file-as-bytelist (V1374) (shen.read-file-as-Xlist V1374 (lambda S (read-byte S))))

(defun shen.read-file-as-charlist (V1376) (shen.read-file-as-Xlist V1376 (lambda S (shen.read-char-code S))))

(defun shen.read-file-as-Xlist (V1379 V1380) (let Stream (open V1379 in) (let X (V1380 Stream) (let Xs (shen.read-file-as-Xlist-help Stream V1380 X ()) (let Close (close Stream) (reverse Xs))))))

(defun shen.read-file-as-Xlist-help (V1385 V1386 V1387 V1388) (cond ((= -1 V1387) V1388) (true (shen.read-file-as-Xlist-help V1385 V1386 (V1386 V1385) (cons V1387 V1388)))))

(defun read-file-as-string (V1390) (let Stream (open V1390 in) (shen.rfas-h Stream (shen.read-char-code Stream) "")))

(defun shen.rfas-h (V1394 V1395 V1396) (cond ((= -1 V1395) (do (close V1394) V1396)) (true (shen.rfas-h V1394 (shen.read-char-code V1394) (cn V1396 (n->string V1395))))))

(defun input (V1398) (eval-kl (read V1398)))

(defun input+ (V1401 V1402) (let Mono? (shen.monotype V1401) (let Input (read V1402) (if (= false (shen.typecheck Input (shen.demodulate V1401))) (simple-error (cn "type error: " (shen.app Input (cn " is not of type " (shen.app V1401 "
" shen.r)) shen.r))) (eval-kl Input)))))

(defun shen.monotype (V1404) (cond ((cons? V1404) (map (lambda Z (shen.monotype Z)) V1404)) (true (if (variable? V1404) (simple-error (cn "input+ expects a monotype: not " (shen.app V1404 "
" shen.a))) V1404))))

(defun read (V1406) (hd (shen.read-loop V1406 (shen.read-char-code V1406) ())))

(defun it () (value shen.*it*))

(defun shen.read-loop (V1414 V1415 V1416) (cond ((= 94 V1415) (simple-error "read aborted")) ((= -1 V1415) (if (empty? V1416) (simple-error "error: empty stream") (compile (lambda X (shen.<st_input> X)) V1416 (lambda E E)))) ((shen.terminator? V1415) (let AllChars (append V1416 (cons V1415 ())) (let It (shen.record-it AllChars) (let Read (compile (lambda X (shen.<st_input> X)) AllChars (lambda E shen.nextbyte)) (if (or (= Read shen.nextbyte) (empty? Read)) (shen.read-loop V1414 (shen.read-char-code V1414) AllChars) Read))))) (true (shen.read-loop V1414 (shen.read-char-code V1414) (append V1416 (cons V1415 ()))))))

(defun shen.terminator? (V1418) (element? V1418 (cons 9 (cons 10 (cons 13 (cons 32 (cons 34 (cons 41 (cons 93 ())))))))))

(defun lineread (V1420) (shen.lineread-loop (shen.read-char-code V1420) () V1420))

(defun shen.lineread-loop (V1425 V1426 V1427) (cond ((= -1 V1425) (if (empty? V1426) (simple-error "empty stream") (compile (lambda X (shen.<st_input> X)) V1426 (lambda E E)))) ((= V1425 (shen.hat)) (simple-error "line read aborted")) ((element? V1425 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V1426 (lambda E shen.nextline)) (let It (shen.record-it V1426) (if (or (= Line shen.nextline) (empty? Line)) (shen.lineread-loop (shen.read-char-code V1427) (append V1426 (cons V1425 ())) V1427) Line)))) (true (shen.lineread-loop (shen.read-char-code V1427) (append V1426 (cons V1425 ())) V1427))))

(defun shen.record-it (V1429) (let TrimLeft (shen.trim-whitespace V1429) (let TrimRight (shen.trim-whitespace (reverse TrimLeft)) (let Trimmed (reverse TrimRight) (shen.record-it-h Trimmed)))))

(defun shen.trim-whitespace (V1431) (cond ((and (cons? V1431) (element? (hd V1431) (cons 9 (cons 10 (cons 13 (cons 32 ())))))) (shen.trim-whitespace (tl V1431))) (true V1431)))

(defun shen.record-it-h (V1433) (do (set shen.*it* (shen.cn-all (map (lambda X (n->string X)) V1433))) V1433))

(defun shen.cn-all (V1435) (cond ((= () V1435) "") ((cons? V1435) (cn (hd V1435) (shen.cn-all (tl V1435)))) (true (shen.f_error shen.cn-all))))

(defun read-file (V1437) (let Charlist (shen.read-file-as-charlist V1437) (compile (lambda X (shen.<st_input> X)) Charlist (lambda X (shen.read-error X)))))

(defun read-from-string (V1439) (let Ns (map (lambda X (string->n X)) (explode V1439)) (compile (lambda X (shen.<st_input> X)) Ns (lambda X (shen.read-error X)))))

(defun shen.read-error (V1447) (cond ((and (cons? V1447) (and (cons? (hd V1447)) (and (cons? (tl V1447)) (= () (tl (tl V1447)))))) (simple-error (cn "read error here:

 " (shen.app (shen.compress-50 50 (hd V1447)) "
" shen.a)))) (true (simple-error "read error
"))))

(defun shen.compress-50 (V1454 V1455) (cond ((= () V1455) "") ((= 0 V1454) "") ((cons? V1455) (cn (n->string (hd V1455)) (shen.compress-50 (- V1454 1) (tl V1455)))) (true (shen.f_error shen.compress-50))))

(defun shen.<st_input> (V1457) (let YaccParse (let Parse_shen.<lsb> (shen.<lsb> V1457) (if (not (= (fail) Parse_shen.<lsb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lsb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rsb> (shen.<rsb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rsb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rsb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (cons (macroexpand (shen.cons_form (shen.hdtl Parse_shen.<st_input1>))) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lrb> (shen.<lrb> V1457) (if (not (= (fail) Parse_shen.<lrb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lrb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rrb> (shen.<rrb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rrb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rrb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (shen.package-macro (macroexpand (shen.hdtl Parse_shen.<st_input1>)) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lcurly> (shen.<lcurly> V1457) (if (not (= (fail) Parse_shen.<lcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<lcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons { (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<rcurly> (shen.<rcurly> V1457) (if (not (= (fail) Parse_shen.<rcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<rcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons } (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<bar> (shen.<bar> V1457) (if (not (= (fail) Parse_shen.<bar>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<bar>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons bar! (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<semicolon> (shen.<semicolon> V1457) (if (not (= (fail) Parse_shen.<semicolon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<semicolon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons ; (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1457) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<equal> (shen.<equal> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<equal>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<equal>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons := (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1457) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<minus> (shen.<minus> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons :- (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1457) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons : (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comma> (shen.<comma> V1457) (if (not (= (fail) Parse_shen.<comma>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comma>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (intern ",") (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V1457) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<atom> (shen.<atom> V1457) (if (not (= (fail) Parse_shen.<atom>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<atom>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (macroexpand (shen.hdtl Parse_shen.<atom>)) (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<whitespaces> (shen.<whitespaces> V1457) (if (not (= (fail) Parse_shen.<whitespaces>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<whitespaces>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1457) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<lsb> (V1460) (if (and (cons? (hd V1460)) (= 91 (shen.hdhd V1460))) (let NewStream1458 (shen.pair (shen.tlhd V1460) (shen.hdtl V1460)) (shen.pair (hd NewStream1458) shen.skip)) (fail)))

(defun shen.<rsb> (V1463) (if (and (cons? (hd V1463)) (= 93 (shen.hdhd V1463))) (let NewStream1461 (shen.pair (shen.tlhd V1463) (shen.hdtl V1463)) (shen.pair (hd NewStream1461) shen.skip)) (fail)))

(defun shen.<lcurly> (V1466) (if (and (cons? (hd V1466)) (= 123 (shen.hdhd V1466))) (let NewStream1464 (shen.pair (shen.tlhd V1466) (shen.hdtl V1466)) (shen.pair (hd NewStream1464) shen.skip)) (fail)))

(defun shen.<rcurly> (V1469) (if (and (cons? (hd V1469)) (= 125 (shen.hdhd V1469))) (let NewStream1467 (shen.pair (shen.tlhd V1469) (shen.hdtl V1469)) (shen.pair (hd NewStream1467) shen.skip)) (fail)))

(defun shen.<bar> (V1472) (if (and (cons? (hd V1472)) (= 124 (shen.hdhd V1472))) (let NewStream1470 (shen.pair (shen.tlhd V1472) (shen.hdtl V1472)) (shen.pair (hd NewStream1470) shen.skip)) (fail)))

(defun shen.<semicolon> (V1475) (if (and (cons? (hd V1475)) (= 59 (shen.hdhd V1475))) (let NewStream1473 (shen.pair (shen.tlhd V1475) (shen.hdtl V1475)) (shen.pair (hd NewStream1473) shen.skip)) (fail)))

(defun shen.<colon> (V1478) (if (and (cons? (hd V1478)) (= 58 (shen.hdhd V1478))) (let NewStream1476 (shen.pair (shen.tlhd V1478) (shen.hdtl V1478)) (shen.pair (hd NewStream1476) shen.skip)) (fail)))

(defun shen.<comma> (V1481) (if (and (cons? (hd V1481)) (= 44 (shen.hdhd V1481))) (let NewStream1479 (shen.pair (shen.tlhd V1481) (shen.hdtl V1481)) (shen.pair (hd NewStream1479) shen.skip)) (fail)))

(defun shen.<equal> (V1484) (if (and (cons? (hd V1484)) (= 61 (shen.hdhd V1484))) (let NewStream1482 (shen.pair (shen.tlhd V1484) (shen.hdtl V1484)) (shen.pair (hd NewStream1482) shen.skip)) (fail)))

(defun shen.<minus> (V1487) (if (and (cons? (hd V1487)) (= 45 (shen.hdhd V1487))) (let NewStream1485 (shen.pair (shen.tlhd V1487) (shen.hdtl V1487)) (shen.pair (hd NewStream1485) shen.skip)) (fail)))

(defun shen.<lrb> (V1490) (if (and (cons? (hd V1490)) (= 40 (shen.hdhd V1490))) (let NewStream1488 (shen.pair (shen.tlhd V1490) (shen.hdtl V1490)) (shen.pair (hd NewStream1488) shen.skip)) (fail)))

(defun shen.<rrb> (V1493) (if (and (cons? (hd V1493)) (= 41 (shen.hdhd V1493))) (let NewStream1491 (shen.pair (shen.tlhd V1493) (shen.hdtl V1493)) (shen.pair (hd NewStream1491) shen.skip)) (fail)))

(defun shen.<atom> (V1495) (let YaccParse (let Parse_shen.<str> (shen.<str> V1495) (if (not (= (fail) Parse_shen.<str>)) (shen.pair (hd Parse_shen.<str>) (shen.control-chars (shen.hdtl Parse_shen.<str>))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<number> (shen.<number> V1495) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<sym> (shen.<sym> V1495) (if (not (= (fail) Parse_shen.<sym>)) (shen.pair (hd Parse_shen.<sym>) (if (= (shen.hdtl Parse_shen.<sym>) "<>") (cons vector (cons 0 ())) (intern (shen.hdtl Parse_shen.<sym>)))) (fail))) YaccParse)) YaccParse)))

(defun shen.control-chars (V1497) (cond ((= () V1497) "") ((and (cons? V1497) (and (= "c" (hd V1497)) (and (cons? (tl V1497)) (= "#" (hd (tl V1497)))))) (let CodePoint (shen.code-point (tl (tl V1497))) (let AfterCodePoint (shen.after-codepoint (tl (tl V1497))) (@s (n->string (shen.decimalise CodePoint)) (shen.control-chars AfterCodePoint))))) ((cons? V1497) (@s (hd V1497) (shen.control-chars (tl V1497)))) (true (shen.f_error shen.control-chars))))

(defun shen.code-point (V1501) (cond ((and (cons? V1501) (= ";" (hd V1501))) "") ((and (cons? V1501) (element? (hd V1501) (cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))) (cons (hd V1501) (shen.code-point (tl V1501)))) (true (simple-error (cn "code point parse error " (shen.app V1501 "
" shen.a))))))

(defun shen.after-codepoint (V1507) (cond ((= () V1507) ()) ((and (cons? V1507) (= ";" (hd V1507))) (tl V1507)) ((cons? V1507) (shen.after-codepoint (tl V1507))) (true (shen.f_error shen.after-codepoint))))

(defun shen.decimalise (V1509) (shen.pre (reverse (shen.digits->integers V1509)) 0))

(defun shen.digits->integers (V1515) (cond ((and (cons? V1515) (= "0" (hd V1515))) (cons 0 (shen.digits->integers (tl V1515)))) ((and (cons? V1515) (= "1" (hd V1515))) (cons 1 (shen.digits->integers (tl V1515)))) ((and (cons? V1515) (= "2" (hd V1515))) (cons 2 (shen.digits->integers (tl V1515)))) ((and (cons? V1515) (= "3" (hd V1515))) (cons 3 (shen.digits->integers (tl V1515)))) ((and (cons? V1515) (= "4" (hd V1515))) (cons 4 (shen.digits->integers (tl V1515)))) ((and (cons? V1515) (= "5" (hd V1515))) (cons 5 (shen.digits->integers (tl V1515)))) ((and (cons? V1515) (= "6" (hd V1515))) (cons 6 (shen.digits->integers (tl V1515)))) ((and (cons? V1515) (= "7" (hd V1515))) (cons 7 (shen.digits->integers (tl V1515)))) ((and (cons? V1515) (= "8" (hd V1515))) (cons 8 (shen.digits->integers (tl V1515)))) ((and (cons? V1515) (= "9" (hd V1515))) (cons 9 (shen.digits->integers (tl V1515)))) (true ())))

(defun shen.<sym> (V1517) (let Parse_shen.<alpha> (shen.<alpha> V1517) (if (not (= (fail) Parse_shen.<alpha>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alpha>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))))

(defun shen.<alphanums> (V1519) (let YaccParse (let Parse_shen.<alphanum> (shen.<alphanum> V1519) (if (not (= (fail) Parse_shen.<alphanum>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alphanum>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alphanum>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1519) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) "") (fail))) YaccParse)))

(defun shen.<alphanum> (V1521) (let YaccParse (let Parse_shen.<alpha> (shen.<alpha> V1521) (if (not (= (fail) Parse_shen.<alpha>)) (shen.pair (hd Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alpha>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<num> (shen.<num> V1521) (if (not (= (fail) Parse_shen.<num>)) (shen.pair (hd Parse_shen.<num>) (shen.hdtl Parse_shen.<num>)) (fail))) YaccParse)))

(defun shen.<num> (V1523) (if (cons? (hd V1523)) (let Parse_Char (shen.hdhd V1523) (if (shen.numbyte? Parse_Char) (shen.pair (hd (shen.pair (shen.tlhd V1523) (shen.hdtl V1523))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.numbyte? (V1529) (cond ((= 48 V1529) true) ((= 49 V1529) true) ((= 50 V1529) true) ((= 51 V1529) true) ((= 52 V1529) true) ((= 53 V1529) true) ((= 54 V1529) true) ((= 55 V1529) true) ((= 56 V1529) true) ((= 57 V1529) true) (true false)))

(defun shen.<alpha> (V1531) (if (cons? (hd V1531)) (let Parse_Char (shen.hdhd V1531) (if (shen.symbol-code? Parse_Char) (shen.pair (hd (shen.pair (shen.tlhd V1531) (shen.hdtl V1531))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.symbol-code? (V1533) (or (= V1533 126) (or (and (> V1533 94) (< V1533 123)) (or (and (> V1533 59) (< V1533 91)) (or (and (> V1533 41) (and (< V1533 58) (not (= V1533 44)))) (or (and (> V1533 34) (< V1533 40)) (= V1533 33)))))))

(defun shen.<str> (V1535) (let Parse_shen.<dbq> (shen.<dbq> V1535) (if (not (= (fail) Parse_shen.<dbq>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<dbq>) (if (not (= (fail) Parse_shen.<strcontents>)) (let Parse_shen.<dbq> (shen.<dbq> Parse_shen.<strcontents>) (if (not (= (fail) Parse_shen.<dbq>)) (shen.pair (hd Parse_shen.<dbq>) (shen.hdtl Parse_shen.<strcontents>)) (fail))) (fail))) (fail))))

(defun shen.<dbq> (V1537) (if (cons? (hd V1537)) (let Parse_Char (shen.hdhd V1537) (if (= Parse_Char 34) (shen.pair (hd (shen.pair (shen.tlhd V1537) (shen.hdtl V1537))) Parse_Char) (fail))) (fail)))

(defun shen.<strcontents> (V1539) (let YaccParse (let Parse_shen.<strc> (shen.<strc> V1539) (if (not (= (fail) Parse_shen.<strc>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<strc>) (if (not (= (fail) Parse_shen.<strcontents>)) (shen.pair (hd Parse_shen.<strcontents>) (cons (shen.hdtl Parse_shen.<strc>) (shen.hdtl Parse_shen.<strcontents>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1539) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<byte> (V1541) (if (cons? (hd V1541)) (let Parse_Char (shen.hdhd V1541) (shen.pair (hd (shen.pair (shen.tlhd V1541) (shen.hdtl V1541))) (n->string Parse_Char))) (fail)))

(defun shen.<strc> (V1543) (if (cons? (hd V1543)) (let Parse_Char (shen.hdhd V1543) (if (not (= Parse_Char 34)) (shen.pair (hd (shen.pair (shen.tlhd V1543) (shen.hdtl V1543))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.<number> (V1545) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V1545) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (- 0 (shen.hdtl Parse_shen.<number>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<plus> (shen.<plus> V1545) (if (not (= (fail) Parse_shen.<plus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<plus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V1545) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<postdigits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1)))) (fail))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V1545) (if (not (= (fail) Parse_shen.<digits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<digits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V1545) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (shen.pair (hd Parse_shen.<postdigits>) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V1545) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<E> (V1548) (if (and (cons? (hd V1548)) (= 101 (shen.hdhd V1548))) (let NewStream1546 (shen.pair (shen.tlhd V1548) (shen.hdtl V1548)) (shen.pair (hd NewStream1546) shen.skip)) (fail)))

(defun shen.<log10> (V1550) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V1550) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (- 0 (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V1550) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)))

(defun shen.<plus> (V1552) (if (cons? (hd V1552)) (let Parse_Char (shen.hdhd V1552) (if (= Parse_Char 43) (shen.pair (hd (shen.pair (shen.tlhd V1552) (shen.hdtl V1552))) Parse_Char) (fail))) (fail)))

(defun shen.<stop> (V1554) (if (cons? (hd V1554)) (let Parse_Char (shen.hdhd V1554) (if (= Parse_Char 46) (shen.pair (hd (shen.pair (shen.tlhd V1554) (shen.hdtl V1554))) Parse_Char) (fail))) (fail)))

(defun shen.<predigits> (V1556) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V1556) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1556) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<postdigits> (V1558) (let Parse_shen.<digits> (shen.<digits> V1558) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))))

(defun shen.<digits> (V1560) (let YaccParse (let Parse_shen.<digit> (shen.<digit> V1560) (if (not (= (fail) Parse_shen.<digit>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<digit>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (cons (shen.hdtl Parse_shen.<digit>) (shen.hdtl Parse_shen.<digits>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digit> (shen.<digit> V1560) (if (not (= (fail) Parse_shen.<digit>)) (shen.pair (hd Parse_shen.<digit>) (cons (shen.hdtl Parse_shen.<digit>) ())) (fail))) YaccParse)))

(defun shen.<digit> (V1562) (if (cons? (hd V1562)) (let Parse_X (shen.hdhd V1562) (if (shen.numbyte? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V1562) (shen.hdtl V1562))) (shen.byte->digit Parse_X)) (fail))) (fail)))

(defun shen.byte->digit (V1564) (cond ((= 48 V1564) 0) ((= 49 V1564) 1) ((= 50 V1564) 2) ((= 51 V1564) 3) ((= 52 V1564) 4) ((= 53 V1564) 5) ((= 54 V1564) 6) ((= 55 V1564) 7) ((= 56 V1564) 8) ((= 57 V1564) 9) (true (shen.f_error shen.byte->digit))))

(defun shen.pre (V1569 V1570) (cond ((= () V1569) 0) ((cons? V1569) (+ (* (shen.expt 10 V1570) (hd V1569)) (shen.pre (tl V1569) (+ V1570 1)))) (true (shen.f_error shen.pre))))

(defun shen.post (V1575 V1576) (cond ((= () V1575) 0) ((cons? V1575) (+ (* (shen.expt 10 (- 0 V1576)) (hd V1575)) (shen.post (tl V1575) (+ V1576 1)))) (true (shen.f_error shen.post))))

(defun shen.expt (V1581 V1582) (cond ((= 0 V1582) 1) ((> V1582 0) (* V1581 (shen.expt V1581 (- V1582 1)))) (true (* 1.000000 (/ (shen.expt V1581 (+ V1582 1)) V1581)))))

(defun shen.<st_input1> (V1584) (let Parse_shen.<st_input> (shen.<st_input> V1584) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<st_input2> (V1586) (let Parse_shen.<st_input> (shen.<st_input> V1586) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<comment> (V1588) (let YaccParse (let Parse_shen.<singleline> (shen.<singleline> V1588) (if (not (= (fail) Parse_shen.<singleline>)) (shen.pair (hd Parse_shen.<singleline>) shen.skip) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<multiline> (shen.<multiline> V1588) (if (not (= (fail) Parse_shen.<multiline>)) (shen.pair (hd Parse_shen.<multiline>) shen.skip) (fail))) YaccParse)))

(defun shen.<singleline> (V1590) (let Parse_shen.<backslash> (shen.<backslash> V1590) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<anysingle>)) (let Parse_shen.<return> (shen.<return> Parse_shen.<anysingle>) (if (not (= (fail) Parse_shen.<return>)) (shen.pair (hd Parse_shen.<return>) shen.skip) (fail))) (fail))) (fail))) (fail))))

(defun shen.<backslash> (V1593) (if (and (cons? (hd V1593)) (= 92 (shen.hdhd V1593))) (let NewStream1591 (shen.pair (shen.tlhd V1593) (shen.hdtl V1593)) (shen.pair (hd NewStream1591) shen.skip)) (fail)))

(defun shen.<anysingle> (V1595) (let YaccParse (let Parse_shen.<non-return> (shen.<non-return> V1595) (if (not (= (fail) Parse_shen.<non-return>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<non-return>) (if (not (= (fail) Parse_shen.<anysingle>)) (shen.pair (hd Parse_shen.<anysingle>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1595) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) shen.skip) (fail))) YaccParse)))

(defun shen.<non-return> (V1597) (if (cons? (hd V1597)) (let Parse_X (shen.hdhd V1597) (if (not (element? Parse_X (cons 10 (cons 13 ())))) (shen.pair (hd (shen.pair (shen.tlhd V1597) (shen.hdtl V1597))) shen.skip) (fail))) (fail)))

(defun shen.<return> (V1599) (if (cons? (hd V1599)) (let Parse_X (shen.hdhd V1599) (if (element? Parse_X (cons 10 (cons 13 ()))) (shen.pair (hd (shen.pair (shen.tlhd V1599) (shen.hdtl V1599))) shen.skip) (fail))) (fail)))

(defun shen.<multiline> (V1601) (let Parse_shen.<backslash> (shen.<backslash> V1601) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<times> (shen.<times> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (fail))))

(defun shen.<times> (V1604) (if (and (cons? (hd V1604)) (= 42 (shen.hdhd V1604))) (let NewStream1602 (shen.pair (shen.tlhd V1604) (shen.hdtl V1604)) (shen.pair (hd NewStream1602) shen.skip)) (fail)))

(defun shen.<anymulti> (V1606) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V1606) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<times> (shen.<times> V1606) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<backslash>)) (shen.pair (hd Parse_shen.<backslash>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (if (cons? (hd V1606)) (let Parse_X (shen.hdhd V1606) (let Parse_shen.<anymulti> (shen.<anymulti> (shen.pair (shen.tlhd V1606) (shen.hdtl V1606))) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail)))) (fail)) YaccParse)) YaccParse)))

(defun shen.<whitespaces> (V1608) (let YaccParse (let Parse_shen.<whitespace> (shen.<whitespace> V1608) (if (not (= (fail) Parse_shen.<whitespace>)) (let Parse_shen.<whitespaces> (shen.<whitespaces> Parse_shen.<whitespace>) (if (not (= (fail) Parse_shen.<whitespaces>)) (shen.pair (hd Parse_shen.<whitespaces>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<whitespace> (shen.<whitespace> V1608) (if (not (= (fail) Parse_shen.<whitespace>)) (shen.pair (hd Parse_shen.<whitespace>) shen.skip) (fail))) YaccParse)))

(defun shen.<whitespace> (V1610) (if (cons? (hd V1610)) (let Parse_X (shen.hdhd V1610) (if (let Parse_Case Parse_X (or (= Parse_Case 32) (or (= Parse_Case 13) (or (= Parse_Case 10) (= Parse_Case 9))))) (shen.pair (hd (shen.pair (shen.tlhd V1610) (shen.hdtl V1610))) shen.skip) (fail))) (fail)))

(defun shen.cons_form (V1612) (cond ((= () V1612) ()) ((and (cons? V1612) (and (cons? (tl V1612)) (and (cons? (tl (tl V1612))) (and (= () (tl (tl (tl V1612)))) (= (hd (tl V1612)) bar!))))) (cons cons (cons (hd V1612) (tl (tl V1612))))) ((cons? V1612) (cons cons (cons (hd V1612) (cons (shen.cons_form (tl V1612)) ())))) (true (shen.f_error shen.cons_form))))

(defun shen.package-macro (V1617 V1618) (cond ((and (cons? V1617) (and (= $ (hd V1617)) (and (cons? (tl V1617)) (= () (tl (tl V1617)))))) (append (explode (hd (tl V1617))) V1618)) ((and (cons? V1617) (and (= package (hd V1617)) (and (cons? (tl V1617)) (and (= null (hd (tl V1617))) (cons? (tl (tl V1617))))))) (append (tl (tl (tl V1617))) V1618)) ((and (cons? V1617) (and (= package (hd V1617)) (and (cons? (tl V1617)) (cons? (tl (tl V1617)))))) (let ListofExceptions (shen.eval-without-macros (hd (tl (tl V1617)))) (let External (shen.record-exceptions ListofExceptions (hd (tl V1617))) (let PackageNameDot (intern (cn (str (hd (tl V1617))) ".")) (let ExpPackageNameDot (explode PackageNameDot) (let Packaged (shen.packageh PackageNameDot ListofExceptions (tl (tl (tl V1617))) ExpPackageNameDot) (let Internal (shen.record-internal (hd (tl V1617)) (shen.internal-symbols ExpPackageNameDot Packaged)) (append Packaged V1618)))))))) (true (cons V1617 V1618))))

(defun shen.record-exceptions (V1621 V1622) (let CurrExceptions (trap-error (get V1622 shen.external-symbols (value *property-vector*)) (lambda E ())) (let AllExceptions (union V1621 CurrExceptions) (put V1622 shen.external-symbols AllExceptions (value *property-vector*)))))

(defun shen.record-internal (V1625 V1626) (put V1625 shen.internal-symbols (union V1626 (trap-error (get V1625 shen.internal-symbols (value *property-vector*)) (lambda E ()))) (value *property-vector*)))

(defun shen.internal-symbols (V1637 V1638) (cond ((and (symbol? V1638) (shen.prefix? V1637 (explode V1638))) (cons V1638 ())) ((cons? V1638) (union (shen.internal-symbols V1637 (hd V1638)) (shen.internal-symbols V1637 (tl V1638)))) (true ())))

(defun shen.packageh (V1655 V1656 V1657 V1658) (cond ((cons? V1657) (cons (shen.packageh V1655 V1656 (hd V1657) V1658) (shen.packageh V1655 V1656 (tl V1657) V1658))) ((or (shen.sysfunc? V1657) (or (variable? V1657) (or (element? V1657 V1656) (or (shen.doubleunderline? V1657) (shen.singleunderline? V1657))))) V1657) ((and (symbol? V1657) (let ExplodeX (explode V1657) (and (not (shen.prefix? (cons "s" (cons "h" (cons "e" (cons "n" (cons "." ()))))) ExplodeX)) (not (shen.prefix? V1658 ExplodeX))))) (concat V1655 V1657)) (true V1657)))



