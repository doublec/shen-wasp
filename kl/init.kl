"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.initialise-environment () (do (set shen.*installing-kl* false) (do (set shen.*history* ()) (do (set shen.*tc* false) (do (set *property-vector* (shen.dict 20000)) (do (set shen.*process-counter* 0) (do (set shen.*varcounter* (vector 10000)) (do (set shen.*prologvectors* (vector 10000)) (do (set shen.*demodulation-function* (lambda X X)) (do (set shen.*custom-pattern-compiler* (lambda Arg (lambda OnFail (thaw OnFail)))) (do (set shen.*custom-pattern-reducer* (lambda Arg Arg)) (do (set shen.*macroreg* (cons shen.timer-macro (cons shen.cases-macro (cons shen.abs-macro (cons shen.put/get-macro (cons shen.compile-macro (cons shen.datatype-macro (cons shen.let-macro (cons shen.assoc-macro (cons shen.make-string-macro (cons shen.output-macro (cons shen.input-macro (cons shen.error-macro (cons shen.prolog-macro (cons shen.synonyms-macro (cons shen.nl-macro (cons shen.@s-macro (cons shen.defprolog-macro (cons shen.function-macro ()))))))))))))))))))) (do (set *macros* (cons (lambda X (shen.timer-macro X)) (cons (lambda X (shen.cases-macro X)) (cons (lambda X (shen.abs-macro X)) (cons (lambda X (shen.put/get-macro X)) (cons (lambda X (shen.compile-macro X)) (cons (lambda X (shen.datatype-macro X)) (cons (lambda X (shen.let-macro X)) (cons (lambda X (shen.assoc-macro X)) (cons (lambda X (shen.make-string-macro X)) (cons (lambda X (shen.output-macro X)) (cons (lambda X (shen.input-macro X)) (cons (lambda X (shen.error-macro X)) (cons (lambda X (shen.prolog-macro X)) (cons (lambda X (shen.synonyms-macro X)) (cons (lambda X (shen.nl-macro X)) (cons (lambda X (shen.@s-macro X)) (cons (lambda X (shen.defprolog-macro X)) (cons (lambda X (shen.function-macro X)) ()))))))))))))))))))) (do (set shen.*gensym* 0) (do (set shen.*tracking* ()) (do (set shen.*alphabet* (cons A (cons B (cons C (cons D (cons E (cons F (cons G (cons H (cons I (cons J (cons K (cons L (cons M (cons N (cons O (cons P (cons Q (cons R (cons S (cons T (cons U (cons V (cons W (cons X (cons Y (cons Z ()))))))))))))))))))))))))))) (do (set shen.*special* (cons @p (cons @s (cons @v (cons cons (cons lambda (cons let (cons where (cons set (cons open ())))))))))) (do (set shen.*extraspecial* (cons define (cons shen.process-datatype (cons input+ (cons defcc (cons shen.read+ (cons defmacro ()))))))) (do (set shen.*spy* false) (do (set shen.*datatypes* ()) (do (set shen.*alldatatypes* ()) (do (set shen.*shen-type-theory-enabled?* true) (do (set shen.*synonyms* ()) (do (set shen.*system* ()) (do (set shen.*maxcomplexity* 128) (do (set shen.*occurs* true) (do (set shen.*maxinferences* 1000000) (do (set *maximum-print-sequence-size* 20) (do (set shen.*catch* 0) (do (set shen.*call* 0) (do (set shen.*infs* 0) (do (set *hush* false) (do (set shen.*optimise* false) (do (set *version* "Shen 22.4") (do (if (not (bound? *home-directory*)) (set *home-directory* "") shen.skip) (do (if (not (bound? *sterror*)) (set *sterror* (value *stoutput*)) shen.skip) (do (shen.initialise_arity_table (cons abort (cons 0 (cons absvector? (cons 1 (cons absvector (cons 1 (cons adjoin (cons 2 (cons and (cons 2 (cons append (cons 2 (cons arity (cons 1 (cons assoc (cons 2 (cons boolean? (cons 1 (cons bound? (cons 1 (cons cd (cons 1 (cons close (cons 1 (cons compile (cons 3 (cons concat (cons 2 (cons cons (cons 2 (cons cons? (cons 1 (cons cn (cons 2 (cons declare (cons 2 (cons destroy (cons 1 (cons difference (cons 2 (cons do (cons 2 (cons element? (cons 2 (cons empty? (cons 1 (cons enable-type-theory (cons 1 (cons error-to-string (cons 1 (cons shen.interror (cons 2 (cons eval (cons 1 (cons eval-kl (cons 1 (cons explode (cons 1 (cons external (cons 1 (cons fail-if (cons 2 (cons fail (cons 0 (cons fix (cons 2 (cons findall (cons 5 (cons freeze (cons 1 (cons fst (cons 1 (cons gensym (cons 1 (cons get (cons 3 (cons get-time (cons 1 (cons address-> (cons 3 (cons <-address (cons 2 (cons <-vector (cons 2 (cons > (cons 2 (cons >= (cons 2 (cons = (cons 2 (cons hash (cons 2 (cons hd (cons 1 (cons hdv (cons 1 (cons hdstr (cons 1 (cons head (cons 1 (cons if (cons 3 (cons integer? (cons 1 (cons intern (cons 1 (cons identical (cons 4 (cons inferences (cons 0 (cons input (cons 1 (cons input+ (cons 2 (cons implementation (cons 0 (cons intersection (cons 2 (cons internal (cons 1 (cons it (cons 0 (cons kill (cons 0 (cons language (cons 0 (cons length (cons 1 (cons limit (cons 1 (cons lineread (cons 1 (cons load (cons 1 (cons < (cons 2 (cons <= (cons 2 (cons vector (cons 1 (cons macroexpand (cons 1 (cons map (cons 2 (cons mapcan (cons 2 (cons maxinferences (cons 1 (cons nl (cons 1 (cons not (cons 1 (cons nth (cons 2 (cons n->string (cons 1 (cons number? (cons 1 (cons occurs-check (cons 1 (cons occurrences (cons 2 (cons occurs-check (cons 1 (cons open (cons 2 (cons optimise (cons 1 (cons or (cons 2 (cons os (cons 0 (cons package (cons 3 (cons package? (cons 1 (cons port (cons 0 (cons porters (cons 0 (cons pos (cons 2 (cons print (cons 1 (cons profile (cons 1 (cons profile-results (cons 1 (cons pr (cons 2 (cons ps (cons 1 (cons preclude (cons 1 (cons preclude-all-but (cons 1 (cons protect (cons 1 (cons address-> (cons 3 (cons put (cons 4 (cons shen.reassemble (cons 2 (cons read-file-as-string (cons 1 (cons read-file (cons 1 (cons read-file-as-bytelist (cons 1 (cons read (cons 1 (cons read-byte (cons 1 (cons read-from-string (cons 1 (cons receive (cons 1 (cons release (cons 0 (cons remove (cons 2 (cons shen.require (cons 3 (cons reverse (cons 1 (cons set (cons 2 (cons simple-error (cons 1 (cons snd (cons 1 (cons specialise (cons 1 (cons spy (cons 1 (cons step (cons 1 (cons stinput (cons 0 (cons stoutput (cons 0 (cons sterror (cons 0 (cons string->n (cons 1 (cons string->symbol (cons 1 (cons string? (cons 1 (cons str (cons 1 (cons subst (cons 3 (cons sum (cons 1 (cons symbol? (cons 1 (cons systemf (cons 1 (cons tail (cons 1 (cons tl (cons 1 (cons tc (cons 1 (cons tc? (cons 0 (cons thaw (cons 1 (cons tlstr (cons 1 (cons track (cons 1 (cons trap-error (cons 2 (cons tuple? (cons 1 (cons type (cons 2 (cons return (cons 3 (cons undefmacro (cons 1 (cons unput (cons 3 (cons unprofile (cons 1 (cons unify (cons 4 (cons unify! (cons 4 (cons union (cons 2 (cons untrack (cons 1 (cons unspecialise (cons 1 (cons undefmacro (cons 1 (cons vector (cons 1 (cons vector? (cons 1 (cons vector-> (cons 3 (cons value (cons 1 (cons variable? (cons 1 (cons version (cons 0 (cons write-byte (cons 2 (cons write-to-file (cons 2 (cons y-or-n? (cons 1 (cons + (cons 2 (cons * (cons 2 (cons / (cons 2 (cons - (cons 2 (cons == (cons 2 (cons <e> (cons 1 (cons <!> (cons 1 (cons @p (cons 2 (cons @v (cons 2 (cons @s (cons 2 (cons preclude (cons 1 (cons include (cons 1 (cons preclude-all-but (cons 1 (cons include-all-but (cons 1 ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (do (put (intern "shen") shen.external-symbols (cons ! (cons } (cons { (cons --> (cons <-- (cons && (cons : (cons ; (cons :- (cons := (cons _ (cons , (cons *language* (cons *implementation* (cons *stinput* (cons *stoutput* (cons *sterror* (cons *home-directory* (cons *version* (cons *maximum-print-sequence-size* (cons *macros* (cons *os* (cons *release* (cons *property-vector* (cons *port* (cons *porters* (cons *hush* (cons @v (cons @p (cons @s (cons <- (cons -> (cons <e> (cons <!> (cons == (cons = (cons >= (cons > (cons /. (cons =! (cons $ (cons - (cons / (cons * (cons + (cons <= (cons < (cons >> (cons y-or-n? (cons write-to-file (cons write-byte (cons where (cons when (cons warn (cons version (cons verified (cons variable? (cons value (cons vector-> (cons <-vector (cons vector (cons vector? (cons unspecialise (cons untrack (cons unit (cons shen.unix (cons union (cons unify (cons unify! (cons unput (cons unprofile (cons undefmacro (cons return (cons type (cons tuple? (cons true (cons trap-error (cons track (cons time (cons thaw (cons tc? (cons tc (cons tl (cons tlstr (cons tlv (cons tail (cons systemf (cons synonyms (cons symbol (cons symbol? (cons string->symbol (cons sum (cons subst (cons string? (cons string->n (cons stream (cons string (cons stinput (cons sterror (cons stoutput (cons step (cons spy (cons specialise (cons snd (cons simple-error (cons set (cons save (cons str (cons run (cons reverse (cons remove (cons release (cons read (cons receive (cons read-file (cons read-file-as-bytelist (cons read-file-as-string (cons read-byte (cons read-from-string (cons package? (cons put (cons preclude (cons preclude-all-but (cons ps (cons prolog? (cons protect (cons profile-results (cons profile (cons print (cons pr (cons pos (cons porters (cons port (cons package (cons output (cons out (cons os (cons or (cons optimise (cons open (cons occurrences (cons occurs-check (cons n->string (cons number? (cons number (cons null (cons nth (cons not (cons nl (cons mode (cons macroexpand (cons maxinferences (cons mapcan (cons map (cons make-string (cons load (cons loaded (cons list (cons lineread (cons limit (cons length (cons let (cons lazy (cons lambda (cons language (cons kill (cons is (cons intersection (cons inferences (cons intern (cons integer? (cons input (cons input+ (cons include (cons include-all-but (cons it (cons in (cons internal (cons implementation (cons if (cons identical (cons head (cons hd (cons hdv (cons hdstr (cons hash (cons get (cons get-time (cons gensym (cons function (cons fst (cons freeze (cons fix (cons file (cons fail (cons fail-if (cons fwhen (cons findall (cons false (cons enable-type-theory (cons explode (cons external (cons exception (cons eval-kl (cons eval (cons error-to-string (cons error (cons empty? (cons element? (cons do (cons difference (cons destroy (cons defun (cons define (cons defmacro (cons defcc (cons defprolog (cons declare (cons datatype (cons cut (cons cn (cons cons? (cons cons (cons cond (cons concat (cons compile (cons cd (cons cases (cons call (cons close (cons bind (cons bound? (cons boolean? (cons boolean (cons bar! (cons assoc (cons arity (cons abort (cons append (cons and (cons adjoin (cons <-address (cons address-> (cons absvector? (cons absvector ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (value *property-vector*)) (do (set shen.*history* ()) (do (set shen.*step* false) (set shen.*empty-absvector* (absvector 0))))))))))))))))))))))))))))))))))))))))))

(defun shen.initialise-signedfuncs () (do (set shen.*signedfuncs* ()) (do (set shen.*signedfuncs* (cons (cons absvector? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons adjoin (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons and (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons shen.app (cons A (cons --> (cons (cons string (cons --> (cons (cons symbol (cons --> (cons string ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons append (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons arity (cons A (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons assoc (cons A (cons --> (cons (cons (cons list (cons (cons list (cons A ())) ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons boolean? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons bound? (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons cd (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons close (cons (cons stream (cons A ())) (cons --> (cons (cons list (cons B ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons cn (cons string (cons --> (cons (cons string (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons compile (cons (cons A (cons shen.==> (cons B ()))) (cons --> (cons (cons A (cons --> (cons (cons (cons A (cons --> (cons B ()))) (cons --> (cons B ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons cons? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons destroy (cons (cons A (cons --> (cons B ()))) (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons difference (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons do (cons A (cons --> (cons (cons B (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons <e> (cons (cons list (cons A ())) (cons shen.==> (cons (cons list (cons B ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons <!> (cons (cons list (cons A ())) (cons shen.==> (cons (cons list (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons element? (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons empty? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons enable-type-theory (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons external (cons symbol (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons error-to-string (cons exception (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons explode (cons A (cons --> (cons (cons list (cons string ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons fail (cons --> (cons symbol ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons fail-if (cons (cons symbol (cons --> (cons boolean ()))) (cons --> (cons (cons symbol (cons --> (cons symbol ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons fix (cons (cons A (cons --> (cons A ()))) (cons --> (cons (cons A (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons freeze (cons A (cons --> (cons (cons lazy (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons fst (cons (cons A (cons * (cons B ()))) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons function (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons gensym (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons <-vector (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons vector-> (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons (cons A (cons --> (cons (cons vector (cons A ())) ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons vector (cons number (cons --> (cons (cons vector (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons get-time (cons symbol (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons hash (cons A (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons head (cons (cons list (cons A ())) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons hdv (cons (cons vector (cons A ())) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons hdstr (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons if (cons boolean (cons --> (cons (cons A (cons --> (cons (cons A (cons --> (cons A ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons it (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons implementation (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons include (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons include-all-but (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons inferences (cons --> (cons number ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons shen.insert (cons A (cons --> (cons (cons string (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons integer? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons internal (cons symbol (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons intersection (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons kill (cons --> (cons A ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons language (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons length (cons (cons list (cons A ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons limit (cons (cons vector (cons A ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons load (cons string (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons map (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons mapcan (cons (cons A (cons --> (cons (cons list (cons B ())) ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons maxinferences (cons number (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons n->string (cons number (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons nl (cons number (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons not (cons boolean (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons nth (cons number (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons number? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons occurrences (cons A (cons --> (cons (cons B (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons occurs-check (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons optimise (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons or (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons os (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons package? (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons port (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons porters (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons pos (cons string (cons --> (cons (cons number (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons pr (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons print (cons A (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons profile (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons preclude (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons shen.proc-nl (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons profile-results (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons A (cons --> (cons B ()))) (cons * (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons protect (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons preclude-all-but (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons shen.prhush (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons ps (cons symbol (cons --> (cons (cons list (cons unit ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read (cons (cons stream (cons in ())) (cons --> (cons unit ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-byte (cons (cons stream (cons in ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-file-as-bytelist (cons string (cons --> (cons (cons list (cons number ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-file-as-string (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-file (cons string (cons --> (cons (cons list (cons unit ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-from-string (cons string (cons --> (cons (cons list (cons unit ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons release (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons remove (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons reverse (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons simple-error (cons string (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons snd (cons (cons A (cons * (cons B ()))) (cons --> (cons B ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons specialise (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons spy (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons step (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons stinput (cons --> (cons (cons stream (cons in ())) ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons sterror (cons --> (cons (cons stream (cons out ())) ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons stoutput (cons --> (cons (cons stream (cons out ())) ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons string? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons str (cons A (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons string->n (cons string (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons string->symbol (cons string (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons sum (cons (cons list (cons number ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons symbol? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons systemf (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tail (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tlstr (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tlv (cons (cons vector (cons A ())) (cons --> (cons (cons vector (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tc (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tc? (cons --> (cons boolean ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons thaw (cons (cons lazy (cons A ())) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons track (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons trap-error (cons A (cons --> (cons (cons (cons exception (cons --> (cons A ()))) (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tuple? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons undefmacro (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons union (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons unprofile (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons untrack (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons unspecialise (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons variable? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons vector? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons version (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons write-to-file (cons string (cons --> (cons (cons A (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons write-byte (cons number (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons y-or-n? (cons string (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons > (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons < (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons >= (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons <= (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons = (cons A (cons --> (cons (cons A (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons + (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons / (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons - (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons * (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (set shen.*signedfuncs* (cons (cons == (cons A (cons --> (cons (cons B (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.initialise-signedfunc-lambda-forms () (do (shen.set-lambda-form-entry (cons shen.type-signature-of-absvector? (lambda V3181 (lambda V3182 (lambda V3183 (shen.type-signature-of-absvector? V3181 V3182 V3183)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-adjoin (lambda V3191 (lambda V3192 (lambda V3193 (shen.type-signature-of-adjoin V3191 V3192 V3193)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-and (lambda V3201 (lambda V3202 (lambda V3203 (shen.type-signature-of-and V3201 V3202 V3203)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.app (lambda V3211 (lambda V3212 (lambda V3213 (shen.type-signature-of-shen.app V3211 V3212 V3213)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-append (lambda V3221 (lambda V3222 (lambda V3223 (shen.type-signature-of-append V3221 V3222 V3223)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-arity (lambda V3231 (lambda V3232 (lambda V3233 (shen.type-signature-of-arity V3231 V3232 V3233)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-assoc (lambda V3241 (lambda V3242 (lambda V3243 (shen.type-signature-of-assoc V3241 V3242 V3243)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-boolean? (lambda V3251 (lambda V3252 (lambda V3253 (shen.type-signature-of-boolean? V3251 V3252 V3253)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-bound? (lambda V3261 (lambda V3262 (lambda V3263 (shen.type-signature-of-bound? V3261 V3262 V3263)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-cd (lambda V3271 (lambda V3272 (lambda V3273 (shen.type-signature-of-cd V3271 V3272 V3273)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-close (lambda V3281 (lambda V3282 (lambda V3283 (shen.type-signature-of-close V3281 V3282 V3283)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-cn (lambda V3291 (lambda V3292 (lambda V3293 (shen.type-signature-of-cn V3291 V3292 V3293)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-compile (lambda V3301 (lambda V3302 (lambda V3303 (shen.type-signature-of-compile V3301 V3302 V3303)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-cons? (lambda V3311 (lambda V3312 (lambda V3313 (shen.type-signature-of-cons? V3311 V3312 V3313)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-destroy (lambda V3321 (lambda V3322 (lambda V3323 (shen.type-signature-of-destroy V3321 V3322 V3323)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-difference (lambda V3331 (lambda V3332 (lambda V3333 (shen.type-signature-of-difference V3331 V3332 V3333)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-do (lambda V3341 (lambda V3342 (lambda V3343 (shen.type-signature-of-do V3341 V3342 V3343)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<e> (lambda V3351 (lambda V3352 (lambda V3353 (shen.type-signature-of-<e> V3351 V3352 V3353)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<!> (lambda V3361 (lambda V3362 (lambda V3363 (shen.type-signature-of-<!> V3361 V3362 V3363)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-element? (lambda V3371 (lambda V3372 (lambda V3373 (shen.type-signature-of-element? V3371 V3372 V3373)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-empty? (lambda V3381 (lambda V3382 (lambda V3383 (shen.type-signature-of-empty? V3381 V3382 V3383)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-enable-type-theory (lambda V3391 (lambda V3392 (lambda V3393 (shen.type-signature-of-enable-type-theory V3391 V3392 V3393)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-external (lambda V3401 (lambda V3402 (lambda V3403 (shen.type-signature-of-external V3401 V3402 V3403)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-error-to-string (lambda V3411 (lambda V3412 (lambda V3413 (shen.type-signature-of-error-to-string V3411 V3412 V3413)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-explode (lambda V3421 (lambda V3422 (lambda V3423 (shen.type-signature-of-explode V3421 V3422 V3423)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fail (lambda V3431 (lambda V3432 (lambda V3433 (shen.type-signature-of-fail V3431 V3432 V3433)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fail-if (lambda V3441 (lambda V3442 (lambda V3443 (shen.type-signature-of-fail-if V3441 V3442 V3443)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fix (lambda V3451 (lambda V3452 (lambda V3453 (shen.type-signature-of-fix V3451 V3452 V3453)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-freeze (lambda V3461 (lambda V3462 (lambda V3463 (shen.type-signature-of-freeze V3461 V3462 V3463)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fst (lambda V3471 (lambda V3472 (lambda V3473 (shen.type-signature-of-fst V3471 V3472 V3473)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-function (lambda V3481 (lambda V3482 (lambda V3483 (shen.type-signature-of-function V3481 V3482 V3483)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-gensym (lambda V3491 (lambda V3492 (lambda V3493 (shen.type-signature-of-gensym V3491 V3492 V3493)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<-vector (lambda V3501 (lambda V3502 (lambda V3503 (shen.type-signature-of-<-vector V3501 V3502 V3503)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-vector-> (lambda V3511 (lambda V3512 (lambda V3513 (shen.type-signature-of-vector-> V3511 V3512 V3513)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-vector (lambda V3521 (lambda V3522 (lambda V3523 (shen.type-signature-of-vector V3521 V3522 V3523)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-get-time (lambda V3531 (lambda V3532 (lambda V3533 (shen.type-signature-of-get-time V3531 V3532 V3533)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-hash (lambda V3541 (lambda V3542 (lambda V3543 (shen.type-signature-of-hash V3541 V3542 V3543)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-head (lambda V3551 (lambda V3552 (lambda V3553 (shen.type-signature-of-head V3551 V3552 V3553)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-hdv (lambda V3561 (lambda V3562 (lambda V3563 (shen.type-signature-of-hdv V3561 V3562 V3563)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-hdstr (lambda V3571 (lambda V3572 (lambda V3573 (shen.type-signature-of-hdstr V3571 V3572 V3573)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-if (lambda V3581 (lambda V3582 (lambda V3583 (shen.type-signature-of-if V3581 V3582 V3583)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-it (lambda V3591 (lambda V3592 (lambda V3593 (shen.type-signature-of-it V3591 V3592 V3593)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-implementation (lambda V3601 (lambda V3602 (lambda V3603 (shen.type-signature-of-implementation V3601 V3602 V3603)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-include (lambda V3611 (lambda V3612 (lambda V3613 (shen.type-signature-of-include V3611 V3612 V3613)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-include-all-but (lambda V3621 (lambda V3622 (lambda V3623 (shen.type-signature-of-include-all-but V3621 V3622 V3623)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-inferences (lambda V3631 (lambda V3632 (lambda V3633 (shen.type-signature-of-inferences V3631 V3632 V3633)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.insert (lambda V3641 (lambda V3642 (lambda V3643 (shen.type-signature-of-shen.insert V3641 V3642 V3643)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-integer? (lambda V3651 (lambda V3652 (lambda V3653 (shen.type-signature-of-integer? V3651 V3652 V3653)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-internal (lambda V3661 (lambda V3662 (lambda V3663 (shen.type-signature-of-internal V3661 V3662 V3663)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-intersection (lambda V3671 (lambda V3672 (lambda V3673 (shen.type-signature-of-intersection V3671 V3672 V3673)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-kill (lambda V3681 (lambda V3682 (lambda V3683 (shen.type-signature-of-kill V3681 V3682 V3683)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-language (lambda V3691 (lambda V3692 (lambda V3693 (shen.type-signature-of-language V3691 V3692 V3693)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-length (lambda V3701 (lambda V3702 (lambda V3703 (shen.type-signature-of-length V3701 V3702 V3703)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-limit (lambda V3711 (lambda V3712 (lambda V3713 (shen.type-signature-of-limit V3711 V3712 V3713)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-load (lambda V3721 (lambda V3722 (lambda V3723 (shen.type-signature-of-load V3721 V3722 V3723)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-map (lambda V3731 (lambda V3732 (lambda V3733 (shen.type-signature-of-map V3731 V3732 V3733)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-mapcan (lambda V3741 (lambda V3742 (lambda V3743 (shen.type-signature-of-mapcan V3741 V3742 V3743)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-maxinferences (lambda V3751 (lambda V3752 (lambda V3753 (shen.type-signature-of-maxinferences V3751 V3752 V3753)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-n->string (lambda V3761 (lambda V3762 (lambda V3763 (shen.type-signature-of-n->string V3761 V3762 V3763)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-nl (lambda V3771 (lambda V3772 (lambda V3773 (shen.type-signature-of-nl V3771 V3772 V3773)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-not (lambda V3781 (lambda V3782 (lambda V3783 (shen.type-signature-of-not V3781 V3782 V3783)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-nth (lambda V3791 (lambda V3792 (lambda V3793 (shen.type-signature-of-nth V3791 V3792 V3793)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-number? (lambda V3801 (lambda V3802 (lambda V3803 (shen.type-signature-of-number? V3801 V3802 V3803)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-occurrences (lambda V3811 (lambda V3812 (lambda V3813 (shen.type-signature-of-occurrences V3811 V3812 V3813)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-occurs-check (lambda V3821 (lambda V3822 (lambda V3823 (shen.type-signature-of-occurs-check V3821 V3822 V3823)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-optimise (lambda V3831 (lambda V3832 (lambda V3833 (shen.type-signature-of-optimise V3831 V3832 V3833)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-or (lambda V3841 (lambda V3842 (lambda V3843 (shen.type-signature-of-or V3841 V3842 V3843)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-os (lambda V3851 (lambda V3852 (lambda V3853 (shen.type-signature-of-os V3851 V3852 V3853)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-package? (lambda V3861 (lambda V3862 (lambda V3863 (shen.type-signature-of-package? V3861 V3862 V3863)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-port (lambda V3871 (lambda V3872 (lambda V3873 (shen.type-signature-of-port V3871 V3872 V3873)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-porters (lambda V3881 (lambda V3882 (lambda V3883 (shen.type-signature-of-porters V3881 V3882 V3883)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-pos (lambda V3891 (lambda V3892 (lambda V3893 (shen.type-signature-of-pos V3891 V3892 V3893)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-pr (lambda V3901 (lambda V3902 (lambda V3903 (shen.type-signature-of-pr V3901 V3902 V3903)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-print (lambda V3911 (lambda V3912 (lambda V3913 (shen.type-signature-of-print V3911 V3912 V3913)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-profile (lambda V3921 (lambda V3922 (lambda V3923 (shen.type-signature-of-profile V3921 V3922 V3923)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-preclude (lambda V3931 (lambda V3932 (lambda V3933 (shen.type-signature-of-preclude V3931 V3932 V3933)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.proc-nl (lambda V3941 (lambda V3942 (lambda V3943 (shen.type-signature-of-shen.proc-nl V3941 V3942 V3943)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-profile-results (lambda V3951 (lambda V3952 (lambda V3953 (shen.type-signature-of-profile-results V3951 V3952 V3953)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-protect (lambda V3961 (lambda V3962 (lambda V3963 (shen.type-signature-of-protect V3961 V3962 V3963)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-preclude-all-but (lambda V3971 (lambda V3972 (lambda V3973 (shen.type-signature-of-preclude-all-but V3971 V3972 V3973)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.prhush (lambda V3981 (lambda V3982 (lambda V3983 (shen.type-signature-of-shen.prhush V3981 V3982 V3983)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-ps (lambda V3991 (lambda V3992 (lambda V3993 (shen.type-signature-of-ps V3991 V3992 V3993)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read (lambda V4001 (lambda V4002 (lambda V4003 (shen.type-signature-of-read V4001 V4002 V4003)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-byte (lambda V4011 (lambda V4012 (lambda V4013 (shen.type-signature-of-read-byte V4011 V4012 V4013)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-file-as-bytelist (lambda V4021 (lambda V4022 (lambda V4023 (shen.type-signature-of-read-file-as-bytelist V4021 V4022 V4023)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-file-as-string (lambda V4031 (lambda V4032 (lambda V4033 (shen.type-signature-of-read-file-as-string V4031 V4032 V4033)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-file (lambda V4041 (lambda V4042 (lambda V4043 (shen.type-signature-of-read-file V4041 V4042 V4043)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-from-string (lambda V4051 (lambda V4052 (lambda V4053 (shen.type-signature-of-read-from-string V4051 V4052 V4053)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-release (lambda V4061 (lambda V4062 (lambda V4063 (shen.type-signature-of-release V4061 V4062 V4063)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-remove (lambda V4071 (lambda V4072 (lambda V4073 (shen.type-signature-of-remove V4071 V4072 V4073)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-reverse (lambda V4081 (lambda V4082 (lambda V4083 (shen.type-signature-of-reverse V4081 V4082 V4083)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-simple-error (lambda V4091 (lambda V4092 (lambda V4093 (shen.type-signature-of-simple-error V4091 V4092 V4093)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-snd (lambda V4101 (lambda V4102 (lambda V4103 (shen.type-signature-of-snd V4101 V4102 V4103)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-specialise (lambda V4111 (lambda V4112 (lambda V4113 (shen.type-signature-of-specialise V4111 V4112 V4113)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-spy (lambda V4121 (lambda V4122 (lambda V4123 (shen.type-signature-of-spy V4121 V4122 V4123)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-step (lambda V4131 (lambda V4132 (lambda V4133 (shen.type-signature-of-step V4131 V4132 V4133)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-stinput (lambda V4141 (lambda V4142 (lambda V4143 (shen.type-signature-of-stinput V4141 V4142 V4143)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-sterror (lambda V4151 (lambda V4152 (lambda V4153 (shen.type-signature-of-sterror V4151 V4152 V4153)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-stoutput (lambda V4161 (lambda V4162 (lambda V4163 (shen.type-signature-of-stoutput V4161 V4162 V4163)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-string? (lambda V4171 (lambda V4172 (lambda V4173 (shen.type-signature-of-string? V4171 V4172 V4173)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-str (lambda V4181 (lambda V4182 (lambda V4183 (shen.type-signature-of-str V4181 V4182 V4183)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-string->n (lambda V4191 (lambda V4192 (lambda V4193 (shen.type-signature-of-string->n V4191 V4192 V4193)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-string->symbol (lambda V4201 (lambda V4202 (lambda V4203 (shen.type-signature-of-string->symbol V4201 V4202 V4203)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-sum (lambda V4211 (lambda V4212 (lambda V4213 (shen.type-signature-of-sum V4211 V4212 V4213)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-symbol? (lambda V4221 (lambda V4222 (lambda V4223 (shen.type-signature-of-symbol? V4221 V4222 V4223)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-systemf (lambda V4231 (lambda V4232 (lambda V4233 (shen.type-signature-of-systemf V4231 V4232 V4233)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tail (lambda V4241 (lambda V4242 (lambda V4243 (shen.type-signature-of-tail V4241 V4242 V4243)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tlstr (lambda V4251 (lambda V4252 (lambda V4253 (shen.type-signature-of-tlstr V4251 V4252 V4253)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tlv (lambda V4261 (lambda V4262 (lambda V4263 (shen.type-signature-of-tlv V4261 V4262 V4263)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tc (lambda V4271 (lambda V4272 (lambda V4273 (shen.type-signature-of-tc V4271 V4272 V4273)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tc? (lambda V4281 (lambda V4282 (lambda V4283 (shen.type-signature-of-tc? V4281 V4282 V4283)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-thaw (lambda V4291 (lambda V4292 (lambda V4293 (shen.type-signature-of-thaw V4291 V4292 V4293)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-track (lambda V4301 (lambda V4302 (lambda V4303 (shen.type-signature-of-track V4301 V4302 V4303)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-trap-error (lambda V4311 (lambda V4312 (lambda V4313 (shen.type-signature-of-trap-error V4311 V4312 V4313)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tuple? (lambda V4321 (lambda V4322 (lambda V4323 (shen.type-signature-of-tuple? V4321 V4322 V4323)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-undefmacro (lambda V4331 (lambda V4332 (lambda V4333 (shen.type-signature-of-undefmacro V4331 V4332 V4333)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-union (lambda V4341 (lambda V4342 (lambda V4343 (shen.type-signature-of-union V4341 V4342 V4343)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-unprofile (lambda V4351 (lambda V4352 (lambda V4353 (shen.type-signature-of-unprofile V4351 V4352 V4353)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-untrack (lambda V4361 (lambda V4362 (lambda V4363 (shen.type-signature-of-untrack V4361 V4362 V4363)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-unspecialise (lambda V4371 (lambda V4372 (lambda V4373 (shen.type-signature-of-unspecialise V4371 V4372 V4373)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-variable? (lambda V4381 (lambda V4382 (lambda V4383 (shen.type-signature-of-variable? V4381 V4382 V4383)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-vector? (lambda V4391 (lambda V4392 (lambda V4393 (shen.type-signature-of-vector? V4391 V4392 V4393)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-version (lambda V4401 (lambda V4402 (lambda V4403 (shen.type-signature-of-version V4401 V4402 V4403)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-write-to-file (lambda V4411 (lambda V4412 (lambda V4413 (shen.type-signature-of-write-to-file V4411 V4412 V4413)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-write-byte (lambda V4421 (lambda V4422 (lambda V4423 (shen.type-signature-of-write-byte V4421 V4422 V4423)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-y-or-n? (lambda V4431 (lambda V4432 (lambda V4433 (shen.type-signature-of-y-or-n? V4431 V4432 V4433)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-> (lambda V4441 (lambda V4442 (lambda V4443 (shen.type-signature-of-> V4441 V4442 V4443)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-< (lambda V4451 (lambda V4452 (lambda V4453 (shen.type-signature-of-< V4451 V4452 V4453)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of->= (lambda V4461 (lambda V4462 (lambda V4463 (shen.type-signature-of->= V4461 V4462 V4463)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<= (lambda V4471 (lambda V4472 (lambda V4473 (shen.type-signature-of-<= V4471 V4472 V4473)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-= (lambda V4481 (lambda V4482 (lambda V4483 (shen.type-signature-of-= V4481 V4482 V4483)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-+ (lambda V4491 (lambda V4492 (lambda V4493 (shen.type-signature-of-+ V4491 V4492 V4493)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-/ (lambda V4501 (lambda V4502 (lambda V4503 (shen.type-signature-of-/ V4501 V4502 V4503)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-- (lambda V4511 (lambda V4512 (lambda V4513 (shen.type-signature-of-- V4511 V4512 V4513)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-* (lambda V4521 (lambda V4522 (lambda V4523 (shen.type-signature-of-* V4521 V4522 V4523)))))) (shen.set-lambda-form-entry (cons shen.type-signature-of-== (lambda V4531 (lambda V4532 (lambda V4533 (shen.type-signature-of-== V4531 V4532 V4533))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.initialise-lambda-forms () (do (shen.set-lambda-form-entry (cons shen.datatype-error (lambda X (shen.datatype-error X)))) (do (shen.set-lambda-form-entry (cons shen.tuple (lambda X (shen.tuple X)))) (do (shen.set-lambda-form-entry (cons shen.pvar (lambda X (shen.pvar X)))) (do (shen.set-lambda-form-entry (cons shen.dictionary (lambda X (shen.dictionary X)))) (do (shen.set-lambda-form-entry (cons @v (lambda V418 (lambda V419 (@v V418 V419))))) (do (shen.set-lambda-form-entry (cons @p (lambda V420 (lambda V421 (@p V420 V421))))) (do (shen.set-lambda-form-entry (cons @s (lambda V422 (lambda V423 (@s V422 V423))))) (do (shen.set-lambda-form-entry (cons <e> (lambda V424 (<e> V424)))) (do (shen.set-lambda-form-entry (cons <!> (lambda V425 (<!> V425)))) (do (shen.set-lambda-form-entry (cons == (lambda V426 (lambda V427 (== V426 V427))))) (do (shen.set-lambda-form-entry (cons = (lambda V428 (lambda V429 (= V428 V429))))) (do (shen.set-lambda-form-entry (cons >= (lambda V430 (lambda V431 (>= V430 V431))))) (do (shen.set-lambda-form-entry (cons > (lambda V432 (lambda V433 (> V432 V433))))) (do (shen.set-lambda-form-entry (cons - (lambda V434 (lambda V435 (- V434 V435))))) (do (shen.set-lambda-form-entry (cons / (lambda V436 (lambda V437 (/ V436 V437))))) (do (shen.set-lambda-form-entry (cons * (lambda V438 (lambda V439 (* V438 V439))))) (do (shen.set-lambda-form-entry (cons + (lambda V440 (lambda V441 (+ V440 V441))))) (do (shen.set-lambda-form-entry (cons <= (lambda V442 (lambda V443 (<= V442 V443))))) (do (shen.set-lambda-form-entry (cons < (lambda V444 (lambda V445 (< V444 V445))))) (do (shen.set-lambda-form-entry (cons y-or-n? (lambda V446 (y-or-n? V446)))) (do (shen.set-lambda-form-entry (cons write-to-file (lambda V447 (lambda V448 (write-to-file V447 V448))))) (do (shen.set-lambda-form-entry (cons write-byte (lambda V449 (lambda V450 (write-byte V449 V450))))) (do (shen.set-lambda-form-entry (cons variable? (lambda V451 (variable? V451)))) (do (shen.set-lambda-form-entry (cons value (lambda V452 (value V452)))) (do (shen.set-lambda-form-entry (cons vector-> (lambda V453 (lambda V454 (lambda V455 (vector-> V453 V454 V455)))))) (do (shen.set-lambda-form-entry (cons <-vector (lambda V456 (lambda V457 (<-vector V456 V457))))) (do (shen.set-lambda-form-entry (cons vector (lambda V458 (vector V458)))) (do (shen.set-lambda-form-entry (cons vector? (lambda V459 (vector? V459)))) (do (shen.set-lambda-form-entry (cons unspecialise (lambda V460 (unspecialise V460)))) (do (shen.set-lambda-form-entry (cons untrack (lambda V461 (untrack V461)))) (do (shen.set-lambda-form-entry (cons union (lambda V462 (lambda V463 (union V462 V463))))) (do (shen.set-lambda-form-entry (cons unify (lambda V464 (lambda V465 (lambda V466 (lambda V467 (unify V464 V465 V466 V467))))))) (do (shen.set-lambda-form-entry (cons unify! (lambda V468 (lambda V469 (lambda V470 (lambda V471 (unify! V468 V469 V470 V471))))))) (do (shen.set-lambda-form-entry (cons unput (lambda V472 (lambda V473 (lambda V474 (unput V472 V473 V474)))))) (do (shen.set-lambda-form-entry (cons unprofile (lambda V475 (unprofile V475)))) (do (shen.set-lambda-form-entry (cons undefmacro (lambda V476 (undefmacro V476)))) (do (shen.set-lambda-form-entry (cons return (lambda V477 (lambda V478 (lambda V479 (return V477 V478 V479)))))) (do (shen.set-lambda-form-entry (cons type (lambda V480 (lambda V481 (type V480 V481))))) (do (shen.set-lambda-form-entry (cons tuple? (lambda V482 (tuple? V482)))) (do (shen.set-lambda-form-entry (cons trap-error (lambda V483 (lambda V484 (trap-error V483 V484))))) (do (shen.set-lambda-form-entry (cons track (lambda V485 (track V485)))) (do (shen.set-lambda-form-entry (cons thaw (lambda V486 (thaw V486)))) (do (shen.set-lambda-form-entry (cons tc (lambda V487 (tc V487)))) (do (shen.set-lambda-form-entry (cons tl (lambda V488 (tl V488)))) (do (shen.set-lambda-form-entry (cons tlstr (lambda V489 (tlstr V489)))) (do (shen.set-lambda-form-entry (cons tail (lambda V490 (tail V490)))) (do (shen.set-lambda-form-entry (cons systemf (lambda V491 (systemf V491)))) (do (shen.set-lambda-form-entry (cons symbol? (lambda V492 (symbol? V492)))) (do (shen.set-lambda-form-entry (cons string->symbol (lambda V493 (string->symbol V493)))) (do (shen.set-lambda-form-entry (cons sum (lambda V494 (sum V494)))) (do (shen.set-lambda-form-entry (cons subst (lambda V495 (lambda V496 (lambda V497 (subst V495 V496 V497)))))) (do (shen.set-lambda-form-entry (cons string? (lambda V498 (string? V498)))) (do (shen.set-lambda-form-entry (cons string->n (lambda V499 (string->n V499)))) (do (shen.set-lambda-form-entry (cons step (lambda V500 (step V500)))) (do (shen.set-lambda-form-entry (cons spy (lambda V501 (spy V501)))) (do (shen.set-lambda-form-entry (cons specialise (lambda V502 (specialise V502)))) (do (shen.set-lambda-form-entry (cons snd (lambda V503 (snd V503)))) (do (shen.set-lambda-form-entry (cons simple-error (lambda V504 (simple-error V504)))) (do (shen.set-lambda-form-entry (cons set (lambda V505 (lambda V506 (set V505 V506))))) (do (shen.set-lambda-form-entry (cons str (lambda V507 (str V507)))) (do (shen.set-lambda-form-entry (cons reverse (lambda V508 (reverse V508)))) (do (shen.set-lambda-form-entry (cons remove (lambda V509 (lambda V510 (remove V509 V510))))) (do (shen.set-lambda-form-entry (cons read (lambda V511 (read V511)))) (do (shen.set-lambda-form-entry (cons read-file (lambda V512 (read-file V512)))) (do (shen.set-lambda-form-entry (cons read-file-as-bytelist (lambda V513 (read-file-as-bytelist V513)))) (do (shen.set-lambda-form-entry (cons read-file-as-string (lambda V514 (read-file-as-string V514)))) (do (shen.set-lambda-form-entry (cons read-byte (lambda V515 (read-byte V515)))) (do (shen.set-lambda-form-entry (cons read-from-string (lambda V516 (read-from-string V516)))) (do (shen.set-lambda-form-entry (cons package? (lambda V517 (package? V517)))) (do (shen.set-lambda-form-entry (cons put (lambda V518 (lambda V519 (lambda V520 (lambda V521 (put V518 V519 V520 V521))))))) (do (shen.set-lambda-form-entry (cons preclude (lambda V522 (preclude V522)))) (do (shen.set-lambda-form-entry (cons preclude-all-but (lambda V523 (preclude-all-but V523)))) (do (shen.set-lambda-form-entry (cons ps (lambda V524 (ps V524)))) (do (shen.set-lambda-form-entry (cons protect (lambda V525 (protect V525)))) (do (shen.set-lambda-form-entry (cons profile-results (lambda V526 (profile-results V526)))) (do (shen.set-lambda-form-entry (cons profile (lambda V527 (profile V527)))) (do (shen.set-lambda-form-entry (cons print (lambda V528 (print V528)))) (do (shen.set-lambda-form-entry (cons pr (lambda V529 (lambda V530 (pr V529 V530))))) (do (shen.set-lambda-form-entry (cons pos (lambda V531 (lambda V532 (pos V531 V532))))) (do (shen.set-lambda-form-entry (cons or (lambda V533 (lambda V534 (or V533 V534))))) (do (shen.set-lambda-form-entry (cons optimise (lambda V535 (optimise V535)))) (do (shen.set-lambda-form-entry (cons open (lambda V536 (lambda V537 (open V536 V537))))) (do (shen.set-lambda-form-entry (cons occurrences (lambda V538 (lambda V539 (occurrences V538 V539))))) (do (shen.set-lambda-form-entry (cons occurs-check (lambda V540 (occurs-check V540)))) (do (shen.set-lambda-form-entry (cons n->string (lambda V541 (n->string V541)))) (do (shen.set-lambda-form-entry (cons number? (lambda V542 (number? V542)))) (do (shen.set-lambda-form-entry (cons nth (lambda V543 (lambda V544 (nth V543 V544))))) (do (shen.set-lambda-form-entry (cons not (lambda V545 (not V545)))) (do (shen.set-lambda-form-entry (cons nl (lambda V546 (nl V546)))) (do (shen.set-lambda-form-entry (cons macroexpand (lambda V547 (macroexpand V547)))) (do (shen.set-lambda-form-entry (cons maxinferences (lambda V548 (maxinferences V548)))) (do (shen.set-lambda-form-entry (cons mapcan (lambda V549 (lambda V550 (mapcan V549 V550))))) (do (shen.set-lambda-form-entry (cons map (lambda V551 (lambda V552 (map V551 V552))))) (do (shen.set-lambda-form-entry (cons load (lambda V553 (load V553)))) (do (shen.set-lambda-form-entry (cons lineread (lambda V554 (lineread V554)))) (do (shen.set-lambda-form-entry (cons limit (lambda V555 (limit V555)))) (do (shen.set-lambda-form-entry (cons length (lambda V556 (length V556)))) (do (shen.set-lambda-form-entry (cons intersection (lambda V557 (lambda V558 (intersection V557 V558))))) (do (shen.set-lambda-form-entry (cons intern (lambda V559 (intern V559)))) (do (shen.set-lambda-form-entry (cons integer? (lambda V560 (integer? V560)))) (do (shen.set-lambda-form-entry (cons input (lambda V561 (input V561)))) (do (shen.set-lambda-form-entry (cons input+ (lambda V562 (lambda V563 (input+ V562 V563))))) (do (shen.set-lambda-form-entry (cons include (lambda V564 (include V564)))) (do (shen.set-lambda-form-entry (cons include-all-but (lambda V565 (include-all-but V565)))) (do (shen.set-lambda-form-entry (cons internal (lambda V566 (internal V566)))) (do (shen.set-lambda-form-entry (cons if (lambda V567 (lambda V568 (lambda V569 (if V567 V568 V569)))))) (do (shen.set-lambda-form-entry (cons identical (lambda V570 (lambda V571 (lambda V572 (lambda V573 (identical V570 V571 V572 V573))))))) (do (shen.set-lambda-form-entry (cons head (lambda V574 (head V574)))) (do (shen.set-lambda-form-entry (cons hd (lambda V575 (hd V575)))) (do (shen.set-lambda-form-entry (cons hdv (lambda V576 (hdv V576)))) (do (shen.set-lambda-form-entry (cons hdstr (lambda V577 (hdstr V577)))) (do (shen.set-lambda-form-entry (cons hash (lambda V578 (lambda V579 (hash V578 V579))))) (do (shen.set-lambda-form-entry (cons get (lambda V580 (lambda V581 (lambda V582 (get V580 V581 V582)))))) (do (shen.set-lambda-form-entry (cons get-time (lambda V583 (get-time V583)))) (do (shen.set-lambda-form-entry (cons gensym (lambda V584 (gensym V584)))) (do (shen.set-lambda-form-entry (cons fst (lambda V585 (fst V585)))) (do (shen.set-lambda-form-entry (cons freeze (lambda V586 (freeze V586)))) (do (shen.set-lambda-form-entry (cons fix (lambda V587 (lambda V588 (fix V587 V588))))) (do (shen.set-lambda-form-entry (cons fail-if (lambda V589 (lambda V590 (fail-if V589 V590))))) (do (shen.set-lambda-form-entry (cons findall (lambda V591 (lambda V592 (lambda V593 (lambda V594 (lambda V595 (findall V591 V592 V593 V594 V595)))))))) (do (shen.set-lambda-form-entry (cons enable-type-theory (lambda V596 (enable-type-theory V596)))) (do (shen.set-lambda-form-entry (cons explode (lambda V597 (explode V597)))) (do (shen.set-lambda-form-entry (cons external (lambda V598 (external V598)))) (do (shen.set-lambda-form-entry (cons eval-kl (lambda V599 (eval-kl V599)))) (do (shen.set-lambda-form-entry (cons eval (lambda V600 (eval V600)))) (do (shen.set-lambda-form-entry (cons error-to-string (lambda V601 (error-to-string V601)))) (do (shen.set-lambda-form-entry (cons empty? (lambda V602 (empty? V602)))) (do (shen.set-lambda-form-entry (cons element? (lambda V603 (lambda V604 (element? V603 V604))))) (do (shen.set-lambda-form-entry (cons do (lambda V605 (lambda V606 (do V605 V606))))) (do (shen.set-lambda-form-entry (cons difference (lambda V607 (lambda V608 (difference V607 V608))))) (do (shen.set-lambda-form-entry (cons destroy (lambda V609 (destroy V609)))) (do (shen.set-lambda-form-entry (cons declare (lambda V610 (lambda V611 (declare V610 V611))))) (do (shen.set-lambda-form-entry (cons cn (lambda V612 (lambda V613 (cn V612 V613))))) (do (shen.set-lambda-form-entry (cons cons? (lambda V614 (cons? V614)))) (do (shen.set-lambda-form-entry (cons cons (lambda V615 (lambda V616 (cons V615 V616))))) (do (shen.set-lambda-form-entry (cons concat (lambda V617 (lambda V618 (concat V617 V618))))) (do (shen.set-lambda-form-entry (cons compile (lambda V619 (lambda V620 (lambda V621 (compile V619 V620 V621)))))) (do (shen.set-lambda-form-entry (cons cd (lambda V622 (cd V622)))) (do (shen.set-lambda-form-entry (cons close (lambda V623 (close V623)))) (do (shen.set-lambda-form-entry (cons bound? (lambda V624 (bound? V624)))) (do (shen.set-lambda-form-entry (cons boolean? (lambda V625 (boolean? V625)))) (do (shen.set-lambda-form-entry (cons assoc (lambda V626 (lambda V627 (assoc V626 V627))))) (do (shen.set-lambda-form-entry (cons arity (lambda V628 (arity V628)))) (do (shen.set-lambda-form-entry (cons append (lambda V629 (lambda V630 (append V629 V630))))) (do (shen.set-lambda-form-entry (cons and (lambda V631 (lambda V632 (and V631 V632))))) (do (shen.set-lambda-form-entry (cons adjoin (lambda V633 (lambda V634 (adjoin V633 V634))))) (do (shen.set-lambda-form-entry (cons <-address (lambda V635 (lambda V636 (<-address V635 V636))))) (do (shen.set-lambda-form-entry (cons address-> (lambda V637 (lambda V638 (lambda V639 (address-> V637 V638 V639)))))) (do (shen.set-lambda-form-entry (cons absvector? (lambda V640 (absvector? V640)))) (shen.set-lambda-form-entry (cons absvector (lambda V641 (absvector V641))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.initialise () (do (shen.initialise-environment) (do (shen.initialise-lambda-forms) (do (shen.initialise-signedfunc-lambda-forms) (shen.initialise-signedfuncs)))))



